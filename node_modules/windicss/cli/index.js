#!/usr/bin/env node
'use strict';

var path = require('path');
var index_ts = require('../lib/index.js');
var fs = require('fs');
var index_ts$1 = require('../utils/parser/index.js');
var index_ts$2 = require('../utils/style/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

const flagSymbol = Symbol('arg flag');

class ArgError extends Error {
	constructor(msg, code) {
		super(msg);
		this.name = 'ArgError';
		this.code = code;

		Object.setPrototypeOf(this, ArgError.prototype);
	}
}

function arg(opts, {argv = process.argv.slice(2), permissive = false, stopAtPositional = false} = {}) {
	if (!opts) {
		throw new ArgError('argument specification object is required', 'ARG_CONFIG_NO_SPEC');
	}

	const result = {_: []};

	const aliases = {};
	const handlers = {};

	for (const key of Object.keys(opts)) {
		if (!key) {
			throw new ArgError('argument key cannot be an empty string', 'ARG_CONFIG_EMPTY_KEY');
		}

		if (key[0] !== '-') {
			throw new ArgError(`argument key must start with '-' but found: '${key}'`, 'ARG_CONFIG_NONOPT_KEY');
		}

		if (key.length === 1) {
			throw new ArgError(`argument key must have a name; singular '-' keys are not allowed: ${key}`, 'ARG_CONFIG_NONAME_KEY');
		}

		if (typeof opts[key] === 'string') {
			aliases[key] = opts[key];
			continue;
		}

		let type = opts[key];
		let isFlag = false;

		if (Array.isArray(type) && type.length === 1 && typeof type[0] === 'function') {
			const [fn] = type;
			type = (value, name, prev = []) => {
				prev.push(fn(value, name, prev[prev.length - 1]));
				return prev;
			};
			isFlag = fn === Boolean || fn[flagSymbol] === true;
		} else if (typeof type === 'function') {
			isFlag = type === Boolean || type[flagSymbol] === true;
		} else {
			throw new ArgError(`type missing or not a function or valid array type: ${key}`, 'ARG_CONFIG_VAD_TYPE');
		}

		if (key[1] !== '-' && key.length > 2) {
			throw new ArgError(`short argument keys (with a single hyphen) must have only one character: ${key}`, 'ARG_CONFIG_SHORTOPT_TOOLONG');
		}

		handlers[key] = [type, isFlag];
	}

	for (let i = 0, len = argv.length; i < len; i++) {
		const wholeArg = argv[i];

		if (stopAtPositional && result._.length > 0) {
			result._ = result._.concat(argv.slice(i));
			break;
		}

		if (wholeArg === '--') {
			result._ = result._.concat(argv.slice(i + 1));
			break;
		}

		if (wholeArg.length > 1 && wholeArg[0] === '-') {
			/* eslint-disable operator-linebreak */
			const separatedArguments = (wholeArg[1] === '-' || wholeArg.length === 2)
				? [wholeArg]
				: wholeArg.slice(1).split('').map(a => `-${a}`);
			/* eslint-enable operator-linebreak */

			for (let j = 0; j < separatedArguments.length; j++) {
				const arg = separatedArguments[j];
				const [originalArgName, argStr] = arg[1] === '-' ? arg.split(/=(.*)/, 2) : [arg, undefined];

				let argName = originalArgName;
				while (argName in aliases) {
					argName = aliases[argName];
				}

				if (!(argName in handlers)) {
					if (permissive) {
						result._.push(arg);
						continue;
					} else {
						throw new ArgError(`unknown or unexpected option: ${originalArgName}`, 'ARG_UNKNOWN_OPTION');
					}
				}

				const [type, isFlag] = handlers[argName];

				if (!isFlag && ((j + 1) < separatedArguments.length)) {
					throw new ArgError(`option requires argument (but was followed by another short argument): ${originalArgName}`, 'ARG_MISSING_REQUIRED_SHORTARG');
				}

				if (isFlag) {
					result[argName] = type(true, argName, result[argName]);
				} else if (argStr === undefined) {
					if (
						argv.length < i + 2 ||
						(
							argv[i + 1].length > 1 &&
							(argv[i + 1][0] === '-') &&
							!(
								argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) &&
								(
									type === Number ||
									// eslint-disable-next-line no-undef
									(typeof BigInt !== 'undefined' && type === BigInt)
								)
							)
						)
					) {
						const extended = originalArgName === argName ? '' : ` (alias for ${argName})`;
						throw new ArgError(`option requires argument: ${originalArgName}${extended}`, 'ARG_MISSING_REQUIRED_LONGARG');
					}

					result[argName] = type(argv[i + 1], argName, result[argName]);
					++i;
				} else {
					result[argName] = type(argStr, argName, result[argName]);
				}
			}
		} else {
			result._.push(wholeArg);
		}
	}

	return result;
}

arg.flag = fn => {
	fn[flagSymbol] = true;
	return fn;
};

// Utility types
arg.COUNT = arg.flag((v, name, existingCount) => (existingCount || 0) + 1);

// Expose error class
arg.ArgError = ArgError;

var arg_1 = arg;

var Console = /** @class */ (function () {
    function Console() {
    }
    Console.log = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        // eslint-disable-next-line no-console
        console.log.apply(console, message);
    };
    Console.error = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        // eslint-disable-next-line no-console
        console.error.apply(console, message);
    };
    return Console;
}());
function isFile(path) {
    return fs__default['default'].existsSync(path) && fs__default['default'].lstatSync(path).isFile();
}
function walk(dir, deep) {
    if (deep === void 0) { deep = true; }
    var result = [];
    fs__default['default'].readdirSync(dir).forEach(function (item) {
        var itemPath = path__default['default'].join(dir, item);
        var stat = fs__default['default'].statSync(itemPath);
        if (stat.isFile()) {
            result.push({
                type: 'file',
                path: itemPath,
            });
        }
        else {
            if (!itemPath.startsWith('node_modules') && stat.isDirectory()) {
                result.push({
                    type: 'folder',
                    path: itemPath,
                });
                if (deep)
                    result = __spreadArray(__spreadArray([], result), walk(itemPath, deep));
            }
        }
    });
    return result;
}
var FilePattern = /** @class */ (function () {
    function FilePattern(pattern) {
        this.pattern = this._transform(pattern);
    }
    FilePattern.prototype.match = function (text) {
        return Boolean(text.match(this.pattern));
    };
    FilePattern.prototype._transform = function (pattern) {
        // if (!pattern.startsWith('^')) pattern = '^' + pattern;
        if (!pattern.endsWith('$'))
            pattern += '$';
        var backSlash = String.fromCharCode(92);
        var anyText = "[" + backSlash + "s" + backSlash + "S]+";
        pattern = pattern
            .replace(/^\.\//, '')
            .replace(/\*\*\/\*/g, anyText)
            .replace(/\*\*/g, '[^/]+')
            .replace(/\*/g, '[^/]+')
            .replace(/\./g, backSlash + '.')
            .replace(/\//g, backSlash + '/');
        return new RegExp(pattern);
    };
    return FilePattern;
}());
function getVersion() {
    // eslint-disable-next-line quotes
    return "windicss 2.5.14"; // replace by rollup
}
function generateTemplate(folder, outputPath) {
    if (outputPath === void 0) { outputPath = 'windi.output.css'; }
    if (!(fs__default['default'].existsSync(folder) && fs__default['default'].lstatSync(folder).isDirectory())) {
        fs__default['default'].mkdirSync(folder);
        if (!fs__default['default'].existsSync(folder))
            throw new Error("Folder " + folder + " creation failed.");
    }
    folder = path__default['default'].resolve(folder);
    var template = "<!DOCTYPE html>\n  <html lang=\"en\">\n\n  <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>" + path__default['default'].basename(folder) + "</title>\n      <link rel=\"stylesheet\" href=\"" + outputPath + "\">\n  </head>\n\n  <body class=\"bg-gray-100\">\n      <div class=\"container mx-auto flex flex-col justify-center items-center h-screen\">\n          <div class=\"lg:flex shadow rounded-lg\">\n              <div class=\"bg-blue-500 rounded-t-lg lg:rounded-tr-none lg:rounded-l-lg lg:w-4/12 py-4 h-full flex flex-col justify-center\">\n                  <div class=\"text-center tracking-wide\">\n                      <div class=\"text-white font-bold text-8xl lg:text-4xl\">24</div>\n                      <div class=\"text-white font-normal text-4xl pt-4 lg:pt-0 lg:text-2xl\">Sept</div>\n                  </div>\n              </div>\n              <div class=\"w-full px-1 bg-white py-5 lg:px-2 lg:py-2 tracking-wide\">\n                  <div class=\"flex flex-row lg:justify-start justify-center\">\n                      <div class=\"text-gray-700 font-light text-sm text-center lg:text-left px-2\">\n                          1:30 PM\n                      </div>\n                      <div class=\"text-gray-700 font-light text-sm text-center lg:text-left px-2\">\n                          Organiser : IHC\n                      </div>\n                  </div>\n                  <div class=\"text-gray-700 text-xl pb-1 text-center lg:text-left px-2\">\n                      International Conference Dubai\n                  </div>\n\n                  <div class=\"text-gray-800 font-light text-sm pt-1 text-center lg:text-left px-2\">\n                      A-142/1, A-142, Ganesh Nagar, Tilak Nagar, New Delhi, 110018\n                  </div>\n              </div>\n              <div class=\"flex flex-row items-center w-full lg:w-1/3 bg-white lg:justify-end justify-center px-2 py-4 lg:px-0 rounded-lg\">\n                  <span class=\"tracking-wider text-gray-600 cursor-pointer bg-gray-100 hover:bg-gray-200 px-4 py-2 text-sm rounded-lg leading-loose mx-2\">\n                      Going\n                  </span>\n              </div>\n          </div>\n      </div>\n  </body>\n  </html>";
    var inputPath = path__default['default'].join(folder, 'index.html');
    outputPath = path__default['default'].join(folder, outputPath);
    fs__default['default'].writeFileSync(inputPath, template);
    fs__default['default'].writeFileSync(outputPath, '');
    return { html: inputPath, css: outputPath };
}

var _a, _b;
var doc = "\nGenerate css from text files that containing tailwindcss classes.\nBy default, it will use interpretation mode to generate a single css file.\n\nUsage:\n  windicss [filenames]\n  windicss [filenames] -c -m\n  windicss [filenames] -c -s -m\n  windicss [filenames] [-c | -i] [-b | -s] [-m] [-p <prefix:string>] [-o <path:string>] [--args arguments]\n\nOptions:\n  -h, --help            Print this help message and exit.\n  -v, --version         Print windicss current version and exit.\n\n  -i, --interpret       Interpretation mode, generate class name corresponding to tailwindcss. This is the default behavior.\n  -c, --compile         Compilation mode, combine the class name in each row into a single class.\n  -t, --preflight       Add preflights, default is false.\n\n  -b, --combine         Combine all css into one single file. This is the default behavior.\n  -s, --separate        Generate a separate css file for each input file.\n\n  -m, --minify          Generate minimized css file.\n  -p, --prefix PREFIX   Set the css class name prefix, only valid in compilation mode. The default prefix is 'windi-'.\n  -o, --output PATH     Set output css file path.\n  -f, --config PATH     Set config file path.\n\n  --init PATH           Start a new project on the path.\n";
var args = arg_1({
    // Types
    '--help': Boolean,
    '--version': Boolean,
    '--compile': Boolean,
    '--interpret': Boolean,
    '--preflight': Boolean,
    '--combine': Boolean,
    '--separate': Boolean,
    '--minify': Boolean,
    '--init': String,
    '--prefix': String,
    '--output': String,
    '--config': String,
    // Aliases
    '-h': '--help',
    '-v': '--version',
    '-i': '--interpret',
    '-c': '--compile',
    '-t': '--preflight',
    '-b': '--combine',
    '-s': '--separate',
    '-m': '--minify',
    '-p': '--prefix',
    '-o': '--output',
    '-f': '--config',
});
if (args['--help'] || (args._.length === 0 && Object.keys(args).length === 1)) {
    Console.log(doc);
    process.exit();
}
if (args['--version']) {
    Console.log(getVersion());
    process.exit();
}
if (args['--init']) {
    var template = generateTemplate(args['--init'], args['--output']);
    args._.push(template.html);
    args['--preflight'] = true;
    args['--output'] = template.css;
}
var localFiles = walk('.', true).filter(function (i) { return i.type === 'file'; }).map(function (i) { return ({ type: i.type, path: i.path.replace(/\\/g, '/') }); });
var matchFiles = [];
var _loop_1 = function (pt) {
    if (isFile(pt) && pt.search(/\.windi\./) === -1) {
        matchFiles.push(pt);
    }
    else if (pt.search(/\*/) !== -1) {
        // match files like **/*.html **/src/*.html *.html ...
        localFiles.forEach(function (i) {
            var pattern = new FilePattern(pt);
            if (pattern.match(i.path) && i.path.search(/\.windi\./) === -1)
                matchFiles.push(i.path);
        });
    }
    else {
        Console.error("File " + pt + " does not exist!");
    }
};
for (var _i = 0, _c = args._; _i < _c.length; _i++) {
    var pt = _c[_i];
    _loop_1(pt);
}
var ignoredClasses = [];
var preflights = [];
var styleSheets = [];
var processor = new index_ts.Processor(args['--config'] ? require(path.resolve(args['--config'])) : undefined);
if (args['--compile']) {
    // compilation mode
    var prefix_1 = (_a = args['--prefix']) !== null && _a !== void 0 ? _a : 'windi-';
    matchFiles.forEach(function (file) {
        var indexStart = 0;
        var outputStyle = [];
        var outputHTML = [];
        var html = fs.readFileSync(file).toString();
        var parser = new index_ts$1.HTMLParser(html);
        // Match tailwind ClassName then replace with new ClassName
        parser.parseClasses().forEach(function (p) {
            outputHTML.push(html.substring(indexStart, p.start));
            var utility = processor.compile(p.result, prefix_1, true); // Set third argument to false to hide comments;
            outputStyle.push(utility.styleSheet);
            ignoredClasses = __spreadArray(__spreadArray([], ignoredClasses), utility.ignored);
            outputHTML.push(__spreadArray([utility.className], utility.ignored).join(' '));
            indexStart = p.end;
        });
        outputHTML.push(html.substring(indexStart));
        styleSheets.push(outputStyle.reduce(function (previousValue, currentValue) {
            return previousValue.extend(currentValue);
        }, new index_ts$2.StyleSheet()));
        var outputFile = file.replace(/(?=\.\w+$)/, '.windi');
        fs.writeFileSync(outputFile, outputHTML.join(''));
        Console.log(file + " -> " + outputFile);
        if (args['--preflight'])
            preflights.push(processor.preflight(parser.html));
    });
}
else {
    // interpretation mode
    matchFiles.forEach(function (file) {
        var parser = new index_ts$1.HTMLParser(fs.readFileSync(file).toString());
        var utility = processor.interpret(parser
            .parseClasses()
            .map(function (i) { return i.result; })
            .join(' '));
        styleSheets.push(utility.styleSheet);
        ignoredClasses = __spreadArray(__spreadArray([], ignoredClasses), utility.ignored);
        if (args['--preflight'])
            preflights.push(processor.preflight(parser.html));
    });
}
if (args['--separate']) {
    styleSheets.forEach(function (style, index) {
        var filePath = matchFiles[index].replace(/\.\w+$/, '.windi.css');
        if (args['--preflight'])
            style = preflights[index].extend(style);
        fs.writeFileSync(filePath, style.build(args['--minify']));
        Console.log(matchFiles[index] + " -> " + filePath);
    });
}
else {
    var outputStyle = styleSheets
        .reduce(function (previousValue, currentValue) {
        return previousValue.extend(currentValue);
    }, new index_ts$2.StyleSheet())
        .combine()
        .sort();
    if (args['--preflight'])
        outputStyle = preflights
            .reduce(function (previousValue, currentValue) {
            return previousValue.extend(currentValue);
        }, new index_ts$2.StyleSheet())
            .combine()
            .sort()
            .extend(outputStyle);
    var filePath = (_b = args['--output']) !== null && _b !== void 0 ? _b : 'windi.output.css';
    fs.writeFileSync(filePath, outputStyle.build(args['--minify']));
    Console.log('matched files:', matchFiles);
    Console.log('output file:', filePath);
}
Console.log('ignored classes:', ignoredClasses);
