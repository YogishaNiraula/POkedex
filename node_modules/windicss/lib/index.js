'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

function toArray(v) {
    if (Array.isArray(v))
        return v;
    return [v];
}
function hash(str) {
    str = str.replace(/\r/g, '');
    var hash = 5381;
    var i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return (hash >>> 0).toString(36);
}
function indent(code, tab) {
    if (tab === void 0) { tab = 2; }
    var spaces = Array(tab).fill(' ').join('');
    return code
        .split('\n')
        .map(function (line) { return spaces + line; })
        .join('\n');
}
function wrapit(code, start, end, tab, minify) {
    if (start === void 0) { start = '{'; }
    if (end === void 0) { end = '}'; }
    if (tab === void 0) { tab = 2; }
    if (minify === void 0) { minify = false; }
    if (minify)
        return "" + start + code + end;
    return start + "\n" + indent(code, tab) + "\n" + end;
}
function isNumber(amount, start, end, type) {
    if (start === void 0) { start = -Infinity; }
    if (end === void 0) { end = Infinity; }
    if (type === void 0) { type = 'int'; }
    var isInt = /^-?\d+$/.test(amount);
    if (type === 'int') {
        if (!isInt)
            return false;
    }
    else {
        var isFloat = /^-?\d+\.\d+$/.test(amount);
        if (!(isInt || isFloat))
            return false;
    }
    var num = parseFloat(amount);
    return num >= start && num <= end;
}
function isFraction(amount) {
    return /^\d+\/\d+$/.test(amount);
}
function isSize(amount) {
    return /^-?(\d+(\.\d+)?)+(rem|em|px|vh|vw|ch|ex)$/.test(amount);
}
function isSpace(str) {
    return /^\s*$/.test(str);
}
function roundUp(num, precision) {
    if (precision === void 0) { precision = 0; }
    precision = Math.pow(10, precision);
    return Math.round(num * precision) / precision;
}
function fracToPercent(amount) {
    var matches = amount.match(/[^/]+/g);
    if (!matches || matches.length < 2)
        return;
    var a = +matches[0];
    var b = +matches[1];
    return roundUp((a / b) * 100, 6) + '%';
}
function hex2RGB(hex) {
    var RGB_HEX = /^#?(?:([\da-f]{3})[\da-f]?|([\da-f]{6})(?:[\da-f]{2})?)$/i;
    var _a = String(hex).match(RGB_HEX) || [], short = _a[1], long = _a[2];
    if (long) {
        var value = Number.parseInt(long, 16);
        return [value >> 16, (value >> 8) & 0xff, value & 0xff];
    }
    else if (short) {
        return Array.from(short, function (s) { return Number.parseInt(s, 16); }).map(function (n) { return (n << 4) | n; });
    }
}
function camelToDash(str) {
    // Use exact the same regex as Post CSS
    return str.replace(/([A-Z])/g, '-$1').replace(/^ms-/, '-ms-').toLowerCase();
}
function dashToCamel(str) {
    if (!/-/.test(str))
        return str;
    return str.toLowerCase().replace(/-(.)/g, function (_, group) { return group.toUpperCase(); });
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getNestedValue(obj, key) {
    var topKey = key.match(/^\w+/);
    if (!topKey)
        return;
    var topValue = obj[topKey[0]];
    if (!topValue)
        return;
    var index = topKey[0].length;
    while (index < key.length) {
        var square = key.slice(index).match(/\[[^\s\]]+?\]/);
        var dot = key.slice(index).match(/\.\w+$|\.\w+(?=\.)/);
        if ((!square && !dot) || ((square === null || square === void 0 ? void 0 : square.index) === undefined && (dot === null || dot === void 0 ? void 0 : dot.index) === undefined))
            return topValue;
        if (typeof topValue !== 'object')
            return;
        if (dot && dot.index !== undefined && ((square === null || square === void 0 ? void 0 : square.index) === undefined || dot.index < square.index)) {
            var arg = dot[0].slice(1);
            topValue = topValue[arg];
            index += dot.index + dot[0].length;
        }
        else if (square && square.index !== undefined) {
            var arg = square[0].slice(1, -1).trim().replace(/^['"]+|['"]+$/g, '');
            topValue = topValue[arg];
            index += square.index + square[0].length;
        }
    }
    return topValue;
}
function negateValue(value) {
    if (/(^0\w)|(^-)|(^0$)/.test(value))
        return value;
    return '-' + value;
}
function searchFrom(text, target, startIndex, endIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    // search from partial of string
    var subText = text.substring(startIndex, endIndex);
    var relativeIndex = subText.search(target);
    return relativeIndex === -1 ? -1 : startIndex + relativeIndex;
}
function connectList(a, b, append) {
    if (append === void 0) { append = true; }
    return append ? __spreadArray(__spreadArray([], (a !== null && a !== void 0 ? a : [])), (b !== null && b !== void 0 ? b : [])) : __spreadArray(__spreadArray([], (b !== null && b !== void 0 ? b : [])), (a !== null && a !== void 0 ? a : []));
}
function toType(value, type) {
    switch (type) {
        case 'object':
            return value && typeof value === 'object' ? value : {};
        case 'string':
            if (typeof value === 'string')
                return value;
            break;
        case 'number':
            if (typeof value === 'number')
                return value;
            break;
    }
}
function deepCopy(source) {
    return Array.isArray(source)
        ? source.map(function (item) { return deepCopy(item); })
        : source instanceof Date
            ? new Date(source.getTime())
            : source && typeof source === 'object'
                ? Object.getOwnPropertyNames(source).reduce(function (o, prop) {
                    var descriptor = Object.getOwnPropertyDescriptor(source, prop);
                    if (descriptor) {
                        Object.defineProperty(o, prop, descriptor);
                        if (source && typeof source === 'object') {
                            o[prop] = deepCopy(source[prop]);
                        }
                    }
                    return o;
                }, Object.create(Object.getPrototypeOf(source)))
                : source;
}
function isTagName(name) {
    return ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embd', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'svg', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr'].includes(name);
}
function flatColors(colors, head) {
    var flatten = {};
    for (var _i = 0, _a = Object.entries(colors); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        if (typeof value === 'string' || Array.isArray(value)) {
            flatten[(head && key === 'DEFAULT') ? head : head ? head + "-" + key : key] = value;
        }
        else {
            flatten = __assign(__assign({}, flatten), flatColors(value, head ? head + "-" + key : key));
        }
    }
    return flatten;
}
function testRegexr(text, expressions) {
    for (var _i = 0, expressions_1 = expressions; _i < expressions_1.length; _i++) {
        var exp = expressions_1[_i];
        if (exp.test(text))
            return true;
    }
    return false;
}
function searchPropEnd(text, startIndex) {
    if (startIndex === void 0) { startIndex = 0; }
    var index = startIndex;
    var output = -1;
    var openSingleQuote = false;
    var openDoubleQuote = false;
    while (index < text.length) {
        switch (text.charAt(index)) {
            case '\'':
                if (text.charAt(index - 1) !== '\\')
                    openSingleQuote = !openSingleQuote;
                break;
            case '"':
                if (text.charAt(index - 1) !== '\\')
                    openDoubleQuote = !openDoubleQuote;
                break;
            case ';':
                if (openSingleQuote === false && openDoubleQuote === false)
                    output = index;
                break;
        }
        if (output !== -1)
            break;
        index++;
    }
    return output;
}
function searchNotEscape(text, char) {
    if (char === void 0) { char = '{'; }
    if (text.charAt(0) === char)
        return 0;
    var index = text.search(new RegExp(String.raw(templateObject_1 || (templateObject_1 = __makeTemplateObject(["([^\\]", ")"], ["([^\\\\]", ")"])), char)));
    if (index === -1)
        return -1;
    return index + 1;
}
function guessClassName(selector) {
    if (selector.indexOf(',') >= 0)
        return selector.split(/\s*,\s*/g).map(function (i) { return guessClassName(i); });
    // not classes, contains attribute selectors, nested selectors - treat as static
    if (selector.charAt(0) !== '.' || selector.indexOf('[') >= 0 || selector.trim().indexOf(' ') >= 0)
        return { selector: selector, isClass: false };
    var pos = searchNotEscape(selector, ':');
    if (pos === -1)
        return { selector: selector.slice(1).replace(/\\/g, ''), isClass: true };
    return { selector: selector.slice(1, pos).replace(/\\/g, ''), isClass: true, pseudo: selector.slice(pos) };
}
function increaseWithUnit(target, delta) {
    var _a;
    if (typeof target === 'number')
        return target + delta;
    var value = ((_a = target.match(/^-?[0-9]+\.?[0-9]*/)) === null || _a === void 0 ? void 0 : _a[0]) || '';
    var unit = target.slice(value.length);
    var result = (parseFloat(value) + delta);
    if (Number.isNaN(result))
        return target;
    return result + unit;
}
var templateObject_1;

var Property = /** @class */ (function () {
    function Property(name, value, comment, important) {
        if (important === void 0) { important = false; }
        this.meta = { type: 'utilities', group: 'plugin', order: 99999 };
        this.name = name;
        this.value = value;
        this.comment = comment;
        this.important = important;
    }
    Property._singleParse = function (css) {
        css = css.trim();
        if (!css)
            return;
        if (css.charAt(0) === '@')
            return InlineAtRule.parse(css);
        var split = css.search(':');
        var end = searchPropEnd(css);
        if (split === -1)
            return;
        var important = false;
        var prop = css.substring(split + 1, end === -1 ? undefined : end).trim();
        if (/!important;?$/.test(prop)) {
            important = true;
            prop = prop.replace(/!important/, '').trimRight();
        }
        return new Property(css.substring(0, split).trim(), prop, undefined, important);
    };
    Property.parse = function (css) {
        if (!/;\s*$/.test(css))
            css += ';'; // Fix for the situation where the last semicolon is omitted
        var properties = [];
        var index = 0;
        var end = searchPropEnd(css, index);
        while (end !== -1) {
            var parsed = this._singleParse(css.substring(searchFrom(css, /\S/, index), end + 1));
            if (parsed)
                properties.push(parsed);
            index = end + 1;
            end = searchPropEnd(css, index);
        }
        var count = properties.length;
        if (count > 1)
            return properties;
        if (count === 1)
            return properties[0];
    };
    Property.prototype.clone = function () {
        return deepCopy(this);
    };
    Property.prototype.toStyle = function (selector) {
        return new Style(selector, this, this.important).updateMeta(this.meta);
    };
    Property.prototype.build = function (minify) {
        var _this = this;
        if (minify === void 0) { minify = false; }
        var createProperty = function (name, value) {
            if (minify) {
                return name + ":" + value + (_this.important ? '!important' : '') + ";";
            }
            else {
                var p = name + ": " + value + (_this.important ? ' !important' : '') + ";";
                return _this.comment ? p + (" /* " + _this.comment + " */") : p;
            }
        };
        if (!this.value)
            return '';
        return typeof this.name === 'string'
            ? createProperty(this.name, this.value)
            : this.name
                .map(function (i) { return createProperty(i, _this.value); })
                .join(minify ? '' : '\n');
    };
    Property.prototype.updateMeta = function (meta) {
        this.meta = meta;
        return this;
    };
    return Property;
}());
var InlineAtRule = /** @class */ (function (_super) {
    __extends(InlineAtRule, _super);
    function InlineAtRule(name, value, important) {
        if (important === void 0) { important = false; }
        var _this = _super.call(this, name, value, undefined, important) || this;
        _this.name = name;
        return _this;
    }
    InlineAtRule.parse = function (css) {
        var _a;
        var matchName = css.match(/@[^\s;{}]+/);
        if (matchName) {
            var name_1 = matchName[0].substring(1);
            var important = false;
            var expression = matchName.index !== undefined
                ? (_a = css
                    .substring(matchName.index + name_1.length + 1)
                    .match(/(?:(['"]).*?\1|[^;])*/)) === null || _a === void 0 ? void 0 : _a[0].trim()
                : undefined;
            if (expression && /!important;?$/.test(expression)) {
                important = true;
                expression = expression.replace(/!important/, '').trimRight();
            }
            return new InlineAtRule(name_1, expression === '' ? undefined : expression, important);
        }
    };
    InlineAtRule.prototype.build = function () {
        return this.value
            ? "@" + this.name + " " + this.value + (this.important ? ' !important' : '') + ";"
            : "@" + this.name + (this.important ? ' !important' : '') + ";";
    };
    return InlineAtRule;
}(Property));
var Style = /** @class */ (function () {
    function Style(selector, property, important) {
        if (important === void 0) { important = false; }
        this.meta = { type: 'components', group: 'plugin', order: 99999 };
        this.selector = selector;
        this.important = important;
        this.property = toArray(property || []);
    }
    Object.defineProperty(Style.prototype, "rule", {
        get: function () {
            var _this = this;
            var _a, _b, _c;
            var selectors = ((_a = this.selector) !== null && _a !== void 0 ? _a : '').trim().split(/\s*,\s*/g);
            this._parentSelectors && (selectors = selectors.map(function (i) { var _a; return ((_a = _this._parentSelectors) === null || _a === void 0 ? void 0 : _a.join(' ')) + " " + i; }));
            ((_b = this._wrapSelectors) !== null && _b !== void 0 ? _b : []).forEach(function (func) { return (selectors = selectors.map(function (i) { return func(i); })); });
            this._pseudoClasses && (selectors = selectors.map(function (i) { var _a; return i + (":" + ((_a = _this._pseudoClasses) === null || _a === void 0 ? void 0 : _a.join(':'))); }));
            this._pseudoElements && (selectors = selectors.map(function (i) { var _a; return i + ("::" + ((_a = _this._pseudoElements) === null || _a === void 0 ? void 0 : _a.join('::'))); }));
            this._brotherSelectors && (selectors = selectors.map(function (i) { var _a; return i + ("." + ((_a = _this._brotherSelectors) === null || _a === void 0 ? void 0 : _a.join('.'))); }));
            this._childSelectors && (selectors = selectors.map(function (i) { var _a; return i + (" " + ((_a = _this._childSelectors) === null || _a === void 0 ? void 0 : _a.join(' '))); }));
            ((_c = this._wrapRules) !== null && _c !== void 0 ? _c : []).forEach(function (func) { return (selectors = selectors.map(function (i) { return func(i); })); });
            return selectors.join(', ');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "pseudoClasses", {
        get: function () {
            return this._pseudoClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "pseudoElements", {
        get: function () {
            return this._pseudoElements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "parentSelectors", {
        get: function () {
            return this._parentSelectors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "childSelectors", {
        get: function () {
            return this._childSelectors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "brotherSelectors", {
        get: function () {
            return this._brotherSelectors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "wrapProperties", {
        get: function () {
            return this._wrapProperties;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "wrapSelectors", {
        get: function () {
            return this._wrapSelectors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "wrapRules", {
        get: function () {
            return this._wrapRules;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "simple", {
        get: function () {
            // is this style only has property and no wrap?
            return !(this.atRules || this._pseudoClasses || this._pseudoElements || this._parentSelectors || this._childSelectors || this._brotherSelectors || this._wrapProperties || this._wrapSelectors || this._wrapRules);
        },
        enumerable: false,
        configurable: true
    });
    Style.generate = function (parent, property, root) {
        if (!root)
            root = (parent === null || parent === void 0 ? void 0 : parent.startsWith('@'))
                ? new Style().atRule(parent)
                : new Style(parent);
        var output = [];
        var _loop_1 = function (key, value) {
            if (typeof value === 'string') {
                root.add(new Property(camelToDash(key), value));
            }
            else if (Array.isArray(value)) {
                value.map(function (i) { return root === null || root === void 0 ? void 0 : root.add(new Property(camelToDash(key), i)); });
            }
            else {
                var wrap = deepCopy(root);
                wrap.property = [];
                var child = void 0;
                if (key.startsWith('@')) {
                    child = wrap.atRule(key, false);
                }
                else {
                    if (wrap.selector === undefined) {
                        wrap.selector = key;
                        child = wrap;
                    }
                    else {
                        if (/^[a-z]+$/.test(key) && !isTagName(key)) {
                            wrap.wrapProperty(function (property) { return key + "-" + property; });
                            child = wrap;
                        }
                        else {
                            var _hKey_1 = function (selector, key) { return (/&/.test(key) ? key : "& " + key).replace('&', selector); };
                            wrap.wrapSelector(function (selector) {
                                return selector
                                    .trim()
                                    .split(/\s*,\s*/g)
                                    .map(function (s) {
                                    return key
                                        .split(/\s*,\s*/g)
                                        .map(function (i) { return _hKey_1(s, i); })
                                        .join(', ');
                                })
                                    .join(', ');
                            });
                            child = wrap;
                        }
                    }
                }
                output = output.concat(Style.generate(key.startsWith('@') ? undefined : key, value, child));
            }
        };
        for (var _i = 0, _a = Object.entries(property !== null && property !== void 0 ? property : {}); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        if (root.property.length > 0)
            output.unshift(root);
        return output;
    };
    Style.prototype.atRule = function (atrule, append) {
        if (append === void 0) { append = true; }
        if (!atrule)
            return this;
        if (this.atRules) {
            append ? this.atRules.push(atrule) : this.atRules.unshift(atrule);
        }
        else {
            this.atRules = [atrule];
        }
        return this;
    };
    Style.prototype.pseudoClass = function (string) {
        if (this._pseudoClasses) {
            this._pseudoClasses.push(string);
        }
        else {
            this._pseudoClasses = [string];
        }
        return this;
    };
    Style.prototype.pseudoElement = function (string) {
        if (this._pseudoElements) {
            this._pseudoElements.push(string);
        }
        else {
            this._pseudoElements = [string];
        }
        return this;
    };
    Style.prototype.brother = function (string) {
        if (this._brotherSelectors) {
            this._brotherSelectors.push(string);
        }
        else {
            this._brotherSelectors = [string];
        }
        return this;
    };
    Style.prototype.parent = function (string) {
        if (this._parentSelectors) {
            this._parentSelectors.push(string);
        }
        else {
            this._parentSelectors = [string];
        }
        return this;
    };
    Style.prototype.child = function (string) {
        if (this._childSelectors) {
            this._childSelectors.push(string);
        }
        else {
            this._childSelectors = [string];
        }
        return this;
    };
    Style.prototype.wrapProperty = function (func) {
        if (this._wrapProperties) {
            this._wrapProperties.push(func);
        }
        else {
            this._wrapProperties = [func];
        }
        return this;
    };
    Style.prototype.wrapSelector = function (func) {
        if (this._wrapSelectors) {
            this._wrapSelectors.push(func);
        }
        else {
            this._wrapSelectors = [func];
        }
        return this;
    };
    Style.prototype.wrapRule = function (func) {
        if (this._wrapRules) {
            this._wrapRules.push(func);
        }
        else {
            this._wrapRules = [func];
        }
        return this;
    };
    Style.prototype.add = function (item) {
        item = toArray(item);
        if (this.important)
            item.forEach(function (i) { return (i.important = true); });
        this.property = __spreadArray(__spreadArray([], this.property), item);
        return this;
    };
    Style.prototype.extend = function (item, onlyProperty, append) {
        if (onlyProperty === void 0) { onlyProperty = false; }
        if (append === void 0) { append = true; }
        if (!item)
            return this;
        if (item.wrapProperties) {
            var props_1 = [];
            item.property.forEach(function (p) {
                var _a;
                var pc = new Property(p.name, p.value, p.comment);
                (_a = item.wrapProperties) === null || _a === void 0 ? void 0 : _a.forEach(function (wrap) {
                    pc.name = Array.isArray(pc.name)
                        ? pc.name.map(function (i) { return wrap(i); })
                        : wrap(pc.name);
                });
                if (item.important)
                    pc.important = true;
                props_1.push(pc);
            });
            this.property = connectList(this.property, props_1, append);
        }
        else {
            if (item.important)
                item.property.forEach(function (i) { return (i.important = true); });
            this.property = connectList(this.property, item.property, append);
        }
        if (onlyProperty)
            return this;
        item.selector && (this.selector = item.selector);
        this.meta = item.meta;
        item.atRules &&
            (this.atRules = connectList(item.atRules, this.atRules, append)); // atrule is build in reverse
        item._brotherSelectors &&
            (this._brotherSelectors = connectList(this._brotherSelectors, item._brotherSelectors, append));
        item._childSelectors &&
            (this._childSelectors = connectList(this._childSelectors, item._childSelectors, append));
        item._parentSelectors &&
            (this._parentSelectors = connectList(this._parentSelectors, item._parentSelectors, append));
        item._pseudoClasses &&
            (this._pseudoClasses = connectList(this._pseudoClasses, item._pseudoClasses, append));
        item._pseudoElements &&
            (this._pseudoElements = connectList(this._pseudoElements, item._pseudoElements, append));
        item._wrapRules &&
            (this._wrapRules = connectList(this._wrapRules, item._wrapRules, append));
        item._wrapSelectors &&
            (this._wrapSelectors = connectList(this._wrapSelectors, item._wrapSelectors, append));
        return this;
    };
    Style.prototype.clean = function () {
        // remove duplicated property
        var property = [];
        var cache = [];
        this.property.forEach(function (i) {
            var inline = i.build();
            if (!cache.includes(inline)) {
                cache.push(inline);
                property.push(i);
            }
        });
        this.property = property;
        return this;
    };
    Style.prototype.flat = function () {
        var properties = [];
        this.property.forEach(function (p) {
            if (Array.isArray(p.name)) {
                p.name.forEach(function (i) {
                    properties.push(new Property(i, p.value, p.comment));
                });
            }
            else {
                properties.push(p);
            }
        });
        this.property = properties;
        return this;
    };
    Style.prototype.clone = function (selector, property) {
        var newStyle = deepCopy(this);
        if (selector)
            newStyle.selector = selector;
        if (property)
            newStyle.property = Array.isArray(property) ? property : [property];
        return newStyle;
    };
    Style.prototype.sort = function () {
        // sort property
        this.property = this.property.sort(function (a, b) {
            return ("" + a.name).substring(0, 2) > ("" + b.name).substring(0, 2) ? 1 : -1;
        });
        return this;
    };
    Style.prototype.build = function (minify, prefixer) {
        var _this = this;
        if (minify === void 0) { minify = false; }
        if (prefixer === void 0) { prefixer = true; }
        var properties = this.property;
        if (!prefixer)
            properties = properties.filter(function (p) {
                if (p.value && /-(webkit|ms|moz|o)-/.test(p.value))
                    return false;
                if (Array.isArray(p.name)) {
                    p.name = p.name.filter(function (i) { return !/^-(webkit|ms|moz|o)-/.test(i); });
                    return true;
                }
                return !/^-(webkit|ms|moz|o)-/.test(p.name);
            });
        var result = properties.map(function (p) {
            if (_this._wrapProperties) {
                var name_2 = p.name;
                _this._wrapProperties.forEach(function (w) { return (name_2 = Array.isArray(name_2) ? name_2.map(function (n) { return w(n); }) : w(name_2)); });
                return new Property(name_2, p.value, p.comment, _this.important ? true : p.important).build(minify);
            }
            return _this.important ? new Property(p.name, p.value, p.comment, true).build(minify) : p.build(minify);
        }).join(minify ? '' : '\n');
        if (!this.selector && !this.atRules)
            return result.replace(/;}/g, '}');
        if (this.selector)
            result = (minify ? this.rule.replace(/,\s/g, ',') : this.rule + ' ') + wrapit(result, undefined, undefined, undefined, result !== '' ? minify : true);
        if (this.atRules) {
            for (var _i = 0, _a = this.atRules; _i < _a.length; _i++) {
                var rule = _a[_i];
                result = minify ? "" + rule.replace(/\s/g, '') + wrapit(result, undefined, undefined, undefined, minify) : rule + " " + wrapit(result, undefined, undefined, undefined, result !== '' ? minify : true);
            }
        }
        return minify ? result.replace(/;}/g, '}') : result;
    };
    Style.prototype.updateMeta = function (meta) {
        this.meta = meta;
        return this;
    };
    return Style;
}());
/** @class */ ((function (_super) {
    __extends(GlobalStyle, _super);
    function GlobalStyle(selector, property, important) {
        return _super.call(this, selector, property, important) || this;
    }
    return GlobalStyle;
})(Style));
var Keyframes = /** @class */ (function (_super) {
    __extends(Keyframes, _super);
    function Keyframes(selector, property, important) {
        return _super.call(this, selector, property, important) || this;
    }
    // root param only for consist with style
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Keyframes.generate = function (name, children, root, prefixer) {
        if (prefixer === void 0) { prefixer = true; }
        var output = [];
        for (var _i = 0, _a = Object.entries(children); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            var style = new Keyframes(key).atRule("@keyframes " + name);
            var webkitStyle = new Keyframes(key).atRule("@-webkit-keyframes " + name);
            for (var _c = 0, _d = Object.entries(value); _c < _d.length; _c++) {
                var _e = _d[_c], pkey = _e[0], pvalue = _e[1];
                var prop = pkey;
                if (pkey === 'transform') {
                    prop = prefixer ? ['-webkit-transform', 'transform'] : 'transform';
                }
                else if (['animationTimingFunction', 'animation-timing-function'].includes(pkey)) {
                    prop = prefixer ? [
                        '-webkit-animation-timing-function',
                        'animation-timing-function',
                    ] : 'animation-timing-function';
                }
                style.add(new Property(prop, pvalue));
                webkitStyle.add(new Property(prop, pvalue));
            }
            output.push(style);
            if (prefixer)
                output.push(webkitStyle);
        }
        return output;
    };
    return Keyframes;
}(Style));
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container(selector, property, important) {
        return _super.call(this, selector, property, important) || this;
    }
    return Container;
}(Style));

var variantOrder;
(function (variantOrder) {
    variantOrder[variantOrder["first"] = 0] = "first";
    variantOrder[variantOrder["last"] = 1] = "last";
    variantOrder[variantOrder["odd"] = 2] = "odd";
    variantOrder[variantOrder["even"] = 3] = "even";
    variantOrder[variantOrder["visited"] = 4] = "visited";
    variantOrder[variantOrder["checked"] = 5] = "checked";
    variantOrder[variantOrder["group-hover"] = 6] = "group-hover";
    variantOrder[variantOrder["group-focus"] = 7] = "group-focus";
    variantOrder[variantOrder["focus-within"] = 8] = "focus-within";
    variantOrder[variantOrder["hover"] = 9] = "hover";
    variantOrder[variantOrder["focus"] = 10] = "focus";
    variantOrder[variantOrder["focus-visible"] = 11] = "focus-visible";
    variantOrder[variantOrder["active"] = 12] = "active";
    variantOrder[variantOrder["disabled"] = 13] = "disabled";
})(variantOrder || (variantOrder = {}));
var layerOrder = {
    'base': 10,
    'components': 150,
    'shortcuts': 160,
    'utilities': 50000,
};
var pluginOrder = {
    'container': 100,
    'space': 200,
    'divideWidth': 300,
    'divideColor': 400,
    'divideStyle': 500,
    'divideOpacity': 600,
    'accessibility': 700,
    'appearance': 800,
    'backgroundAttachment': 900,
    'backgroundClip': 1000,
    'backgroundColor': 1100,
    'backgroundImage': 1200,
    'gradientColorStops': 1300,
    'backgroundOpacity': 1400,
    'backgroundPosition': 1500,
    'backgroundRepeat': 1600,
    'backgroundSize': 1700,
    'borderCollapse': 1800,
    'borderColor': 1900,
    'borderOpacity': 2000,
    'borderRadius': 2100,
    'borderStyle': 2200,
    'borderWidth': 2300,
    'boxSizing': 2400,
    'cursor': 2500,
    'display': 2600,
    'flexDirection': 2700,
    'flexWrap': 2800,
    'placeItems': 2900,
    'placeContent': 3000,
    'placeSelf': 3100,
    'alignItems': 3200,
    'alignContent': 3300,
    'alignSelf': 3400,
    'justifyItems': 3500,
    'justifyContent': 3600,
    'justifySelf': 3700,
    'flex': 3800,
    'flexGrow': 3900,
    'flexShrink': 4000,
    'order': 4100,
    'float': 4200,
    'clear': 4300,
    'fontFamily': 4400,
    'fontWeight': 4500,
    'height': 4600,
    'fontSize': 4700,
    'lineHeight': 4800,
    'listStylePosition': 4900,
    'listStyleType': 5000,
    'margin': 5100,
    'maxHeight': 5200,
    'maxWidth': 5300,
    'minHeight': 5400,
    'minWidth': 5500,
    'objectFit': 5600,
    'objectPosition': 5700,
    'opacity': 5800,
    'outline': 5900,
    'overflow': 6000,
    'overscrollBehavior': 6100,
    'padding': 6200,
    'placeholderColor': 6300,
    'placeholderOpacity': 6400,
    'pointerEvents': 6500,
    'position': 6600,
    'inset': 6700,
    'resize': 6800,
    'boxShadow': 6900,
    'ringWidth': 7000,
    'ringOffsetColor': 7100,
    'ringOffsetWidth': 7200,
    'ringColor': 7300,
    'ringOpacity': 7400,
    'fill': 7500,
    'stroke': 7600,
    'strokeWidth': 7700,
    'tableLayout': 7800,
    'textAlign': 7900,
    'textColor': 8000,
    'textOpacity': 8100,
    'textOverflow': 8200,
    'fontStyle': 8300,
    'textTransform': 8400,
    'textDecoration': 8500,
    'fontSmoothing': 8600,
    'fontVariantNumeric': 8700,
    'letterSpacing': 8800,
    'userSelect': 8900,
    'verticalAlign': 9000,
    'visibility': 9100,
    'whitespace': 9200,
    'wordBreak': 9300,
    'width': 9400,
    'zIndex': 9500,
    'gap': 9600,
    'gridAutoFlow': 9700,
    'gridTemplateColumns': 9800,
    'gridAutoColumns': 9900,
    'gridColumn': 10000,
    'gridColumnStart': 10100,
    'gridColumnEnd': 10200,
    'gridTemplateRows': 10300,
    'gridAutoRows': 10400,
    'gridRow': 10500,
    'gridRowStart': 10600,
    'gridRowEnd': 10700,
    'transform': 10800,
    'transformOrigin': 10900,
    'scale': 11000,
    'rotate': 11100,
    'translate': 11200,
    'skew': 11300,
    'transitionProperty': 11400,
    'transitionTimingFunction': 11500,
    'transitionDuration': 11600,
    'transitionDelay': 11700,
    'keyframes': 11800,
    'animation': 11900,
};
var keyOrder = {
    container: 201,
    space: 202,
    divide: 203,
    bg: 204,
    from: 205,
    via: 206,
    to: 207,
    border: 208,
    rounded: 209,
    cursor: 210,
    flex: 211,
    order: 212,
    font: 213,
    h: 214,
    list: 215,
    m: 216,
    my: 217,
    mx: 218,
    mt: 219,
    mr: 220,
    mb: 221,
    ml: 222,
    min: 223,
    max: 224,
    object: 225,
    opacity: 226,
    outline: 227,
    p: 228,
    py: 229,
    px: 230,
    pt: 231,
    pr: 232,
    pb: 233,
    pl: 234,
    placeholder: 235,
    inset: 236,
    top: 237,
    right: 238,
    bottom: 239,
    left: 240,
    shadow: 241,
    ring: 242,
    fill: 243,
    stroke: 244,
    text: 245,
    leading: 246,
    tracking: 247,
    w: 248,
    z: 249,
    gap: 250,
    auto: 251,
    grid: 252,
    col: 253,
    row: 254,
    transform: 255,
    origin: 256,
    scale: 257,
    rotate: 258,
    translate: 259,
    skew: 260,
    transition: 261,
    ease: 262,
    duration: 263,
    delay: 264,
    animate: 265,
};

function getWeights(a) {
    var first = a.charAt(0);
    var second = a.charAt(1);
    if (first === ':' && second === ':')
        return 59; // ::moz ...
    if (first === '#')
        return 500; // #id ...
    if (first !== '.')
        return first.charCodeAt(0); // html, body ...
    var matches = a.match(/\w+/);
    var key = matches ? matches[0] : undefined;
    if (key && keyOrder[key])
        return keyOrder[key];
    return 499;
}
function sortMeta(a, b) {
    return a.meta.order - b.meta.order;
}
function sortSelector(a, b) {
    if (a.selector && b.selector) {
        return getWeights(a.selector) - getWeights(b.selector);
    }
    return 0;
}

var minMaxWidth = /(!?\(\s*min(-device-)?-width).+\(\s*max(-device)?-width/i;
var minWidth = /\(\s*min(-device)?-width/i;
var maxMinWidth = /(!?\(\s*max(-device)?-width).+\(\s*min(-device)?-width/i;
var maxWidth = /\(\s*max(-device)?-width/i;
var isMinWidth = _testQuery(minMaxWidth, maxMinWidth, minWidth);
var isMaxWidth = _testQuery(maxMinWidth, minMaxWidth, maxWidth);
var minMaxHeight = /(!?\(\s*min(-device)?-height).+\(\s*max(-device)?-height/i;
var minHeight = /\(\s*min(-device)?-height/i;
var maxMinHeight = /(!?\(\s*max(-device)?-height).+\(\s*min(-device)?-height/i;
var maxHeight = /\(\s*max(-device)?-height/i;
var isMinHeight = _testQuery(minMaxHeight, maxMinHeight, minHeight);
var isMaxHeight = _testQuery(maxMinHeight, minMaxHeight, maxHeight);
var isPrint = /print/i;
var isPrintOnly = /^print\$/i;
var isAtRule = /^\s*@/i;
var isMedia = /^\s*@media/i;
var maxValue = Number.MAX_VALUE;
function _getQueryLength(length) {
    var result = /(-?\d*\.?\d+)(ch|em|ex|px|rem)/.exec(length);
    if (result === null) {
        return maxValue;
    }
    var number = result[1];
    var unit = result[2];
    switch (unit) {
        case 'ch':
            return parseFloat(number) * 8.8984375;
        case 'em':
        case 'rem':
            return parseFloat(number) * 16;
        case 'ex':
            return parseFloat(number) * 8.296875;
        case 'px':
            return parseFloat(number);
    }
    return +number;
}
function _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {
    return function (query) {
        if (doubleTestTrue.test(query)) {
            return true;
        }
        else if (doubleTestFalse.test(query)) {
            return false;
        }
        return singleTest.test(query);
    };
}
function _testAtRule(a, b) {
    var isMediaA = isMedia.test(a);
    var isMediaB = isMedia.test(b);
    if (isMediaA && isMediaB)
        return null;
    var isAtRuleA = isAtRule.test(a);
    var isAtRuleB = isAtRule.test(b);
    if (isAtRuleA)
        return 1;
    if (isAtRuleB)
        return -1;
    return 0; // don't sort selector name, may cause overwrite bug.
}
function _testIsPrint(a, b) {
    var isPrintA = isPrint.test(a);
    var isPrintOnlyA = isPrintOnly.test(a);
    var isPrintB = isPrint.test(b);
    var isPrintOnlyB = isPrintOnly.test(b);
    if (isPrintA && isPrintB) {
        if (!isPrintOnlyA && isPrintOnlyB) {
            return 1;
        }
        if (isPrintOnlyA && !isPrintOnlyB) {
            return -1;
        }
        return a.localeCompare(b);
    }
    if (isPrintA) {
        return 1;
    }
    if (isPrintB) {
        return -1;
    }
    return null;
}
function sortMediaQuery(a, b) {
    var testAtRule = _testAtRule(a, b);
    if (testAtRule !== null)
        return testAtRule;
    var testIsPrint = _testIsPrint(a, b);
    if (testIsPrint !== null)
        return testIsPrint;
    var minA = isMinWidth(a) || isMinHeight(a);
    var maxA = isMaxWidth(a) || isMaxHeight(a);
    var minB = isMinWidth(b) || isMinHeight(b);
    var maxB = isMaxWidth(b) || isMaxHeight(b);
    if (minA && maxB) {
        return -1;
    }
    if (maxA && minB) {
        return 1;
    }
    var lengthA = _getQueryLength(a);
    var lengthB = _getQueryLength(b);
    if (lengthA === maxValue && lengthB === maxValue) {
        return a.localeCompare(b);
    }
    else if (lengthA === maxValue) {
        return 1;
    }
    else if (lengthB === maxValue) {
        return -1;
    }
    if (lengthA > lengthB) {
        if (maxA) {
            return -1;
        }
        return 1;
    }
    if (lengthA < lengthB) {
        if (maxA) {
            return 1;
        }
        return -1;
    }
    return a.localeCompare(b);
}

function combineObject(a, b) {
    var output = __assign({}, a);
    for (var _i = 0, _a = Object.entries(b); _i < _a.length; _i++) {
        var _b = _a[_i], key_of_b = _b[0], value_of_b = _b[1];
        if (key_of_b in a) {
            var value_of_a = a[key_of_b];
            if (value_of_a !== value_of_b) {
                if (value_of_b !== null &&
                    value_of_b.constructor !== Object) {
                    output[key_of_b] = [value_of_a, value_of_b];
                }
                else if (value_of_a !== null &&
                    value_of_a.constructor === Object) {
                    output[key_of_b] = combineObject(value_of_a, value_of_b);
                }
                else {
                    output[key_of_b] = [
                        value_of_a,
                        combineObject(value_of_a, value_of_b),
                    ];
                }
            }
        }
        else {
            output[key_of_b] = value_of_b;
        }
    }
    return output;
}
function deepList(list, value) {
    var key = list.pop();
    var current = value ? value : {};
    if (!key)
        return current;
    var dict = {};
    dict[key] = current;
    return deepList(list, dict);
}
function handleNest(item) {
    var output = [];
    if (Array.isArray(item)) {
        item.forEach(function (i) {
            output = __spreadArray(__spreadArray([], output), handleNest(i));
        });
    }
    else {
        if (item.build)
            output.push(item.build());
    }
    return output;
}
function buildMap(obj, minify, prefixer) {
    if (minify === void 0) { minify = false; }
    if (prefixer === void 0) { prefixer = true; }
    var output = [];
    if (Array.isArray(obj)) {
        obj.forEach(function (item) {
            if (item.constructor === Object) {
                output.push(buildMap(item));
            }
            else if (Array.isArray(item)) {
                output = __spreadArray(__spreadArray([], output), handleNest(item));
            }
            else {
                if (item.build)
                    output.push(item.build(minify));
            }
        });
    }
    else if (obj && typeof obj === 'object') {
        var _loop_1 = function (key, value) {
            var _gstyle = function (v) {
                return (minify ? key.replace(/\n/g, '') : key + ' ') +
                    wrapit(v, undefined, undefined, undefined, minify);
            };
            if (value instanceof Style) {
                output.push(_gstyle(value.build(minify, prefixer)));
            }
            else if (value && typeof value === 'object') {
                output.push(_gstyle(buildMap(value, minify, prefixer)));
            }
        };
        for (var _i = 0, _a = Object.entries(obj); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
    }
    return output.join(minify ? '' : '\n');
}
function combineSelector(styleList) {
    var styleMap = {};
    var passed = [];
    styleList.forEach(function (style) {
        var rule = style.rule;
        if (rule) {
            var hashValue = hash(rule);
            if (hashValue in styleMap) {
                styleMap[hashValue] = styleMap[hashValue].extend(style, true);
            }
            else {
                styleMap[hashValue] = style;
            }
        }
        else {
            passed.push(style);
        }
    });
    return __spreadArray(__spreadArray([], passed), Object.values(styleMap).map(function (style) { return style.clean(); }));
}
function buildAtRule(styleList, minify, prefixer, reverse) {
    if (minify === void 0) { minify = false; }
    if (prefixer === void 0) { prefixer = true; }
    if (reverse === void 0) { reverse = false; }
    var ruleMap = styleList
        .map(function (i) {
        var _a, _b;
        var list = __spreadArray(__spreadArray([], reverse ? ((_a = i.atRules) !== null && _a !== void 0 ? _a : []).sort(sortMediaQuery) : ((_b = i.atRules) !== null && _b !== void 0 ? _b : []).sort(sortMediaQuery).reverse()), [
            i.rule,
        ]);
        var style = new Style(undefined, i.property, i.important).updateMeta(i.meta);
        i.wrapProperties && i.wrapProperties.forEach(function (wrap) { return style.wrapProperty(wrap); });
        return deepList(list, style);
    })
        .sort(function (a, b) {
        var akey = Object.keys(a)[0];
        var bkey = Object.keys(b)[0];
        return sortMediaQuery(akey, bkey);
    });
    return buildMap(ruleMap.reduce(function (previousValue, currentValue) { return combineObject(previousValue, currentValue); }, {}), minify, prefixer);
}
function compileStyleSheet(styleList, minify, prefixer) {
    if (minify === void 0) { minify = false; }
    if (prefixer === void 0) { prefixer = true; }
    var head = combineSelector(styleList.filter(function (i) { return !(i.selector && i.atRules) && !(i instanceof Container); }).sort(sortMeta)).map(function (i) { return i.build(minify, prefixer); }).join(minify ? '' : '\n');
    var containers = {};
    styleList.filter(function (i) { return i instanceof Container; }).forEach(function (i) {
        if (i.selector && i.selector in containers) {
            containers[i.selector].push(i);
        }
        else if (i.selector) {
            containers[i.selector] = [i];
        }
    });
    var topStyles = Object.values(containers).map(function (i) { return buildAtRule(i, minify, prefixer, true); });
    var keyframes = buildAtRule(styleList.filter(function (i) { return i instanceof Keyframes; }), minify, prefixer);
    if (keyframes)
        topStyles.unshift(keyframes);
    var top = topStyles.join(minify ? '' : '\n');
    var body = buildAtRule(styleList.filter(function (i) { return i.selector && i.atRules && !(i instanceof Keyframes || i instanceof Container); }).sort(sortMeta), minify, prefixer);
    return minify
        ? (top + head + body).replace(/;\}/g, '}')
        : [top, head, body].filter(function (i) { return !isSpace(i); }).join('\n');
}

var StyleSheet = /** @class */ (function () {
    function StyleSheet(children) {
        this.prefixer = true;
        this.children = children || [];
    }
    StyleSheet.prototype.add = function (item) {
        if (!item)
            return this;
        if (Array.isArray(item)) {
            this.children = __spreadArray(__spreadArray([], this.children), item);
        }
        else {
            this.children.push(item);
        }
        return this;
    };
    StyleSheet.prototype.extend = function (styleSheet, append, dedup) {
        if (append === void 0) { append = true; }
        if (dedup === void 0) { dedup = false; }
        if (styleSheet) {
            var extended = styleSheet.children;
            if (dedup) {
                var hashes_1 = extended.map(function (i) { return hash(i.build()); });
                extended = extended.filter(function (i) { return !hashes_1.includes(hash(i.build())); });
            }
            this.prefixer = styleSheet.prefixer;
            this.children = append ? __spreadArray(__spreadArray([], this.children), extended) : __spreadArray(__spreadArray([], extended), this.children);
        }
        return this;
    };
    StyleSheet.prototype.combine = function () {
        var styleMap = {};
        this.children.forEach(function (style, index) {
            var _a;
            var hashValue = hash(style.atRules + style.rule);
            if (hashValue in styleMap) {
                if ((_a = style.atRules) === null || _a === void 0 ? void 0 : _a.includes('@font-face')) {
                    // keeps multiple @font-face
                    styleMap[hashValue + index] = style;
                }
                else {
                    styleMap[hashValue] = styleMap[hashValue].extend(style, true);
                }
            }
            else {
                styleMap[hashValue] = style;
            }
        });
        this.children = Object.values(styleMap).map(function (i) { return i.clean(); }); //.sort());
        return this;
    };
    StyleSheet.prototype.layer = function (type) {
        var styleSheet = new StyleSheet(this.children.filter(function (i) { return i.meta.type === type; }));
        styleSheet.prefixer = this.prefixer;
        return styleSheet;
    };
    StyleSheet.prototype.split = function () {
        return {
            base: this.layer('base'),
            components: this.layer('components'),
            utilities: this.layer('utilities'),
        };
    };
    StyleSheet.prototype.clone = function () {
        return deepCopy(this);
    };
    StyleSheet.prototype.sort = function (meta) {
        if (meta === void 0) { meta = false; }
        this.children = meta ? this.children.sort(function (a, b) {
            return a.meta.order - b.meta.order;
        }) : this.children.sort(sortSelector);
        return this;
    };
    StyleSheet.prototype.build = function (minify) {
        if (minify === void 0) { minify = false; }
        return compileStyleSheet(this.children, minify, this.prefixer);
    };
    return StyleSheet;
}());

function linearGradient(value) {
    // Stupid method, will be changed in the next version...
    var map = {
        'linear-gradient(to top, var(--tw-gradient-stops))': [
            '-o-linear-gradient(bottom, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, left bottom, left top, from(var(--tw-gradient-stops)))',
            'linear-gradient(to top, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to top right, var(--tw-gradient-stops))': [
            '-o-linear-gradient(bottom left, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, left bottom, right top, from(var(--tw-gradient-stops)))',
            'linear-gradient(to top right, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to right, var(--tw-gradient-stops))': [
            '-o-linear-gradient(left, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, left top, right top, from(var(--tw-gradient-stops)))',
            'linear-gradient(to right, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to bottom right, var(--tw-gradient-stops))': [
            '-o-linear-gradient(top left, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, left top, right bottom, from(var(--tw-gradient-stops)))',
            'linear-gradient(to bottom right, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to bottom, var(--tw-gradient-stops))': [
            '-o-linear-gradient(top, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, left top, left bottom, from(var(--tw-gradient-stops)))',
            'linear-gradient(to bottom, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to bottom left, var(--tw-gradient-stops))': [
            '-o-linear-gradient(top right, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, right top, left bottom, from(var(--tw-gradient-stops)))',
            'linear-gradient(to bottom left, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to left, var(--tw-gradient-stops))': [
            '-o-linear-gradient(right, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, right top, left top, from(var(--tw-gradient-stops)))',
            'linear-gradient(to left, var(--tw-gradient-stops))',
        ],
        'linear-gradient(to top left, var(--tw-gradient-stops))': [
            '-o-linear-gradient(bottom right, var(--tw-gradient-stops))',
            '-webkit-gradient(linear, right bottom, left top, from(var(--tw-gradient-stops)))',
            'linear-gradient(to top left, var(--tw-gradient-stops))',
        ],
    };
    if (Object.keys(map).includes(value))
        return map[value];
    return value;
}
function minMaxContent(value) {
    if (value === 'min-content') {
        return ['-webkit-min-content', 'min-content'];
    }
    else if (value === 'max-content') {
        return ['-webkit-max-content', 'max-content'];
    }
    return value;
}

function isString(value) {
    return typeof value === 'string';
}
function negative(scale) {
    return Object.keys(scale)
        .filter(function (key) { return scale[key] !== '0'; })
        .reduce(function (negativeScale, key) {
        var _a;
        return (__assign(__assign({}, negativeScale), (_a = {}, _a["-" + key] = negateValue(scale[key]), _a)));
    }, {});
}
function breakpoints(screens) {
    if (screens === void 0) { screens = {}; }
    return Object.keys(screens)
        .filter(function (key) { return typeof screens[key] === 'string'; })
        .reduce(function (breakpoints, key) {
        var _a;
        return (__assign(__assign({}, breakpoints), (_a = {}, _a["screen-" + key] = screens[key], _a)));
    }, {});
}
function generateFontSize(font) {
    if (typeof font === 'string')
        return [new Property('font-size', font)];
    var properties = [];
    if (font[0])
        properties.push(new Property('font-size', font[0]));
    if (typeof font[1] === 'string') {
        properties.push(new Property('line-height', font[1]));
    }
    else if (font[1]) {
        if (font[1].lineHeight)
            properties.push(new Property('line-height', font[1].lineHeight));
        if (font[1].letterSpacing)
            properties.push(new Property('letter-spacing', font[1].letterSpacing));
    }
    return properties;
}
function expandDirection(value, divide) {
    if (divide === void 0) { divide = false; }
    var map = {
        '': ['*'],
        y: ['top', 'bottom'],
        x: ['left', 'right'],
        t: divide ? ['top-left', 'top-right'] : ['top'],
        r: divide ? ['top-right', 'bottom-right'] : ['right'],
        b: divide ? ['bottom-right', 'bottom-left'] : ['bottom'],
        l: divide ? ['top-left', 'bottom-left'] : ['left'],
        tl: ['top-left'],
        tr: ['top-right'],
        br: ['bottom-right'],
        bl: ['bottom-left'],
    };
    if (value in map)
        return map[value];
}
function generatePlaceholder(selector, property, prefixer) {
    if (prefixer === void 0) { prefixer = false; }
    if (!prefixer)
        return [new Style(selector, property).pseudoElement('placeholder')];
    return [
        new Style(selector, property).pseudoElement('-webkit-input-placeholder'),
        new Style(selector, property).pseudoElement('-moz-placeholder'),
        new Style(selector, property).pseudoClass('-ms-input-placeholder'),
        new Style(selector, property).pseudoElement('-ms-input-placeholder'),
        new Style(selector, property).pseudoElement('placeholder'),
    ];
}
function toDarkStyle(style, mode) {
    if (!mode)
        return style;
    if (Array.isArray(style)) {
        if (mode === 'media')
            return style.map(function (i) { return new Style().atRule('@media (prefers-color-scheme: dark)').extend(i); });
        return style.map(function (i) { return new Style().parent('.dark').extend(i); });
    }
    if (mode === 'media')
        return new Style().atRule('@media (prefers-color-scheme: dark)').extend(style);
    return new Style().parent('.dark').extend(style);
}

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var isArrayish = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};

var simpleSwizzle = createCommonjsModule(function (module) {



var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};
});

/* MIT license */

var colorString = createCommonjsModule(function (module) {
var reverseNames = {};

// create a list of reverse color names
for (var name in colorName) {
	if (colorName.hasOwnProperty(name)) {
		reverseNames[colorName[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var keyword = /(\D+)/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		rgb = colorName[match[1]];

		if (!rgb) {
			return null;
		}

		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = (parseFloat(match[1]) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = simpleSwizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = simpleSwizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = simpleSwizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = simpleSwizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = simpleSwizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = num.toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}
});

function hsl2rgb(h, s, l) {
    s = s / 100,
        l = l / 100;
    if (h >= 360)
        h %= 360;
    var c = (1 - Math.abs(2 * l - 1)) * s;
    var x = c * (1 - Math.abs((h / 60) % 2 - 1));
    var m = l - c / 2;
    var r = 0;
    var g = 0;
    var b = 0;
    if (0 <= h && h < 60) {
        r = c;
        g = x;
        b = 0;
    }
    else if (60 <= h && h < 120) {
        r = x;
        g = c;
        b = 0;
    }
    else if (120 <= h && h < 180) {
        r = 0;
        g = c;
        b = x;
    }
    else if (180 <= h && h < 240) {
        r = 0;
        g = x;
        b = c;
    }
    else if (240 <= h && h < 300) {
        r = x;
        g = 0;
        b = c;
    }
    else if (300 <= h && h < 360) {
        r = c;
        g = 0;
        b = x;
    }
    // having obtained RGB, convert channels to hex
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    return [r, g, b];
}
function hwb2rgb(h, w, b) {
    var rgb = hsl2rgb(h, 100, 50);
    for (var i = 0; i < 3; ++i) {
        var c = rgb[i] / 255;
        c *= 1 - w / 100 - b / 100;
        c += w / 100;
        rgb[i] = Math.round(c * 255);
    }
    return rgb;
}
function toRGBA(color) {
    var _a;
    if (/^hsla?/.test(color)) {
        var colorTuple = colorString.get.hsl(color);
        if (!colorTuple)
            return;
        return __spreadArray(__spreadArray([], hsl2rgb(colorTuple[0], colorTuple[1], colorTuple[2])), [colorTuple[3]]);
    }
    else if (/^rgba?/.test(color)) {
        var colorTuple = colorString.get.rgb(color);
        if (!colorTuple)
            return;
        return colorTuple;
    }
    else if (color.startsWith('hwb')) {
        var colorTuple = colorString.get.hwb(color);
        if (!colorTuple)
            return;
        return __spreadArray(__spreadArray([], hwb2rgb(colorTuple[0], colorTuple[1], colorTuple[2])), [colorTuple[3]]);
    }
    return (_a = colorString.get(color)) === null || _a === void 0 ? void 0 : _a.value;
}
function toColor(colorStr) {
    var rgba = toRGBA(colorStr);
    var color = rgba ? rgba.slice(0, 3).join(', ') : colorStr;
    var opacity = rgba ? rgba[3].toString() : '1';
    return {
        color: color,
        opacity: opacity,
    };
}

function generateScreens(screens) {
    var variants = {};
    var breakpoints = Object.entries(screens).sort(function (_a, _b) {
        var sizeA = _a[1];
        var sizeB = _b[1];
        return sortWeight(sizeA) - sortWeight(sizeB);
    });
    breakpoints.forEach(function (_a, index) {
        var name = _a[0], size = _a[1];
        if (isString(size)) {
            var _b = breakpoints[index + 1] || [], nextSize = _b[1];
            variants[name] = styleForBreakpoint({ min: size });
            variants["<" + name] = styleForBreakpoint({ max: increaseWithUnit(size, -0.1) });
            variants["@" + name] = styleForBreakpoint(nextSize ? { min: size, max: increaseWithUnit(nextSize, -0.1) } : { min: size });
            variants["-" + name] = styleForBreakpoint({ max: size });
            variants["+" + name] = styleForBreakpoint(nextSize ? { min: size, max: nextSize } : { min: size });
        }
        else {
            variants[name] = styleForBreakpoint(size);
        }
    });
    return variants;
}
function styleForBreakpoint(rule) {
    var mediaConditions = 'raw' in rule ? rule.raw : [
        rule.min && "(min-width: " + rule.min + ")",
        rule.max && "(max-width: " + rule.max + ")",
    ].filter(function (condition) { return condition; }).join(' and ');
    return function () { return new Style().atRule("@media " + mediaConditions); };
}
// NOTE: Non-size breakpoints should come first, to avoid using them in the
// +breakpoint definition.
function sortWeight(breakpoint) {
    return isString(breakpoint) ? parseInt(breakpoint) : Number.NEGATIVE_INFINITY;
}

function generateThemes(darkMode) {
    if (!darkMode)
        return {};
    return {
        '@dark': function () { return new Style().atRule('@media (prefers-color-scheme: dark)'); },
        '@light': function () { return new Style().atRule('@media (prefers-color-scheme: light)'); },
        '.dark': function () { return new Style().parent('.dark'); },
        '.light': function () { return new Style().parent('.light'); },
        '~dark': function () { return new Style(); },
        dark: function () { return darkMode === 'media' ? new Style().atRule('@media (prefers-color-scheme: dark)') : new Style().parent('.dark'); },
        light: function () { return darkMode === 'media' ? new Style().atRule('@media (prefers-color-scheme: light)') : new Style().parent('.light'); },
    };
}

/*
 * See MDN web docs for more information
 * https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
 */
function generateStates(variantOrder) {
    var states = {
        // Interactive links/buttons
        hover: function () { return new Style().pseudoClass('hover'); },
        focus: function () { return new Style().pseudoClass('focus'); },
        active: function () { return new Style().pseudoClass('active'); },
        visited: function () { return new Style().pseudoClass('visited'); },
        link: function () { return new Style().pseudoClass('link'); },
        target: function () { return new Style().pseudoClass('target'); },
        'focus-visible': function () { return new Style().pseudoClass('focus-visible'); },
        'focus-within': function () { return new Style().pseudoClass('focus-within'); },
        // Form element states
        checked: function () { return new Style().pseudoClass('checked'); },
        'not-checked': function () { return new Style().pseudoClass('not(:checked)'); },
        default: function () { return new Style().pseudoClass('default'); },
        disabled: function () { return new Style().pseudoClass('disabled'); },
        enabled: function () { return new Style().pseudoClass('enabled'); },
        indeterminate: function () { return new Style().pseudoClass('indeterminate'); },
        invalid: function () { return new Style().pseudoClass('invalid'); },
        valid: function () { return new Style().pseudoClass('valid'); },
        optional: function () { return new Style().pseudoClass('optional'); },
        required: function () { return new Style().pseudoClass('required'); },
        'placeholder-shown': function () { return new Style().pseudoClass('placeholder-shown'); },
        'read-only': function () { return new Style().pseudoClass('read-only'); },
        'read-write': function () { return new Style().pseudoClass('read-write'); },
        // Child selectors
        'not-disabled': function () { return new Style().pseudoClass('not(:disabled)'); },
        'first-of-type': function () { return new Style().pseudoClass('first-of-type'); },
        'not-first-of-type': function () { return new Style().pseudoClass('not(:first-of-type)'); },
        'last-of-type': function () { return new Style().pseudoClass('last-of-type'); },
        'not-last-of-type': function () { return new Style().pseudoClass('not(:last-of-type)'); },
        first: function () { return new Style().pseudoClass('first-child'); },
        last: function () { return new Style().pseudoClass('last-child'); },
        'not-first': function () { return new Style().pseudoClass('not(:first-child)'); },
        'not-last': function () { return new Style().pseudoClass('not(:last-child)'); },
        'only-child': function () { return new Style().pseudoClass('only-child'); },
        'not-only-child': function () { return new Style().pseudoClass('not(:only-child)'); },
        'only-of-type': function () { return new Style().pseudoClass('only-of-type'); },
        'not-only-of-type': function () { return new Style().pseudoClass('not(:only-of-type)'); },
        even: function () { return new Style().pseudoClass('nth-child(even)'); },
        odd: function () { return new Style().pseudoClass('nth-child(odd)'); },
        'even-of-type': function () { return new Style().pseudoClass('nth-of-type(even)'); },
        'odd-of-type': function () { return new Style().pseudoClass('nth-of-type(odd)'); },
        root: function () { return new Style().pseudoClass('root'); },
        empty: function () { return new Style().pseudoClass('empty'); },
        // Pseudo elements
        before: function () { return new Style().pseudoElement('before'); },
        after: function () { return new Style().pseudoElement('after'); },
        'first-letter': function () { return new Style().pseudoElement('first-letter'); },
        'first-line': function () { return new Style().pseudoElement('first-line'); },
        selection: function () { return new Style().pseudoElement('selection'); },
        svg: function () { return new Style().child('svg'); },
        all: function () { return new Style().child('*'); },
        'all-child': function () { return new Style().child('> *'); },
        sibling: function () { return new Style().child('~ *'); },
        // https://www.w3schools.com/CSS/css_pseudo_elements.asp
        // Directions
        ltr: function () { return new Style().wrapSelector(function (selector) { return "[dir='ltr'] " + selector + ", [dir='ltr']" + selector; }); },
        rtl: function () { return new Style().wrapSelector(function (selector) { return "[dir='rtl'] " + selector + ", [dir='rtl']" + selector; }); },
        // Group states
        // You'll need to add className="group" to an ancestor to make these work
        // https://github.com/ben-rogerson/twin.macro/blob/master/docs/group.md
        'group-hover': function () { return new Style().parent('.group:hover'); },
        'group-focus': function () { return new Style().parent('.group:focus'); },
        'group-active': function () { return new Style().parent('.group:active'); },
        'group-visited': function () { return new Style().parent('.group:visited'); },
        // Motion control
        // https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
        'motion-safe': function () {
            return new Style().atRule('@media (prefers-reduced-motion: no-preference)');
        },
        'motion-reduce': function () {
            return new Style().atRule('@media (prefers-reduced-motion: reduce)');
        }, // tailwind
    };
    var orderedStates = {};
    variantOrder.forEach(function (v) {
        if (v in states) {
            orderedStates[v] = states[v];
        }
    });
    return orderedStates;
}

function resolveVariants(config) {
    var _a, _b, _c;
    return {
        screen: generateScreens(((_b = (_a = config.theme) === null || _a === void 0 ? void 0 : _a.screens) !== null && _b !== void 0 ? _b : {})),
        theme: generateThemes(config.darkMode),
        state: generateStates((_c = config.variantOrder) !== null && _c !== void 0 ? _c : []),
    };
}

// (Last Update: Aug 22 2020) [https://github.com/sindresorhus/modern-normalize/blob/master/modern-normalize.css]
var preflights = [
    /*! modern-normalize v1.0.0 | MIT License | https://github.com/sindresorhus/modern-normalize */
    /*
  Document
  ========
  */
    /**
  Use a better box model (opinionated).
  */
    // {
    //   keys: ['*'],
    //   global: true,
    //   selector: '*, *::before, *::after',
    //   properties: {
    //     '-webkit-box-sizing': 'border-box',
    //     'box-sizing': 'border-box'
    //   }
    // },
    // overwrite by tailwind
    /**
  Use a more readable tab size (opinionated).
  */
    {
        keys: ['root'],
        global: true,
        selector: ':root',
        properties: {
            '-moz-tab-size': '4',
            '-o-tab-size': '4',
            'tab-size': '4',
        },
    },
    /**
  1. Correct the line height in all browsers.
  2. Prevent adjustments of font size after orientation changes in iOS.
  */
    {
        keys: ['html'],
        global: true,
        selector: 'html',
        properties: {
            // 'line-height': '1.15', /* 1 */ overwrite by tailwind
            '-webkit-text-size-adjust': '100%', /* 2 */
        },
    },
    /*
  Sections
  ========
  */
    /**
  Remove the margin in all browsers.
  */
    {
        keys: ['body'],
        global: true,
        selector: 'body',
        properties: {
            'margin': '0', /* 1 */
        },
    },
    /**
  Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
  */
    // {
    //   keys: ['body'],
    //   global: true,
    //   selector: 'body',
    //   properties: {
    //     'font-family': "system-ui, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji'"
    //   }
    // },
    // overide by tailwind
    /*
  Grouping content
  ================
  */
    /**
  1. Add the correct height in Firefox.
  2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
  */
    {
        keys: ['hr'],
        properties: {
            'height': '0',
            'color': 'inherit', /* 2 */
        },
    },
    /*
  Text-level semantics
  ====================
  */
    /**
  Add the correct text decoration in Chrome, Edge, and Safari.
  */
    {
        keys: ['title'],
        global: true,
        selector: 'abbr[title]',
        properties: {
            '-webkit-text-decoration': 'underline dotted',
            'text-decoration': 'underline dotted',
        },
    },
    /**
  Add the correct font weight in Edge and Safari.
  */
    {
        keys: ['b', 'strong'],
        properties: {
            'font-weight': 'bolder',
        },
    },
    /**
  1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
  2. Correct the odd 'em' font sizing in all browsers.
  */
    {
        keys: ['code', 'kbd', 'samp', 'pre'],
        properties: {
            // 'font-family': "ui-monospace, SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace", /* 1 */ overwrite by tailwind
            'font-size': '1em', /* 2 */
        },
    },
    /**
  Add the correct font size in all browsers.
  */
    {
        keys: ['small'],
        properties: {
            'font-size': '80%',
        },
    },
    /**
  Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.
  */
    {
        keys: ['sub', 'sup'],
        properties: {
            'font-size': '75%',
            'line-height': '0',
            'position': 'relative',
            'vertical-align': 'baseline',
        },
    },
    {
        keys: ['sub'],
        properties: {
            'bottom': '-0.25em',
        },
    },
    {
        keys: ['sup'],
        properties: {
            'top': '-0.5em',
        },
    },
    /*
  Tabular data
  ============
  */
    /**
  1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
  2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
  */
    {
        keys: ['table'],
        properties: {
            'text-indent': '0',
            'border-color': 'inherit', /* 2 */
        },
    },
    /*
  Forms
  =====
  */
    /**
  1. Change the font styles in all browsers.
  2. Remove the margin in Firefox and Safari.
  */
    {
        keys: ['button', 'input', 'optgroup', 'select', 'textarea'],
        properties: {
            'font-family': 'inherit',
            'font-size': '100%',
            'line-height': '1.15',
            'margin': '0', /* 2 */
        },
    },
    /**
  Remove the inheritance of text transform in Edge and Firefox.
  1. Remove the inheritance of text transform in Firefox.
  */
    {
        keys: ['button', 'select'],
        properties: {
            'text-transform': 'none', /* 1 */
        },
    },
    /**
  Correct the inability to style clickable types in iOS and Safari.
  */
    {
        keys: ['button'],
        selector: 'button, [type=\'button\'], [type=\'reset\'], [type=\'submit\']',
        properties: {
            '-webkit-appearance': 'button', /* 1 */
        },
    },
    /**
  Remove the inner border and padding in Firefox.
  */
    {
        keys: ['inner'],
        global: true,
        selector: '::moz-focus-inner',
        properties: {
            'border-style': 'none',
            'padding': '0',
        },
    },
    /**
  Restore the focus styles unset by the previous rule.
  */
    {
        keys: ['focusring'],
        global: true,
        selector: ':-moz-focusring',
        properties: {
            'outline': '1px dotted ButtonText',
        },
    },
    /**
  Remove the additional ':invalid' styles in Firefox.
  See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
  */
    {
        keys: ['invalid'],
        global: true,
        selector: ':-moz-ui-invalid',
        properties: {
            'box-shadow': 'none',
        },
    },
    /**
  Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
  */
    {
        keys: ['legend'],
        properties: {
            'padding': '0',
        },
    },
    /**
  Add the correct vertical alignment in Chrome and Firefox.
  */
    {
        keys: ['progress'],
        properties: {
            'vertical-align': 'baseline',
        },
    },
    /**
  Correct the cursor style of increment and decrement buttons in Safari.
  */
    {
        keys: ['spin'],
        global: true,
        selector: '::-webkit-inner-spin-button, ::-webkit-outer-spin-button',
        properties: {
            'height': 'auto',
        },
    },
    /**
  1. Correct the odd appearance in Chrome and Safari.
  2. Correct the outline style in Safari.
  */
    {
        keys: ['search'],
        global: true,
        selector: '[type=\'search\']',
        properties: {
            '-webkit-appearance': 'textfield',
            'outline-offset': '-2px', /* 2 */
        },
    },
    /**
  Remove the inner padding in Chrome and Safari on macOS.
  */
    {
        keys: ['search'],
        global: true,
        selector: '::-webkit-search-decoration',
        properties: {
            '-webkit-appearance': 'none',
        },
    },
    /**
  1. Correct the inability to style clickable types in iOS and Safari.
  2. Change font properties to 'inherit' in Safari.
  */
    {
        keys: ['file'],
        global: true,
        selector: '::-webkit-file-upload-button',
        properties: {
            '-webkit-appearance': 'button',
            'font': 'inherit',
        },
    },
    /*
  Interactive
  ===========
  */
    /*
  Add the correct display in Chrome and Safari.
  */
    {
        keys: ['summary'],
        properties: {
            'display': 'list-item',
        },
    },
    /**
   * Manually forked from SUIT CSS Base: https://github.com/suitcss/base
   * A thin layer on top of normalize.css that provides a starting point more
   * suitable for web applications.
   */
    /**
   * Removes the default spacing and border for appropriate elements.
   */
    {
        keys: ['blockquote', 'dl', 'dd', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'figure', 'p', 'pre'],
        properties: {
            'margin': '0',
        },
    },
    {
        keys: ['button'],
        properties: {
            'background-color': 'transparent',
            'background-image': 'none'
        },
    },
    /**
   * Work around a Firefox/IE bug where the transparent `button` background
   * results in a loss of the default `button` focus styles.
   */
    {
        keys: ['button'],
        selector: 'button:focus',
        properties: {
            'outline': [
                '1px dotted',
                '5px auto -webkit-focus-ring-color',
            ],
        },
    },
    {
        keys: ['fieldset'],
        properties: {
            'margin': '0',
            'padding': '0',
        },
    },
    {
        keys: ['ol', 'ul'],
        properties: {
            'list-style': 'none',
            'margin': '0',
            'padding': '0',
        },
    },
    /**
   * Tailwind custom reset styles
   */
    /**
   * 1. Use the user's configured `sans` font-family (with Tailwind's default
   *    sans-serif font stack as a fallback) as a sane default.
   * 2. Use Tailwind's default "normal" line-height so the user isn't forced
   *    to override it to ensure consistency even when using the default theme.
   */
    {
        keys: ['html'],
        global: true,
        selector: 'html',
        properties: {
            'font-family': function (theme) { return theme('fontFamily.sans', 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"'); },
            'line-height': '1.5', /* 2 */
        },
    },
    /**
   * Inherit font-family and line-height from `html` so users can set them as
   * a class directly on the `html` element.
   */
    {
        keys: ['body'],
        global: true,
        selector: 'body',
        properties: {
            'font-family': 'inherit',
            'line-height': 'inherit',
        },
    },
    /**
   * 1. Prevent padding and border from affecting element width.
   *
   *    We used to set this in the html element and inherit from
   *    the parent element for everything else. This caused issues
   *    in shadow-dom-enhanced elements like <details> where the content
   *    is wrapped by a div with box-sizing set to `content-box`.
   *
   *    https://github.com/mozdevs/cssremedy/issues/4
   *
   *
   * 2. Allow adding a border to an element by just adding a border-width.
   *
   *    By default, the way the browser specifies that an element should have no
   *    border is by setting it's border-style to `none` in the user-agent
   *    stylesheet.
   *
   *    In order to easily add borders to elements by just setting the `border-width`
   *    property, we change the default border-style for all elements to `solid`, and
   *    use border-width to hide them instead. This way our `border` utilities only
   *    need to set the `border-width` property instead of the entire `border`
   *    shorthand, making our border utilities much more straightforward to compose.
   *
   *    https://github.com/tailwindcss/tailwindcss/pull/116
   */
    {
        keys: ['*'],
        global: true,
        selector: '*, ::before, ::after',
        properties: {
            '-webkit-box-sizing': 'border-box',
            'box-sizing': 'border-box',
            'border-width': '0',
            'border-style': 'solid',
            'border-color': function (theme) { return theme('borderColor.DEFAULT', 'currentColor'); },
        },
    },
    /*
   * Ensure horizontal rules are visible by default
   */
    {
        keys: ['hr'],
        properties: {
            'border-top-width': '1px',
        },
    },
    /**
   * Undo the `border-style: none` reset that Normalize applies to images so that
   * our `border-{width}` utilities have the expected effect.
   *
   * The Normalize reset is unnecessary for us since we default the border-width
   * to 0 on all elements.
   *
   * https://github.com/tailwindcss/tailwindcss/issues/362
   */
    {
        keys: ['img'],
        properties: {
            'border-style': 'solid',
        },
    },
    {
        keys: ['textarea'],
        properties: {
            'resize': 'vertical',
        },
    },
    // input::placeholder,
    // textarea::placeholder {
    //   color: theme('colors.gray.400', #a1a1aa);
    // }
    // support prefixer
    {
        keys: ['input'],
        selector: 'input::placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['input'],
        selector: 'input::webkit-input-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['input'],
        selector: 'input::-moz-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['input'],
        selector: 'input:-ms-input-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['input'],
        selector: 'input::-ms-input-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['textarea'],
        selector: 'textarea::placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['textarea'],
        selector: 'textarea::webkit-input-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['textarea'],
        selector: 'textarea::-moz-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['textarea'],
        selector: 'textarea:-ms-input-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['textarea'],
        selector: 'textarea::-ms-input-placeholder',
        properties: {
            'opacity': '1',
            'color': function (theme) { return theme('colors.gray.400', '#a1a1aa'); },
        },
    },
    {
        keys: ['button'],
        selector: 'button, [role="button"]',
        properties: {
            'cursor': 'pointer',
        },
    },
    {
        keys: ['table'],
        properties: {
            'border-collapse': 'collapse',
        },
    },
    {
        keys: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        properties: {
            'font-size': 'inherit',
            'font-weight': 'inherit',
        },
    },
    /**
   * Reset links to optimize for opt-in styling instead of
   * opt-out.
   */
    {
        keys: ['a'],
        properties: {
            'color': 'inherit',
            'text-decoration': 'inherit',
        },
    },
    /**
   * Reset form element properties that are easy to forget to
   * style explicitly so you don't inadvertently introduce
   * styles that deviate from your design system. These styles
   * supplement a partial reset that is already applied by
   * normalize.css.
   */
    {
        keys: ['button', 'input', 'optgroup', 'select', 'textarea'],
        properties: {
            'padding': '0',
            'line-height': 'inherit',
            'color': 'inherit',
        },
    },
    /**
   * Use the configured 'mono' font family for elements that
   * are expected to be rendered with a monospace font, falling
   * back to the system monospace stack if there is no configured
   * 'mono' font family.
   */
    {
        keys: ['pre', 'code', 'kbd', 'samp'],
        properties: {
            'font-family': function (theme) { return theme('fontFamily.mono', 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace'); },
        },
    },
    /**
   * Make replaced elements `display: block` by default as that's
   * the behavior you want almost all of the time. Inspired by
   * CSS Remedy, with `svg` added as well.
   *
   * https://github.com/mozdevs/cssremedy/issues/14
   */
    {
        keys: ['img', 'svg', 'video', 'canvas', 'audio', 'iframe', 'embed', 'object'],
        properties: {
            'display': 'block',
            'vertical-align': 'middle',
        },
    },
    /**
   * Constrain images and videos to the parent width and preserve
   * their instrinsic aspect ratio.
   *
   * https://github.com/mozdevs/cssremedy/issues/14
   */
    {
        keys: ['img', 'video'],
        properties: {
            'max-width': '100%',
            'height': 'auto',
        },
    },
    // added by ringWidth
    // https://github.com/tailwindlabs/tailwindcss/blob/master/src/plugins/ringWidth.js
    {
        keys: ['*'],
        global: true,
        selector: '*',
        properties: {
            '--tw-ring-inset': 'var(--tw-empty,/*!*/ /*!*/)',
            '--tw-ring-offset-width': function (theme) { return theme('ringOffsetWidth.DEFAULT', '0px'); },
            '--tw-ring-offset-color': function (theme) { return theme('ringOffsetColor.DEFAULT', '#fff'); },
            '--tw-ring-color': function (theme) { var _a; return "rgba(" + ((_a = hex2RGB(theme('ringColor.DEFAULT', '#93C5FD'))) === null || _a === void 0 ? void 0 : _a.join(', ')) + ", " + theme('ringOpacity.DEFAULT', '0.5') + ")"; },
            '--tw-ring-offset-shadow': '0 0 #0000',
            '--tw-ring-shadow': '0 0 #0000',
        },
    },
    // added by boxShadow
    {
        keys: ['*'],
        global: true,
        selector: '*',
        properties: {
            '--tw-shadow': '0 0 #0000',
        },
    },
];

// https://tailwindcss.com/docs/font-variant-numeric
// This feature uses var+comment hacks to get around property stripping:
// https://github.com/tailwindlabs/tailwindcss.com/issues/522#issuecomment-687667238
var fontVariants = {
    '--tw-ordinal': 'var(--tw-empty,/*!*/ /*!*/)',
    '--tw-slashed-zero': 'var(--tw-empty,/*!*/ /*!*/)',
    '--tw-numeric-figure': 'var(--tw-empty,/*!*/ /*!*/)',
    '--tw-numeric-spacing': 'var(--tw-empty,/*!*/ /*!*/)',
    '--tw-numeric-fraction': 'var(--tw-empty,/*!*/ /*!*/)',
    'font-variant-numeric': 'var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)',
};
var staticUtilities = {
    /**
     * ===========================================
     * Layout
     */
    // https://tailwindcss.com/docs/container
    // See dynamic.ts
    // https://tailwindcss.com/docs/box-sizing
    'box-border': {
        'utility': {
            '-webkit-box-sizing': 'border-box',
            'box-sizing': 'border-box',
        },
        'meta': {
            'group': 'boxSizing',
            'order': 1,
        },
    },
    'box-content': {
        'utility': {
            '-webkit-box-sizing': 'content-box',
            'box-sizing': 'content-box',
        },
        'meta': {
            'group': 'boxSizing',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/display
    'block': {
        'utility': {
            'display': 'block',
        },
        'meta': {
            'group': 'display',
            'order': 1,
        },
    },
    'inline-block': {
        'utility': {
            'display': 'inline-block',
        },
        'meta': {
            'group': 'display',
            'order': 2,
        },
    },
    'inline': {
        'utility': {
            'display': 'inline',
        },
        'meta': {
            'group': 'display',
            'order': 3,
        },
    },
    'flex': {
        'utility': {
            'display': [
                '-webkit-box',
                '-ms-flexbox',
                '-webkit-flex',
                'flex',
            ],
        },
        'meta': {
            'group': 'display',
            'order': 4,
        },
    },
    'inline-flex': {
        'utility': {
            'display': [
                '-webkit-inline-box',
                '-ms-inline-flexbox',
                '-webkit-inline-flex',
                'inline-flex',
            ],
        },
        'meta': {
            'group': 'display',
            'order': 5,
        },
    },
    'table': {
        'utility': {
            'display': 'table',
        },
        'meta': {
            'group': 'display',
            'order': 6,
        },
    },
    'table-caption': {
        'utility': {
            'display': 'table-caption',
        },
        'meta': {
            'group': 'display',
            'order': 7,
        },
    },
    'table-cell': {
        'utility': {
            'display': 'table-cell',
        },
        'meta': {
            'group': 'display',
            'order': 8,
        },
    },
    'table-column': {
        'utility': {
            'display': 'table-column',
        },
        'meta': {
            'group': 'display',
            'order': 9,
        },
    },
    'table-column-group': {
        'utility': {
            'display': 'table-column-group',
        },
        'meta': {
            'group': 'display',
            'order': 10,
        },
    },
    'table-footer-group': {
        'utility': {
            'display': 'table-footer-group',
        },
        'meta': {
            'group': 'display',
            'order': 11,
        },
    },
    'table-header-group': {
        'utility': {
            'display': 'table-header-group',
        },
        'meta': {
            'group': 'display',
            'order': 12,
        },
    },
    'table-row-group': {
        'utility': {
            'display': 'table-row-group',
        },
        'meta': {
            'group': 'display',
            'order': 13,
        },
    },
    'table-row': {
        'utility': {
            'display': 'table-row',
        },
        'meta': {
            'group': 'display',
            'order': 14,
        },
    },
    'flow-root': {
        'utility': {
            'display': 'flow-root',
        },
        'meta': {
            'group': 'display',
            'order': 15,
        },
    },
    'grid': {
        'utility': {
            'display': [
                '-ms-grid',
                'grid',
            ],
        },
        'meta': {
            'group': 'display',
            'order': 16,
        },
    },
    'inline-grid': {
        'utility': {
            'display': [
                '-ms-inline-grid',
                'inline-grid',
            ],
        },
        'meta': {
            'group': 'display',
            'order': 17,
        },
    },
    'contents': {
        'utility': {
            'display': 'contents',
        },
        'meta': {
            'group': 'display',
            'order': 18,
        },
    },
    'hidden': {
        'utility': {
            'display': 'none',
        },
        'meta': {
            'group': 'display',
            'order': 19,
        },
    },
    // https://tailwindcss.com/docs/float
    'float-right': {
        'utility': {
            'float': 'right',
        },
        'meta': {
            'group': 'float',
            'order': 1,
        },
    },
    'float-left': {
        'utility': {
            'float': 'left',
        },
        'meta': {
            'group': 'float',
            'order': 2,
        },
    },
    'float-none': {
        'utility': {
            'float': 'none',
        },
        'meta': {
            'group': 'float',
            'order': 3,
        },
    },
    // https://tailwindcss.com/docs/clear
    'clear-left': {
        'utility': {
            'clear': 'left',
        },
        'meta': {
            'group': 'clear',
            'order': 1,
        },
    },
    'clear-right': {
        'utility': {
            'clear': 'right',
        },
        'meta': {
            'group': 'clear',
            'order': 2,
        },
    },
    'clear-both': {
        'utility': {
            'clear': 'both',
        },
        'meta': {
            'group': 'clear',
            'order': 3,
        },
    },
    'clear-none': {
        'utility': {
            'clear': 'none',
        },
        'meta': {
            'group': 'clear',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/object-fit
    'object-contain': {
        'utility': {
            '-o-object-fit': 'contain',
            'object-fit': 'contain',
        },
        'meta': {
            'group': 'objectFit',
            'order': 1,
        },
    },
    'object-cover': {
        'utility': {
            '-o-object-fit': 'cover',
            'object-fit': 'cover',
        },
        'meta': {
            'group': 'objectFit',
            'order': 2,
        },
    },
    'object-fill': {
        'utility': {
            '-o-object-fit': 'fill',
            'object-fit': 'fill',
        },
        'meta': {
            'group': 'objectFit',
            'order': 3,
        },
    },
    'object-none': {
        'utility': {
            '-o-object-fit': 'none',
            'object-fit': 'none',
        },
        'meta': {
            'group': 'objectFit',
            'order': 4,
        },
    },
    'object-scale-down': {
        'utility': {
            '-o-object-fit': 'scale-down',
            'object-fit': 'scale-down',
        },
        'meta': {
            'group': 'objectFit',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/object-position
    // dynamic
    // https://tailwindcss.com/docs/overflow
    'overflow-auto': {
        'utility': {
            'overflow': 'auto',
        },
        'meta': {
            'group': 'overflow',
            'order': 1,
        },
    },
    'overflow-hidden': {
        'utility': {
            'overflow': 'hidden',
        },
        'meta': {
            'group': 'overflow',
            'order': 2,
        },
    },
    'overflow-visible': {
        'utility': {
            'overflow': 'visible',
        },
        'meta': {
            'group': 'overflow',
            'order': 3,
        },
    },
    'overflow-scroll': {
        'utility': {
            'overflow': 'scroll',
        },
        'meta': {
            'group': 'overflow',
            'order': 4,
        },
    },
    'overflow-x-auto': {
        'utility': {
            'overflow-x': 'auto',
        },
        'meta': {
            'group': 'overflow',
            'order': 5,
        },
    },
    'overflow-y-auto': {
        'utility': {
            'overflow-y': 'auto',
        },
        'meta': {
            'group': 'overflow',
            'order': 6,
        },
    },
    'overflow-x-hidden': {
        'utility': {
            'overflow-x': 'hidden',
        },
        'meta': {
            'group': 'overflow',
            'order': 7,
        },
    },
    'overflow-y-hidden': {
        'utility': {
            'overflow-y': 'hidden',
        },
        'meta': {
            'group': 'overflow',
            'order': 8,
        },
    },
    'overflow-x-visible': {
        'utility': {
            'overflow-x': 'visible',
        },
        'meta': {
            'group': 'overflow',
            'order': 9,
        },
    },
    'overflow-y-visible': {
        'utility': {
            'overflow-y': 'visible',
        },
        'meta': {
            'group': 'overflow',
            'order': 10,
        },
    },
    'overflow-x-scroll': {
        'utility': {
            'overflow-x': 'scroll',
        },
        'meta': {
            'group': 'overflow',
            'order': 11,
        },
    },
    'overflow-y-scroll': {
        'utility': {
            'overflow-y': 'scroll',
        },
        'meta': {
            'group': 'overflow',
            'order': 12,
        },
    },
    // https://tailwindcss.com/docs/overscroll-behavior
    'overscroll-auto': {
        'utility': {
            'overscroll-behavior': 'auto',
            '-ms-scroll-chaining': 'chained',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 1,
        },
    },
    'overscroll-contain': {
        'utility': {
            'overscroll-behavior': 'contain',
            '-ms-scroll-chaining': 'none',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 2,
        },
    },
    'overscroll-none': {
        'utility': {
            'overscroll-behavior': 'none',
            '-ms-scroll-chaining': 'none',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 3,
        },
    },
    'overscroll-y-auto': {
        'utility': {
            'overscroll-behavior-y': 'auto',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 4,
        },
    },
    'overscroll-y-contain': {
        'utility': {
            'overscroll-behavior-y': 'contain',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 5,
        },
    },
    'overscroll-y-none': {
        'utility': {
            'overscroll-behavior-y': 'none',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 6,
        },
    },
    'overscroll-x-auto': {
        'utility': {
            'overscroll-behavior-x': 'auto',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 7,
        },
    },
    'overscroll-x-contain': {
        'utility': {
            'overscroll-behavior-x': 'contain',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 8,
        },
    },
    'overscroll-x-none': {
        'utility': {
            'overscroll-behavior-x': 'none',
        },
        'meta': {
            'group': 'overscrollBehavior',
            'order': 9,
        },
    },
    // https://tailwindcss.com/docs/position
    'static': {
        'utility': {
            'position': 'static',
        },
        'meta': {
            'group': 'position',
            'order': 1,
        },
    },
    'fixed': {
        'utility': {
            'position': 'fixed',
        },
        'meta': {
            'group': 'position',
            'order': 2,
        },
    },
    'absolute': {
        'utility': {
            'position': 'absolute',
        },
        'meta': {
            'group': 'position',
            'order': 3,
        },
    },
    'relative': {
        'utility': {
            'position': 'relative',
        },
        'meta': {
            'group': 'position',
            'order': 4,
        },
    },
    'sticky': {
        'utility': {
            'position': [
                'sticky',
                '-webkit-sticky',
            ],
        },
        'meta': {
            'group': 'position',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/top-right-bottom-left
    // See dynamic.ts
    // https://tailwindcss.com/docs/visibility
    'visible': {
        'utility': {
            'visibility': 'visible',
        },
        'meta': {
            'group': 'visibility',
            'order': 1,
        },
    },
    'invisible': {
        'utility': {
            'visibility': 'hidden',
        },
        'meta': {
            'group': 'visibility',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/z-index
    // See dynamic.ts
    /**
     * ===========================================
     * Flexbox
     */
    // https://tailwindcss.com/docs/flex-direction
    'flex-row': {
        'utility': {
            '-webkit-box-orient': 'horizontal',
            '-webkit-box-direction': 'normal',
            '-ms-flex-direction': 'row',
            '-webkit-flex-direction': 'row',
            'flex-direction': 'row',
        },
        'meta': {
            'group': 'flexDirection',
            'order': 1,
        },
    },
    'flex-row-reverse': {
        'utility': {
            '-webkit-box-orient': 'horizontal',
            '-webkit-box-direction': 'reverse',
            '-ms-flex-direction': 'row-reverse',
            '-webkit-flex-direction': 'row-reverse',
            'flex-direction': 'row-reverse',
        },
        'meta': {
            'group': 'flexDirection',
            'order': 2,
        },
    },
    'flex-col': {
        'utility': {
            '-webkit-box-orient': 'vertical',
            '-webkit-box-direction': 'normal',
            '-ms-flex-direction': 'column',
            '-webkit-flex-direction': 'column',
            'flex-direction': 'column',
        },
        'meta': {
            'group': 'flexDirection',
            'order': 3,
        },
    },
    'flex-col-reverse': {
        'utility': {
            '-webkit-box-orient': 'vertical',
            '-webkit-box-direction': 'reverse',
            '-ms-flex-direction': 'column-reverse',
            '-webkit-flex-direction': 'column-reverse',
            'flex-direction': 'column-reverse',
        },
        'meta': {
            'group': 'flexDirection',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/flex-wrap
    'flex-wrap': {
        'utility': {
            '-ms-flex-wrap': 'wrap',
            '-webkit-flex-wrap': 'wrap',
            'flex-wrap': 'wrap',
        },
        'meta': {
            'group': 'flexWrap',
            'order': 1,
        },
    },
    'flex-wrap-reverse': {
        'utility': {
            '-ms-flex-wrap': 'wrap-reverse',
            '-webkit-flex-wrap': 'wrap-reverse',
            'flex-wrap': 'wrap-reverse',
        },
        'meta': {
            'group': 'flexWrap',
            'order': 2,
        },
    },
    'flex-nowrap': {
        'utility': {
            '-ms-flex-wrap': 'nowrap',
            '-webkit-flex-wrap': 'nowrap',
            'flex-wrap': 'nowrap',
        },
        'meta': {
            'group': 'flexWrap',
            'order': 3,
        },
    },
    // https://tailwindcss.com/docs/flex
    // https://tailwindcss.com/docs/flex-grow
    // https://tailwindcss.com/docs/flex-shrink
    // https://tailwindcss.com/docs/order
    // See dynamic.ts
    /**
     * ===========================================
     * Grid
     */
    // https://tailwindcss.com/docs/grid-template-columns
    // https://tailwindcss.com/docs/grid-column
    'col-auto': {
        'utility': {
            'grid-column': 'auto',
        },
        'meta': {
            'group': 'gridColumn',
            'order': 1,
        },
    },
    // https://tailwindcss.com/docs/grid-template-rows
    // https://tailwindcss.com/docs/grid-row
    'row-auto': {
        'utility': {
            'grid-row': 'auto',
        },
        'meta': {
            'group': 'gridRow',
            'order': 1,
        },
    },
    // https://tailwindcss.com/docs/grid-auto-flow
    'grid-flow-row': {
        'utility': {
            'grid-auto-flow': 'row',
        },
        'meta': {
            'group': 'gridAutoFlow',
            'order': 1,
        },
    },
    'grid-flow-col': {
        'utility': {
            'grid-auto-flow': 'column',
        },
        'meta': {
            'group': 'gridAutoFlow',
            'order': 2,
        },
    },
    'grid-flow-row-dense': {
        'utility': {
            'grid-auto-flow': 'row dense',
        },
        'meta': {
            'group': 'gridAutoFlow',
            'order': 3,
        },
    },
    'grid-flow-col-dense': {
        'utility': {
            'grid-auto-flow': 'col dense',
        },
        'meta': {
            'group': 'gridAutoFlow',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/grid-auto-columns
    // https://tailwindcss.com/docs/grid-auto-rows
    // https://tailwindcss.com/docs/gap
    // See dynamic.ts
    // https://tailwindcss.com/docs/justify-content
    'justify-start': {
        'utility': {
            '-webkit-box-pack': 'start',
            '-ms-flex-pack': 'start',
            '-webkit-justify-content': 'flex-start',
            'justify-content': 'flex-start',
        },
        'meta': {
            'group': 'justifyContent',
            'order': 1,
        },
    },
    'justify-end': {
        'utility': {
            '-webkit-box-pack': 'end',
            '-ms-flex-pack': 'end',
            '-webkit-justify-content': 'flex-end',
            'justify-content': 'flex-end',
        },
        'meta': {
            'group': 'justifyContent',
            'order': 2,
        },
    },
    'justify-center': {
        'utility': {
            '-webkit-box-pack': 'center',
            '-ms-flex-pack': 'center',
            '-webkit-justify-content': 'center',
            'justify-content': 'center',
        },
        'meta': {
            'group': 'justifyContent',
            'order': 3,
        },
    },
    'justify-between': {
        'utility': {
            '-webkit-box-pack': 'justify',
            '-ms-flex-pack': 'justify',
            '-webkit-justify-content': 'space-between',
            'justify-content': 'space-between',
        },
        'meta': {
            'group': 'justifyContent',
            'order': 4,
        },
    },
    'justify-around': {
        'utility': {
            '-ms-flex-pack': 'distribute',
            '-webkit-justify-content': 'space-around',
            'justify-content': 'space-around',
        },
        'meta': {
            'group': 'justifyContent',
            'order': 5,
        },
    },
    'justify-evenly': {
        'utility': {
            '-webkit-box-pack': 'space-evenly',
            '-ms-flex-pack': 'space-evenly',
            '-webkit-justify-content': 'space-evenly',
            'justify-content': 'space-evenly',
        },
        'meta': {
            'group': 'justifyContent',
            'order': 6,
        },
    },
    // https://tailwindcss.com/docs/justify-items
    'justify-items-auto': {
        'utility': {
            'justify-items': 'auto',
        },
        'meta': {
            'group': 'justifyItems',
            'order': 1,
        },
    },
    'justify-items-start': {
        'utility': {
            'justify-items': 'start',
        },
        'meta': {
            'group': 'justifyItems',
            'order': 2,
        },
    },
    'justify-items-end': {
        'utility': {
            'justify-items': 'end',
        },
        'meta': {
            'group': 'justifyItems',
            'order': 3,
        },
    },
    'justify-items-center': {
        'utility': {
            'justify-items': 'center',
        },
        'meta': {
            'group': 'justifyItems',
            'order': 4,
        },
    },
    'justify-items-stretch': {
        'utility': {
            'justify-items': 'stretch',
        },
        'meta': {
            'group': 'justifyItems',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/justify-self
    'justify-self-auto': {
        'utility': {
            '-ms-grid-column-align': 'auto',
            'justify-self': 'auto',
        },
        'meta': {
            'group': 'justifySelf',
            'order': 1,
        },
    },
    'justify-self-start': {
        'utility': {
            '-ms-grid-column-align': 'start',
            'justify-self': 'start',
        },
        'meta': {
            'group': 'justifySelf',
            'order': 2,
        },
    },
    'justify-self-end': {
        'utility': {
            '-ms-grid-column-align': 'end',
            'justify-self': 'end',
        },
        'meta': {
            'group': 'justifySelf',
            'order': 3,
        },
    },
    'justify-self-center': {
        'utility': {
            '-ms-grid-column-align': 'center',
            'justify-self': 'center',
        },
        'meta': {
            'group': 'justifySelf',
            'order': 4,
        },
    },
    'justify-self-stretch': {
        'utility': {
            '-ms-grid-column-align': 'stretch',
            'justify-self': 'stretch',
        },
        'meta': {
            'group': 'justifySelf',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/align-content
    'content-center': {
        'utility': {
            '-ms-flex-line-pack': 'center',
            '-webkit-align-content': 'center',
            'align-content': 'center',
        },
        'meta': {
            'group': 'alignContent',
            'order': 1,
        },
    },
    'content-start': {
        'utility': {
            '-ms-flex-line-pack': 'start',
            '-webkit-align-content': 'flex-start',
            'align-content': 'flex-start',
        },
        'meta': {
            'group': 'alignContent',
            'order': 2,
        },
    },
    'content-end': {
        'utility': {
            '-ms-flex-line-pack': 'end',
            '-webkit-align-content': 'flex-end',
            'align-content': 'flex-end',
        },
        'meta': {
            'group': 'alignContent',
            'order': 3,
        },
    },
    'content-between': {
        'utility': {
            '-ms-flex-line-pack': 'justify',
            '-webkit-align-content': 'space-between',
            'align-content': 'space-between',
        },
        'meta': {
            'group': 'alignContent',
            'order': 4,
        },
    },
    'content-around': {
        'utility': {
            '-ms-flex-line-pack': 'distribute',
            '-webkit-align-content': 'space-around',
            'align-content': 'space-around',
        },
        'meta': {
            'group': 'alignContent',
            'order': 5,
        },
    },
    'content-evenly': {
        'utility': {
            '-ms-flex-line-pack': 'space-evenly',
            '-webkit-align-content': 'space-evenly',
            'align-content': 'space-evenly',
        },
        'meta': {
            'group': 'alignContent',
            'order': 6,
        },
    },
    // https://tailwindcss.com/docs/align-items
    'items-start': {
        'utility': {
            '-webkit-box-align': 'start',
            '-ms-flex-align': 'start',
            '-webkit-align-items': 'flex-start',
            'align-items': 'flex-start',
        },
        'meta': {
            'group': 'alignItems',
            'order': 1,
        },
    },
    'items-end': {
        'utility': {
            '-webkit-box-align': 'end',
            '-ms-flex-align': 'end',
            '-webkit-align-items': 'flex-end',
            'align-items': 'flex-end',
        },
        'meta': {
            'group': 'alignItems',
            'order': 2,
        },
    },
    'items-center': {
        'utility': {
            '-webkit-box-align': 'center',
            '-ms-flex-align': 'center',
            '-webkit-align-items': 'center',
            'align-items': 'center',
        },
        'meta': {
            'group': 'alignItems',
            'order': 3,
        },
    },
    'items-baseline': {
        'utility': {
            '-webkit-box-align': 'baseline',
            '-ms-flex-align': 'baseline',
            '-webkit-align-items': 'baseline',
            'align-items': 'baseline',
        },
        'meta': {
            'group': 'alignItems',
            'order': 4,
        },
    },
    'items-stretch': {
        'utility': {
            '-webkit-box-align': 'stretch',
            '-ms-flex-align': 'stretch',
            '-webkit-align-items': 'stretch',
            'align-items': 'stretch',
        },
        'meta': {
            'group': 'alignItems',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/align-self
    'self-auto': {
        'utility': {
            '-ms-flex-item-align': 'auto',
            '-ms-grid-row-align': 'auto',
            '-webkit-align-self': 'auto',
            'align-self': 'auto',
        },
        'meta': {
            'group': 'alignSelf',
            'order': 1,
        },
    },
    'self-start': {
        'utility': {
            '-ms-flex-item-align': 'start',
            '-webkit-align-self': 'flex-start',
            'align-self': 'flex-start',
        },
        'meta': {
            'group': 'alignSelf',
            'order': 2,
        },
    },
    'self-end': {
        'utility': {
            '-ms-flex-item-align': 'end',
            '-webkit-align-self': 'flex-end',
            'align-self': 'flex-end',
        },
        'meta': {
            'group': 'alignSelf',
            'order': 3,
        },
    },
    'self-center': {
        'utility': {
            '-ms-flex-item-align': 'center',
            '-ms-grid-row-align': 'center',
            '-webkit-align-self': 'center',
            'align-self': 'center',
        },
        'meta': {
            'group': 'alignSelf',
            'order': 4,
        },
    },
    'self-stretch': {
        'utility': {
            '-ms-flex-item-align': 'stretch',
            '-ms-grid-row-align': 'stretch',
            '-webkit-align-self': 'stretch',
            'align-self': 'stretch',
        },
        'meta': {
            'group': 'alignSelf',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/place-content
    'place-content-center': {
        'utility': {
            'place-content': 'center',
        },
        'meta': {
            'group': 'placeContent',
            'order': 1,
        },
    },
    'place-content-start': {
        'utility': {
            'place-content': 'start',
        },
        'meta': {
            'group': 'placeContent',
            'order': 2,
        },
    },
    'place-content-end': {
        'utility': {
            'place-content': 'end',
        },
        'meta': {
            'group': 'placeContent',
            'order': 3,
        },
    },
    'place-content-between': {
        'utility': {
            'place-content': 'space-between',
        },
        'meta': {
            'group': 'placeContent',
            'order': 4,
        },
    },
    'place-content-around': {
        'utility': {
            'place-content': 'space-around',
        },
        'meta': {
            'group': 'placeContent',
            'order': 5,
        },
    },
    'place-content-evenly': {
        'utility': {
            'place-content': 'space-evenly',
        },
        'meta': {
            'group': 'placeContent',
            'order': 6,
        },
    },
    'place-content-stretch': {
        'utility': {
            'place-content': 'stretch',
        },
        'meta': {
            'group': 'placeContent',
            'order': 7,
        },
    },
    // https://tailwindcss.com/docs/place-items
    'place-items-auto': {
        'utility': {
            'place-items': 'auto',
        },
        'meta': {
            'group': 'placeItems',
            'order': 1,
        },
    },
    'place-items-start': {
        'utility': {
            'place-items': 'start',
        },
        'meta': {
            'group': 'placeItems',
            'order': 2,
        },
    },
    'place-items-end': {
        'utility': {
            'place-items': 'end',
        },
        'meta': {
            'group': 'placeItems',
            'order': 3,
        },
    },
    'place-items-center': {
        'utility': {
            'place-items': 'center',
        },
        'meta': {
            'group': 'placeItems',
            'order': 4,
        },
    },
    'place-items-stretch': {
        'utility': {
            'place-items': 'stretch',
        },
        'meta': {
            'group': 'placeItems',
            'order': 5,
        },
    },
    'place-self-auto': {
        'utility': {
            '-ms-grid-row-align': 'auto',
            '-ms-grid-column-align': 'auto',
            'place-self': 'auto',
        },
        'meta': {
            'group': 'placeSelf',
            'order': 1,
        },
    },
    'place-self-start': {
        'utility': {
            '-ms-grid-row-align': 'start',
            '-ms-grid-column-align': 'start',
            'place-self': 'start',
        },
        'meta': {
            'group': 'placeSelf',
            'order': 2,
        },
    },
    'place-self-end': {
        'utility': {
            '-ms-grid-row-align': 'end',
            '-ms-grid-column-align': 'end',
            'place-self': 'end',
        },
        'meta': {
            'group': 'placeSelf',
            'order': 3,
        },
    },
    'place-self-center': {
        'utility': {
            '-ms-grid-row-align': 'center',
            '-ms-grid-column-align': 'center',
            'place-self': 'center',
        },
        'meta': {
            'group': 'placeSelf',
            'order': 4,
        },
    },
    'place-self-stretch': {
        'utility': {
            '-ms-grid-row-align': 'stretch',
            '-ms-grid-column-align': 'stretch',
            'place-self': 'stretch',
        },
        'meta': {
            'group': 'placeSelf',
            'order': 5,
        },
    },
    /**
     * ===========================================
     * Spacing
     */
    // https://tailwindcss.com/docs/padding
    // https://tailwindcss.com/docs/margin
    // https://tailwindcss.com/docs/space
    // See dynamic.ts
    /**
     * ===========================================
     * Sizing
     */
    // https://tailwindcss.com/docs/width
    // https://tailwindcss.com/docs/min-width
    // https://tailwindcss.com/docs/max-width
    // https://tailwindcss.com/docs/height
    // https://tailwindcss.com/docs/min-height
    // https://tailwindcss.com/docs/max-height
    // See dynamic.ts
    /**
     * ===========================================
     * Typography
     */
    // https://tailwindcss.com/docs/font-family
    // https://tailwindcss.com/docs/font-size
    // See dynamic.ts
    // https://tailwindcss.com/docs/font-smoothing
    'antialiased': {
        'utility': {
            '-webkit-font-smoothing': 'antialiased',
            '-moz-osx-font-smoothing': 'grayscale',
        },
        'meta': {
            'group': 'fontSmoothing',
            'order': 1,
        },
    },
    'subpixel-antialiased': {
        'utility': {
            '-webkit-font-smoothing': 'auto',
            '-moz-osx-font-smoothing': 'auto',
        },
        'meta': {
            'group': 'fontSmoothing',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/font-style
    'italic': {
        'utility': {
            'font-style': 'italic',
        },
        'meta': {
            'group': 'fontStyle',
            'order': 1,
        },
    },
    'not-italic': {
        'utility': {
            'font-style': 'normal',
        },
        'meta': {
            'group': 'fontStyle',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/font-weight
    // See dynamic.ts
    // https://tailwindcss.com/docs/font-variant-numeric
    'normal-nums': {
        'utility': {
            'font-variant-numeric': 'normal',
        },
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 1,
        },
    },
    'ordinal': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-ordinal': 'ordinal' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 2,
        },
    },
    'slashed-zero': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-slashed-zero': 'slashed-zero' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 3,
        },
    },
    'lining-nums': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-numeric-figure': 'lining-nums' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 4,
        },
    },
    'oldstyle-nums': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-numeric-figure': 'oldstyle-nums' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 5,
        },
    },
    'proportional-nums': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-numeric-spacing': 'proportional-nums' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 6,
        },
    },
    'tabular-nums': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-numeric-spacing': 'tabular-nums' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 7,
        },
    },
    'diagonal-fractions': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-numeric-fraction': 'diagonal-fractions' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 8,
        },
    },
    'stacked-fractions': {
        'utility': __assign(__assign({}, fontVariants), { '--tw-numeric-fraction': 'stacked-fractions' }),
        'meta': {
            'group': 'fontVariantNumeric',
            'order': 9,
        },
    },
    // https://tailwindcss.com/docs/letter-spacing
    // https://tailwindcss.com/docs/line-height
    // https://tailwindcss.com/docs/list-style-type
    // See dynamic.ts
    // https://tailwindcss.com/docs/list-style-position
    'list-inside': {
        'utility': {
            'list-style-position': 'inside',
        },
        'meta': {
            'group': 'listStylePosition',
            'order': 1,
        },
    },
    'list-outside': {
        'utility': {
            'list-style-position': 'outside',
        },
        'meta': {
            'group': 'listStylePosition',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/placeholder-color
    // https://tailwindcss.com/docs/placeholder-opacity
    // See dynamic.ts
    // https://tailwindcss.com/docs/text-align
    'text-left': {
        'utility': {
            'text-align': 'left',
        },
        'meta': {
            'group': 'textAlign',
            'order': 1,
        },
    },
    'text-center': {
        'utility': {
            'text-align': 'center',
        },
        'meta': {
            'group': 'textAlign',
            'order': 2,
        },
    },
    'text-right': {
        'utility': {
            'text-align': 'right',
        },
        'meta': {
            'group': 'textAlign',
            'order': 3,
        },
    },
    'text-justify': {
        'utility': {
            'text-align': 'justify',
        },
        'meta': {
            'group': 'textAlign',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/text-color
    // https://tailwindcss.com/docs/text-opacity
    // See dynamic.ts
    // https://tailwindcss.com/docs/text-decoration
    'underline': {
        'utility': {
            'text-decoration': 'underline',
        },
        'meta': {
            'group': 'textDecoration',
            'order': 1,
        },
    },
    'line-through': {
        'utility': {
            'text-decoration': 'line-through',
        },
        'meta': {
            'group': 'textDecoration',
            'order': 2,
        },
    },
    'no-underline': {
        'utility': {
            'text-decoration': 'none',
        },
        'meta': {
            'group': 'textDecoration',
            'order': 3,
        },
    },
    // https://tailwindcss.com/docs/text-transform
    'uppercase': {
        'utility': {
            'text-transform': 'uppercase',
        },
        'meta': {
            'group': 'textTransform',
            'order': 1,
        },
    },
    'lowercase': {
        'utility': {
            'text-transform': 'lowercase',
        },
        'meta': {
            'group': 'textTransform',
            'order': 2,
        },
    },
    'capitalize': {
        'utility': {
            'text-transform': 'capitalize',
        },
        'meta': {
            'group': 'textTransform',
            'order': 3,
        },
    },
    'normal-case': {
        'utility': {
            'text-transform': 'none',
        },
        'meta': {
            'group': 'textTransform',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/text-overflow
    'truncate': {
        'utility': {
            'overflow': 'hidden',
            '-o-text-overflow': 'ellipsis',
            'text-overflow': 'ellipsis',
            'white-space': 'nowrap',
        },
        'meta': {
            'group': 'textOverflow',
            'order': 1,
        },
    },
    'overflow-ellipsis': {
        'utility': {
            '-o-text-overflow': 'ellipsis',
            'text-overflow': 'ellipsis',
        },
        'meta': {
            'group': 'textOverflow',
            'order': 2,
        },
    },
    'overflow-clip': {
        'utility': {
            '-o-text-overflow': 'clip',
            'text-overflow': 'clip',
        },
        'meta': {
            'group': 'textOverflow',
            'order': 3,
        },
    },
    // https://tailwindcss.com/docs/vertical-align
    'align-baseline': {
        'utility': {
            'vertical-align': 'baseline',
        },
        'meta': {
            'group': 'verticalAlign',
            'order': 1,
        },
    },
    'align-top': {
        'utility': {
            'vertical-align': 'top',
        },
        'meta': {
            'group': 'verticalAlign',
            'order': 2,
        },
    },
    'align-middle': {
        'utility': {
            'vertical-align': 'middle',
        },
        'meta': {
            'group': 'verticalAlign',
            'order': 3,
        },
    },
    'align-bottom': {
        'utility': {
            'vertical-align': 'bottom',
        },
        'meta': {
            'group': 'verticalAlign',
            'order': 4,
        },
    },
    'align-text-top': {
        'utility': {
            'vertical-align': 'text-top',
        },
        'meta': {
            'group': 'verticalAlign',
            'order': 5,
        },
    },
    'align-text-bottom': {
        'utility': {
            'vertical-align': 'text-bottom',
        },
        'meta': {
            'group': 'verticalAlign',
            'order': 6,
        },
    },
    // https://tailwindcss.com/docs/whitespace
    'whitespace-normal': {
        'utility': {
            'white-space': 'normal',
        },
        'meta': {
            'group': 'whitespace',
            'order': 1,
        },
    },
    'whitespace-nowrap': {
        'utility': {
            'white-space': 'nowrap',
        },
        'meta': {
            'group': 'whitespace',
            'order': 2,
        },
    },
    'whitespace-pre': {
        'utility': {
            'white-space': 'pre',
        },
        'meta': {
            'group': 'whitespace',
            'order': 3,
        },
    },
    'whitespace-pre-line': {
        'utility': {
            'white-space': 'pre-line',
        },
        'meta': {
            'group': 'whitespace',
            'order': 4,
        },
    },
    'whitespace-pre-wrap': {
        'utility': {
            'white-space': 'pre-wrap',
        },
        'meta': {
            'group': 'whitespace',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/word-break
    'break-normal': {
        'utility': {
            'word-break': 'normal',
            'overflow-wrap': 'normal',
        },
        'meta': {
            'group': 'wordBreak',
            'order': 1,
        },
    },
    'break-words': {
        'utility': {
            'overflow-wrap': 'break-word',
        },
        'meta': {
            'group': 'wordBreak',
            'order': 2,
        },
    },
    'break-all': {
        'utility': {
            'word-break': 'break-all',
        },
        'meta': {
            'group': 'wordBreak',
            'order': 3,
        },
    },
    /**
     * ===========================================
     * Backgrounds
     */
    // https://tailwindcss.com/docs/background-attachment
    'bg-fixed': {
        'utility': {
            'background-attachment': 'fixed',
        },
        'meta': {
            'group': 'backgroundAttachment',
            'order': 1,
        },
    },
    'bg-local': {
        'utility': {
            'background-attachment': 'local',
        },
        'meta': {
            'group': 'backgroundAttachment',
            'order': 2,
        },
    },
    'bg-scroll': {
        'utility': {
            'background-attachment': 'scroll',
        },
        'meta': {
            'group': 'backgroundAttachment',
            'order': 3,
        },
    },
    // https://tailwindcss.com/docs/background-clip
    'bg-clip-border': {
        'utility': {
            '-webkit-background-clip': 'border-box',
            'background-clip': 'border-box',
        },
        'meta': {
            'group': 'backgroundClip',
            'order': 1,
        },
    },
    'bg-clip-padding': {
        'utility': {
            '-webkit-background-clip': 'padding-box',
            'background-clip': 'padding-box',
        },
        'meta': {
            'group': 'backgroundClip',
            'order': 2,
        },
    },
    'bg-clip-content': {
        'utility': {
            '-webkit-background-clip': 'content-box',
            'background-clip': 'content-box',
        },
        'meta': {
            'group': 'backgroundClip',
            'order': 3,
        },
    },
    'bg-clip-text': {
        'utility': {
            '-webkit-background-clip': 'text',
            'background-clip': 'text',
        },
        'meta': {
            'group': 'backgroundClip',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/background-color
    // https://tailwindcss.com/docs/background-opacity
    // https://tailwindcss.com/docs/background-position
    // See dynamic.ts
    // https://tailwindcss.com/docs/background-repeat
    'bg-repeat': {
        'utility': {
            'background-repeat': 'repeat',
        },
        'meta': {
            'group': 'backgroundRepeat',
            'order': 1,
        },
    },
    'bg-no-repeat': {
        'utility': {
            'background-repeat': 'no-repeat',
        },
        'meta': {
            'group': 'backgroundRepeat',
            'order': 2,
        },
    },
    'bg-repeat-x': {
        'utility': {
            'background-repeat': 'repeat-x',
        },
        'meta': {
            'group': 'backgroundRepeat',
            'order': 3,
        },
    },
    'bg-repeat-y': {
        'utility': {
            'background-repeat': 'repeat-y',
        },
        'meta': {
            'group': 'backgroundRepeat',
            'order': 4,
        },
    },
    'bg-repeat-round': {
        'utility': {
            'background-repeat': 'round',
        },
        'meta': {
            'group': 'backgroundRepeat',
            'order': 5,
        },
    },
    'bg-repeat-space': {
        'utility': {
            'background-repeat': 'space',
        },
        'meta': {
            'group': 'backgroundRepeat',
            'order': 6,
        },
    },
    // https://tailwindcss.com/docs/background-image
    // https://tailwindcss.com/docs/gradient-color-stops
    // See dynamic.ts
    /**
     * ===========================================
     * Borders
     */
    // https://tailwindcss.com/docs/border-radius
    // See dynamic.ts
    // https://tailwindcss.com/docs/border-width
    // See dynamic.ts
    // https://tailwindcss.com/docs/border-color
    // https://tailwindcss.com/docs/border-opacity
    // See dynamic.ts
    // https://tailwindcss.com/docs/border-style
    'border-solid': {
        'utility': {
            'border-style': 'solid',
        },
        'meta': {
            'group': 'borderStyle',
            'order': 1,
        },
    },
    'border-dashed': {
        'utility': {
            'border-style': 'dashed',
        },
        'meta': {
            'group': 'borderStyle',
            'order': 2,
        },
    },
    'border-dotted': {
        'utility': {
            'border-style': 'dotted',
        },
        'meta': {
            'group': 'borderStyle',
            'order': 3,
        },
    },
    'border-double': {
        'utility': {
            'border-style': 'double',
        },
        'meta': {
            'group': 'borderStyle',
            'order': 4,
        },
    },
    'border-none': {
        'utility': {
            'border-style': 'none',
        },
        'meta': {
            'group': 'borderStyle',
            'order': 5,
        },
    },
    // https://tailwindcss.com/docs/divide-width
    // https://tailwindcss.com/docs/divide-color
    // https://tailwindcss.com/docs/divide-opacity
    // See dynamic.ts
    // https://tailwindcss.com/docs/ring-width
    // https://tailwindcss.com/docs/ring-color
    // https://tailwindcss.com/docs/ring-opacity
    // https://tailwindcss.com/docs/ring-offset-width
    // https://tailwindcss.com/docs/ring-offset-color
    // dynamic
    /**
     * ===========================================
     * Effects
     */
    // https://tailwindcss.com/docs/box-shadow/
    // https://tailwindcss.com/docs/opacity
    // See dynamic.ts
    /**
     * ===========================================
     * Tables
     */
    // https://tailwindcss.com/docs/border-collapse
    'border-collapse': {
        'utility': {
            'border-collapse': 'collapse',
        },
        'meta': {
            'group': 'borderCollapse',
            'order': 1,
        },
    },
    'border-separate': {
        'utility': {
            'border-collapse': 'separate',
        },
        'meta': {
            'group': 'borderCollapse',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/table-layout
    'table-auto': {
        'utility': {
            'table-layout': 'auto',
        },
        'meta': {
            'group': 'tableLayout',
            'order': 1,
        },
    },
    'table-fixed': {
        'utility': {
            'table-layout': 'fixed',
        },
        'meta': {
            'group': 'tableLayout',
            'order': 2,
        },
    },
    /**
     * ===========================================
     * Transitions
     */
    // https://tailwindcss.com/docs/transition-property
    // https://tailwindcss.com/docs/transition-duration
    // https://tailwindcss.com/docs/transition-delay
    // https://tailwindcss.com/docs/transition-timing-function
    // See dynamic.ts
    /**
     * ===========================================
     * Transforms
     */
    // https://tailwindcss.com/docs/transform
    'transform': {
        'utility': {
            '--tw-translate-x': '0',
            '--tw-translate-y': '0',
            '--tw-rotate': '0',
            '--tw-skew-x': '0',
            '--tw-skew-y': '0',
            '--tw-scale-x': '1',
            '--tw-scale-y': '1',
            '-webkit-transform': 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))',
            '-ms-transform': 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))',
            'transform': 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))',
        },
        'meta': {
            'group': 'transform',
            'order': 1,
        },
    },
    'transform-gpu': {
        'utility': {
            '--tw-translate-x': '0',
            '--tw-translate-y': '0',
            '--tw-rotate': '0',
            '--tw-skew-x': '0',
            '--tw-skew-y': '0',
            '--tw-scale-x': '1',
            '--tw-scale-y': '1',
            '-webkit-transform': 'translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))',
            '-ms-transform': 'translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))',
            'transform': 'translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))',
        },
        'meta': {
            'group': 'transform',
            'order': 2,
        },
    },
    'transform-none': {
        'utility': {
            '-webkit-transform': 'none',
            '-ms-transform': 'none',
            'transform': 'none',
        },
        'meta': {
            'group': 'transform',
            'order': 3,
        },
    },
    // https://tailwindcss.com/docs/transform-origin
    // https://tailwindcss.com/docs/scale
    // https://tailwindcss.com/docs/rotate
    // https://tailwindcss.com/docs/translate
    // https://tailwindcss.com/docs/skew
    // See dynamic.ts
    /**
     * ===========================================
     * Interactivity
     */
    // https://tailwindcss.com/docs/appearance
    'appearance-none': {
        'utility': {
            '-webkit-appearance': 'none',
            '-moz-appearance': 'none',
            'appearance': 'none',
        },
        'meta': {
            'group': 'appearance',
            'order': 1,
        },
    },
    // https://tailwindcss.com/docs/cursor
    // https://tailwindcss.com/docs/outline
    // See dynamic.ts
    // https://tailwindcss.com/docs/pointer-events
    'pointer-events-none': {
        'utility': {
            'pointer-events': 'none',
        },
        'meta': {
            'group': 'pointerEvents',
            'order': 1,
        },
    },
    'pointer-events-auto': {
        'utility': {
            'pointer-events': 'auto',
        },
        'meta': {
            'group': 'pointerEvents',
            'order': 2,
        },
    },
    // https://tailwindcss.com/docs/resize
    'resize-none': {
        'utility': {
            'resize': 'none',
        },
        'meta': {
            'group': 'resize',
            'order': 1,
        },
    },
    'resize-y': {
        'utility': {
            'resize': 'vertical',
        },
        'meta': {
            'group': 'resize',
            'order': 2,
        },
    },
    'resize-x': {
        'utility': {
            'resize': 'horizontal',
        },
        'meta': {
            'group': 'resize',
            'order': 3,
        },
    },
    'resize': {
        'utility': {
            'resize': 'both',
        },
        'meta': {
            'group': 'resize',
            'order': 4,
        },
    },
    // https://tailwindcss.com/docs/user-select
    'select-none': {
        'utility': {
            '-webkit-user-select': 'none',
            '-moz-user-select': 'none',
            '-ms-user-select': 'none',
            'user-select': 'none',
        },
        'meta': {
            'group': 'userSelect',
            'order': 1,
        },
    },
    'select-text': {
        'utility': {
            '-webkit-user-select': 'text',
            '-moz-user-select': 'text',
            '-ms-user-select': 'text',
            'user-select': 'text',
        },
        'meta': {
            'group': 'userSelect',
            'order': 2,
        },
    },
    'select-all': {
        'utility': {
            '-webkit-user-select': 'all',
            '-moz-user-select': 'all',
            '-ms-user-select': 'all',
            'user-select': 'all',
        },
        'meta': {
            'group': 'userSelect',
            'order': 3,
        },
    },
    'select-auto': {
        'utility': {
            '-webkit-user-select': 'auto',
            '-moz-user-select': 'auto',
            '-ms-user-select': 'auto',
            'user-select': 'auto',
        },
        'meta': {
            'group': 'userSelect',
            'order': 4,
        },
    },
    /**
     * ===========================================
     * Svg
     */
    // https://tailwindcss.com/docs/fill
    // https://tailwindcss.com/docs/stroke
    // https://tailwindcss.com/docs/stroke-width
    'fill-current': {
        'utility': {
            'fill': 'currentColor',
        },
        'meta': {
            'group': 'fill',
            'order': 1,
        },
    },
    'stroke-current': {
        'utility': {
            'stroke': 'currentColor',
        },
        'meta': {
            'group': 'stroke',
            'order': 1,
        },
    },
    // See dynamic.ts
    /**
     * ===========================================
     * Accessibility
     */
    // https://tailwindcss.com/docs/screen-readers
    'sr-only': {
        'utility': {
            'position': 'absolute',
            'width': '1px',
            'height': '1px',
            'padding': '0',
            'margin': '-1px',
            'overflow': 'hidden',
            'clip': 'rect(0, 0, 0, 0)',
            'white-space': 'nowrap',
            'border-width': '0',
        },
        'meta': {
            'group': 'accessibility',
            'order': 1,
        },
    },
    'not-sr-only': {
        'utility': {
            'position': 'static',
            'width': 'auto',
            'height': 'auto',
            'padding': '0',
            'margin': '0',
            'overflow': 'visible',
            'clip': 'auto',
            'white-space': 'normal',
        },
        'meta': {
            'group': 'accessibility',
            'order': 2,
        },
    },
};

var colors = {
    black: '#000',
    white: '#fff',
    rose: {
        50: '#fff1f2',
        100: '#ffe4e6',
        200: '#fecdd3',
        300: '#fda4af',
        400: '#fb7185',
        500: '#f43f5e',
        600: '#e11d48',
        700: '#be123c',
        800: '#9f1239',
        900: '#881337',
    },
    pink: {
        50: '#fdf2f8',
        100: '#fce7f3',
        200: '#fbcfe8',
        300: '#f9a8d4',
        400: '#f472b6',
        500: '#ec4899',
        600: '#db2777',
        700: '#be185d',
        800: '#9d174d',
        900: '#831843',
    },
    fuchsia: {
        50: '#fdf4ff',
        100: '#fae8ff',
        200: '#f5d0fe',
        300: '#f0abfc',
        400: '#e879f9',
        500: '#d946ef',
        600: '#c026d3',
        700: '#a21caf',
        800: '#86198f',
        900: '#701a75',
    },
    purple: {
        50: '#faf5ff',
        100: '#f3e8ff',
        200: '#e9d5ff',
        300: '#d8b4fe',
        400: '#c084fc',
        500: '#a855f7',
        600: '#9333ea',
        700: '#7e22ce',
        800: '#6b21a8',
        900: '#581c87',
    },
    violet: {
        50: '#f5f3ff',
        100: '#ede9fe',
        200: '#ddd6fe',
        300: '#c4b5fd',
        400: '#a78bfa',
        500: '#8b5cf6',
        600: '#7c3aed',
        700: '#6d28d9',
        800: '#5b21b6',
        900: '#4c1d95',
    },
    indigo: {
        50: '#eef2ff',
        100: '#e0e7ff',
        200: '#c7d2fe',
        300: '#a5b4fc',
        400: '#818cf8',
        500: '#6366f1',
        600: '#4f46e5',
        700: '#4338ca',
        800: '#3730a3',
        900: '#312e81',
    },
    blue: {
        50: '#eff6ff',
        100: '#dbeafe',
        200: '#bfdbfe',
        300: '#93c5fd',
        400: '#60a5fa',
        500: '#3b82f6',
        600: '#2563eb',
        700: '#1d4ed8',
        800: '#1e40af',
        900: '#1e3a8a',
    },
    lightBlue: {
        50: '#f0f9ff',
        100: '#e0f2fe',
        200: '#bae6fd',
        300: '#7dd3fc',
        400: '#38bdf8',
        500: '#0ea5e9',
        600: '#0284c7',
        700: '#0369a1',
        800: '#075985',
        900: '#0c4a6e',
    },
    cyan: {
        50: '#ecfeff',
        100: '#cffafe',
        200: '#a5f3fc',
        300: '#67e8f9',
        400: '#22d3ee',
        500: '#06b6d4',
        600: '#0891b2',
        700: '#0e7490',
        800: '#155e75',
        900: '#164e63',
    },
    teal: {
        50: '#f0fdfa',
        100: '#ccfbf1',
        200: '#99f6e4',
        300: '#5eead4',
        400: '#2dd4bf',
        500: '#14b8a6',
        600: '#0d9488',
        700: '#0f766e',
        800: '#115e59',
        900: '#134e4a',
    },
    emerald: {
        50: '#ecfdf5',
        100: '#d1fae5',
        200: '#a7f3d0',
        300: '#6ee7b7',
        400: '#34d399',
        500: '#10b981',
        600: '#059669',
        700: '#047857',
        800: '#065f46',
        900: '#064e3b',
    },
    green: {
        50: '#f0fdf4',
        100: '#dcfce7',
        200: '#bbf7d0',
        300: '#86efac',
        400: '#4ade80',
        500: '#22c55e',
        600: '#16a34a',
        700: '#15803d',
        800: '#166534',
        900: '#14532d',
    },
    lime: {
        50: '#f7fee7',
        100: '#ecfccb',
        200: '#d9f99d',
        300: '#bef264',
        400: '#a3e635',
        500: '#84cc16',
        600: '#65a30d',
        700: '#4d7c0f',
        800: '#3f6212',
        900: '#365314',
    },
    yellow: {
        50: '#fefce8',
        100: '#fef9c3',
        200: '#fef08a',
        300: '#fde047',
        400: '#facc15',
        500: '#eab308',
        600: '#ca8a04',
        700: '#a16207',
        800: '#854d0e',
        900: '#713f12',
    },
    amber: {
        50: '#fffbeb',
        100: '#fef3c7',
        200: '#fde68a',
        300: '#fcd34d',
        400: '#fbbf24',
        500: '#f59e0b',
        600: '#d97706',
        700: '#b45309',
        800: '#92400e',
        900: '#78350f',
    },
    orange: {
        50: '#fff7ed',
        100: '#ffedd5',
        200: '#fed7aa',
        300: '#fdba74',
        400: '#fb923c',
        500: '#f97316',
        600: '#ea580c',
        700: '#c2410c',
        800: '#9a3412',
        900: '#7c2d12',
    },
    red: {
        50: '#fef2f2',
        100: '#fee2e2',
        200: '#fecaca',
        300: '#fca5a5',
        400: '#f87171',
        500: '#ef4444',
        600: '#dc2626',
        700: '#b91c1c',
        800: '#991b1b',
        900: '#7f1d1d',
    },
    warmGray: {
        50: '#fafaf9',
        100: '#f5f5f4',
        200: '#e7e5e4',
        300: '#d6d3d1',
        400: '#a8a29e',
        500: '#78716c',
        600: '#57534e',
        700: '#44403c',
        800: '#292524',
        900: '#1c1917',
    },
    trueGray: {
        50: '#fafafa',
        100: '#f5f5f5',
        200: '#e5e5e5',
        300: '#d4d4d4',
        400: '#a3a3a3',
        500: '#737373',
        600: '#525252',
        700: '#404040',
        800: '#262626',
        900: '#171717',
    },
    gray: {
        50: '#fafafa',
        100: '#f4f4f5',
        200: '#e4e4e7',
        300: '#d4d4d8',
        400: '#a1a1aa',
        500: '#71717a',
        600: '#52525b',
        700: '#3f3f46',
        800: '#27272a',
        900: '#18181b',
    },
    coolGray: {
        50: '#f9fafb',
        100: '#f3f4f6',
        200: '#e5e7eb',
        300: '#d1d5db',
        400: '#9ca3af',
        500: '#6b7280',
        600: '#4b5563',
        700: '#374151',
        800: '#1f2937',
        900: '#111827',
    },
    blueGray: {
        50: '#f8fafc',
        100: '#f1f5f9',
        200: '#e2e8f0',
        300: '#cbd5e1',
        400: '#94a3b8',
        500: '#64748b',
        600: '#475569',
        700: '#334155',
        800: '#1e293b',
        900: '#0f172a',
    },
};
var darkColors$1 = {
    black: '#000',
    white: '#181a1b',
    rose: {
        50: '#3b0004',
        100: '#430005',
        200: '#50020b',
        300: '#69020f',
        400: '#870417',
        500: '#a30924',
        600: '#b4173a',
        700: '#980e30',
        800: '#7f0e2e',
        900: '#6d0f2c',
    },
    pink: {
        50: '#340820',
        100: '#3c0725',
        200: '#4c062e',
        300: '#640739',
        400: '#840a4a',
        500: '#9c1055',
        600: '#ad1d5d',
        700: '#98134a',
        800: '#7e123e',
        900: '#691336',
    },
    fuchsia: {
        50: '#2f033a',
        100: '#330041',
        200: '#3f024e',
        300: '#550464',
        400: '#710681',
        500: '#8b0e9e',
        600: '#9a1ea9',
        700: '#82168c',
        800: '#6b1472',
        900: '#5a155e',
    },
    purple: {
        50: '#1b1d1e',
        100: '#1e2122',
        200: '#242728',
        300: '#2d3133',
        400: '#3f037c',
        500: '#510797',
        600: '#6111a9',
        700: '#651ba5',
        800: '#561a86',
        900: '#46166c',
    },
    violet: {
        50: '#1b1e1f',
        100: '#1e2122',
        200: '#242728',
        300: '#2d3133',
        400: '#220576',
        500: '#320892',
        600: '#460fa5',
        700: '#561eac',
        800: '#491a92',
        900: '#3d1777',
    },
    indigo: {
        50: '#1d1f20',
        100: '#212325',
        200: '#282b2d',
        300: '#323639',
        400: '#07127c',
        500: '#0d0f8c',
        600: '#1d169c',
        700: '#332ba0',
        800: '#2c2682',
        900: '#272567',
    },
    blue: {
        50: '#1d1f20',
        100: '#222527',
        200: '#2a2e30',
        300: '#023773',
        400: '#054391',
        500: '#0844a6',
        600: '#1043b2',
        700: '#173ead',
        800: '#18338c',
        900: '#182e6e',
    },
    lightBlue: {
        50: '#1c1f20',
        100: '#212425',
        200: '#2c3032',
        300: '#035880',
        400: '#0677a9',
        500: '#0b84ba',
        600: '#026a9f',
        700: '#025481',
        800: '#06476a',
        900: '#0a3b58',
    },
    cyan: {
        50: '#003b3e',
        100: '#02484f',
        200: '#035d67',
        300: '#067d8c',
        400: '#0e9eb4',
        500: '#0592aa',
        600: '#06748e',
        700: '#0b5d73',
        800: '#114b54',
        900: '#123e4f',
    },
    teal: {
        50: '#07362e',
        100: '#064e42',
        200: '#0a6c5e',
        300: '#128e7f',
        400: '#22a89c',
        500: '#109385',
        600: '#0a766d',
        700: '#0c5e58',
        800: '#0e4b47',
        900: '#0f3e3b',
    },
    emerald: {
        50: '#063a27',
        100: '#084a30',
        200: '#0d6245',
        300: '#168362',
        400: '#23a481',
        500: '#0d9467',
        600: '#047854',
        700: '#036046',
        800: '#054c38',
        900: '#053e2f',
    },
    green: {
        50: '#07361e',
        100: '#064425',
        200: '#0a5631',
        300: '#107645',
        400: '#1c985d',
        500: '#1b9e4b',
        600: '#12823b',
        700: '#116631',
        800: '#12512a',
        900: '#104224',
    },
    lime: {
        50: '#313f03',
        100: '#3d4f05',
        200: '#516b07',
        300: '#698c0c',
        400: '#7da715',
        500: '#6aa312',
        600: '#51820a',
        700: '#3e630c',
        800: '#324e0e',
        900: '#2b4210',
    },
    yellow: {
        50: '#3f3903',
        100: '#564f01',
        200: '#796a01',
        300: '#a18702',
        400: '#be9904',
        500: '#bb8f06',
        600: '#a26e03',
        700: '#814e06',
        800: '#6a3e0b',
        900: '#5a320e',
    },
    amber: {
        50: '#3f3200',
        100: '#544301',
        200: '#786102',
        300: '#9d7903',
        400: '#b58403',
        500: '#c37e08',
        600: '#ae5f05',
        700: '#904207',
        800: '#75330b',
        900: '#602a0c',
    },
    orange: {
        50: '#3e2200',
        100: '#4c2c00',
        200: '#653701',
        300: '#864502',
        400: '#a74d03',
        500: '#be5105',
        600: '#bb460a',
        700: '#9b340a',
        800: '#7b2a04',
        900: '#63240e',
    },
    red: {
        50: '#370404',
        100: '#430202',
        200: '#520202',
        300: '#670303',
        400: '#860707',
        500: '#9f0e0e',
        600: '#ae1c1c',
        700: '#941616',
        800: '#7a1616',
        900: '#661717',
    },
    warmGray: {
        50: '#1b1d1e',
        100: '#1e2022',
        200: '#262a2b',
        300: '#313537',
        400: '#4c5255',
        500: '#565d61',
        600: '#3e4346',
        700: '#303436',
        800: '#1d1f21',
        900: '#131516',
    },
    trueGray: {
        50: '#1b1d1e',
        100: '#1e2021',
        200: '#272a2c',
        300: '#303436',
        400: '#4c5255',
        500: '#575e61',
        600: '#3e4345',
        700: '#303436',
        800: '#1d1f20',
        900: '#111313',
    },
    gray: {
        50: '#1b1d1e',
        100: '#1e2022',
        200: '#262a2b',
        300: '#2f3335',
        400: '#4b5154',
        500: '#586064',
        600: '#414749',
        700: '#323638',
        800: '#1e2122',
        900: '#131516',
    },
    coolGray: {
        50: '#1b1d1e',
        100: '#1e2022',
        200: '#25282a',
        300: '#2f3335',
        400: '#eb5154',
        500: '#586064',
        600: '#3c444f',
        700: '#2c3441',
        800: '#19212c',
        900: '#0e131f',
    },
    blueGray: {
        50: '#1b1d1e',
        100: '#1e2022',
        200: '#242729',
        300: '#2f3335',
        400: '#3f4c5f',
        500: '#505d6f',
        600: '#394454',
        700: '#293444',
        800: '#18212f',
        900: '#0c1222',
    },
};

var lightColors = {
    transparent: 'transparent',
    current: 'currentColor',
    black: colors.black,
    white: colors.white,
    gray: colors.coolGray,
    red: colors.red,
    yellow: colors.amber,
    green: colors.emerald,
    blue: colors.blue,
    indigo: colors.indigo,
    purple: colors.violet,
    pink: colors.pink,
    rose: colors.rose,
    fuchsia: colors.fuchsia,
    violet: colors.violet,
    cyan: colors.cyan,
    teal: colors.teal,
    emerald: colors.emerald,
    lime: colors.lime,
    amber: colors.amber,
    orange: colors.orange,
    'light-blue': colors.lightBlue,
    'warm-gray': colors.warmGray,
    'true-gray': colors.trueGray,
    'cool-gray': colors.coolGray,
    'blue-gray': colors.blueGray,
};
var darkColors = {
    transparent: 'transparent',
    current: 'currentColor',
    black: darkColors$1.black,
    white: darkColors$1.white,
    gray: darkColors$1.coolGray,
    red: darkColors$1.red,
    yellow: darkColors$1.amber,
    green: darkColors$1.emerald,
    blue: darkColors$1.blue,
    indigo: darkColors$1.indigo,
    purple: darkColors$1.violet,
    pink: darkColors$1.pink,
    rose: darkColors$1.rose,
    fuchsia: darkColors$1.fuchsia,
    violet: darkColors$1.violet,
    cyan: darkColors$1.cyan,
    teal: darkColors$1.teal,
    emerald: darkColors$1.emerald,
    lime: darkColors$1.lime,
    amber: darkColors$1.amber,
    orange: darkColors$1.orange,
    'light-blue': darkColors$1.lightBlue,
    'warm-gray': darkColors$1.warmGray,
    'true-gray': darkColors$1.trueGray,
    'cool-gray': darkColors$1.coolGray,
    'blue-gray': darkColors$1.blueGray,
};
var defaultColors = combineObject(lightColors, darkColors);
var baseConfig = {
    // purge: [],
    presets: [],
    prefixer: true,
    darkMode: 'class',
    theme: {
        screens: {
            sm: '640px',
            md: '768px',
            lg: '1024px',
            xl: '1280px',
            '2xl': '1536px',
        },
        colors: defaultColors,
        spacing: {
            px: '1px',
            0: '0px',
            0.5: '0.125rem',
            1: '0.25rem',
            1.5: '0.375rem',
            2: '0.5rem',
            2.5: '0.625rem',
            3: '0.75rem',
            3.5: '0.875rem',
            4: '1rem',
            5: '1.25rem',
            6: '1.5rem',
            7: '1.75rem',
            8: '2rem',
            9: '2.25rem',
            10: '2.5rem',
            11: '2.75rem',
            12: '3rem',
            14: '3.5rem',
            16: '4rem',
            20: '5rem',
            24: '6rem',
            28: '7rem',
            32: '8rem',
            36: '9rem',
            40: '10rem',
            44: '11rem',
            48: '12rem',
            52: '13rem',
            56: '14rem',
            60: '15rem',
            64: '16rem',
            72: '18rem',
            80: '20rem',
            96: '24rem',
            // float -> float/4 rem
        },
        animation: {
            none: 'none',
            spin: 'spin 1s linear infinite',
            ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
            pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
            bounce: 'bounce 1s infinite',
        },
        backgroundColor: function (theme) { return theme('colors'); },
        backgroundImage: {
            none: 'none',
            'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',
            'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',
            'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',
            'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',
            'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',
            'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',
            'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',
            'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',
        },
        backgroundOpacity: function (theme) { return theme('opacity'); },
        backgroundPosition: {
            bottom: 'bottom',
            center: 'center',
            left: 'left',
            'left-bottom': 'left bottom',
            'left-top': 'left top',
            right: 'right',
            'right-bottom': 'right bottom',
            'right-top': 'right top',
            top: 'top',
        },
        backgroundSize: {
            auto: 'auto',
            cover: 'cover',
            contain: 'contain',
        },
        borderColor: function (theme) {
            var _a;
            return (__assign(__assign({}, ((_a = theme('colors')) !== null && _a !== void 0 ? _a : {})), { DEFAULT: theme('colors.gray.200', 'currentColor') }));
        },
        borderOpacity: function (theme) { return theme('opacity'); },
        borderRadius: {
            none: '0px',
            sm: '0.125rem',
            DEFAULT: '0.25rem',
            md: '0.375rem',
            lg: '0.5rem',
            xl: '0.75rem',
            '2xl': '1rem',
            '3xl': '1.5rem',
            // nxl
            '1': '100%',
            full: '9999px',
        },
        borderWidth: {
            DEFAULT: '1px',
            0: '0px',
            2: '2px',
            4: '4px',
            8: '8px',
            // int >=0 -> int px
        },
        boxShadow: {
            sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
            DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
            md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
            lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
            xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
            '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
            inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
            none: 'none',
        },
        container: {},
        cursor: {
            auto: 'auto',
            default: 'default',
            pointer: 'pointer',
            wait: 'wait',
            text: 'text',
            move: 'move',
            help: 'help',
            'not-allowed': 'not-allowed',
        },
        divideColor: function (theme) { return theme('borderColor'); },
        divideOpacity: function (theme) { return theme('borderOpacity'); },
        divideWidth: function (theme) { return theme('borderWidth'); },
        fill: function (theme) { return theme('colors'); },
        flex: {
            1: '1 1 0%',
            auto: '1 1 auto',
            initial: '0 1 auto',
            none: 'none',
        },
        flexGrow: {
            0: '0',
            DEFAULT: '1',
        },
        flexShrink: {
            0: '0',
            DEFAULT: '1',
        },
        fontFamily: {
            sans: [
                'ui-sans-serif',
                'system-ui',
                '-apple-system',
                'BlinkMacSystemFont',
                '"Segoe UI"',
                'Roboto',
                '"Helvetica Neue"',
                'Arial',
                '"Noto Sans"',
                'sans-serif',
                '"Apple Color Emoji"',
                '"Segoe UI Emoji"',
                '"Segoe UI Symbol"',
                '"Noto Color Emoji"',
            ],
            serif: [
                'ui-serif',
                'Georgia',
                'Cambria',
                '"Times New Roman"',
                'Times',
                'serif',
            ],
            mono: [
                'ui-monospace',
                'SFMono-Regular',
                'Menlo',
                'Monaco',
                'Consolas',
                '"Liberation Mono"',
                '"Courier New"',
                'monospace',
            ],
        },
        fontSize: {
            xs: ['0.75rem', { lineHeight: '1rem' }],
            sm: ['0.875rem', { lineHeight: '1.25rem' }],
            base: ['1rem', { lineHeight: '1.5rem' }],
            lg: ['1.125rem', { lineHeight: '1.75rem' }],
            xl: ['1.25rem', { lineHeight: '1.75rem' }],
            '2xl': ['1.5rem', { lineHeight: '2rem' }],
            '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
            '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
            '5xl': ['3rem', { lineHeight: '1' }],
            '6xl': ['3.75rem', { lineHeight: '1' }],
            '7xl': ['4.5rem', { lineHeight: '1' }],
            '8xl': ['6rem', { lineHeight: '1' }],
            '9xl': ['8rem', { lineHeight: '1' }],
            // nxl -> [n rem, lineHeight: 1]
        },
        fontWeight: {
            thin: '100',
            extralight: '200',
            light: '300',
            normal: '400',
            medium: '500',
            semibold: '600',
            bold: '700',
            extrabold: '800',
            black: '900',
            // int[0, 900] -> int
        },
        gap: function (theme) { return theme('spacing'); },
        gradientColorStops: function (theme) { return theme('colors'); },
        gridAutoColumns: {
            auto: 'auto',
            min: 'min-content',
            max: 'max-content',
            fr: 'minmax(0, 1fr)',
        },
        gridAutoRows: {
            auto: 'auto',
            min: 'min-content',
            max: 'max-content',
            fr: 'minmax(0, 1fr)',
        },
        gridColumn: {
            auto: 'auto',
            'span-1': 'span 1 / span 1',
            'span-2': 'span 2 / span 2',
            'span-3': 'span 3 / span 3',
            'span-4': 'span 4 / span 4',
            'span-5': 'span 5 / span 5',
            'span-6': 'span 6 / span 6',
            'span-7': 'span 7 / span 7',
            'span-8': 'span 8 / span 8',
            'span-9': 'span 9 / span 9',
            'span-10': 'span 10 / span 10',
            'span-11': 'span 11 / span 11',
            'span-12': 'span 12 / span 12',
            // span-int(>=1) -> span int / span int
            'span-full': '1 / -1',
        },
        gridColumnEnd: {
            auto: 'auto',
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            10: '10',
            11: '11',
            12: '12',
            13: '13',
            // int >=1 -> int
        },
        gridColumnStart: {
            auto: 'auto',
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            10: '10',
            11: '11',
            12: '12',
            13: '13',
            // int >=1 -> int
        },
        gridRow: {
            auto: 'auto',
            'span-1': 'span 1 / span 1',
            'span-2': 'span 2 / span 2',
            'span-3': 'span 3 / span 3',
            'span-4': 'span 4 / span 4',
            'span-5': 'span 5 / span 5',
            'span-6': 'span 6 / span 6',
            // span-int(>=1) -> span int / span int
            'span-full': '1 / -1',
        },
        gridRowStart: {
            auto: 'auto',
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            // int >=1 -> int
        },
        gridRowEnd: {
            auto: 'auto',
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            // int >=1 -> int
        },
        transformOrigin: {
            center: 'center',
            top: 'top',
            'top-right': 'top right',
            right: 'right',
            'bottom-right': 'bottom right',
            bottom: 'bottom',
            'bottom-left': 'bottom left',
            left: 'left',
            'top-left': 'top left',
        },
        gridTemplateColumns: {
            none: 'none',
            1: 'repeat(1, minmax(0, 1fr))',
            2: 'repeat(2, minmax(0, 1fr))',
            3: 'repeat(3, minmax(0, 1fr))',
            4: 'repeat(4, minmax(0, 1fr))',
            5: 'repeat(5, minmax(0, 1fr))',
            6: 'repeat(6, minmax(0, 1fr))',
            7: 'repeat(7, minmax(0, 1fr))',
            8: 'repeat(8, minmax(0, 1fr))',
            9: 'repeat(9, minmax(0, 1fr))',
            10: 'repeat(10, minmax(0, 1fr))',
            11: 'repeat(11, minmax(0, 1fr))',
            12: 'repeat(12, minmax(0, 1fr))',
            // int >=1 -> repeat(int, minmax(0, 1fr))
        },
        gridTemplateRows: {
            none: 'none',
            1: 'repeat(1, minmax(0, 1fr))',
            2: 'repeat(2, minmax(0, 1fr))',
            3: 'repeat(3, minmax(0, 1fr))',
            4: 'repeat(4, minmax(0, 1fr))',
            5: 'repeat(5, minmax(0, 1fr))',
            6: 'repeat(6, minmax(0, 1fr))',
            // int >=1 -> repeat(int, minmax(0, 1fr))
        },
        height: function (theme, _a) {
            var _b, _c;
            var breakpoints = _a.breakpoints;
            return (__assign(__assign(__assign({ auto: 'auto' }, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), { '1/2': '50%', '1/3': '33.333333%', '2/3': '66.666667%', '1/4': '25%', '2/4': '50%', '3/4': '75%', '1/5': '20%', '2/5': '40%', '3/5': '60%', '4/5': '80%', '1/6': '16.666667%', '2/6': '33.333333%', '3/6': '50%', '4/6': '66.666667%', '5/6': '83.333333%', 
                // fraction -> percent
                xs: '20rem', sm: '24rem', md: '28rem', lg: '32rem', xl: '36rem', '2xl': '42rem', '3xl': '48rem', '4xl': '56rem', '5xl': '64rem', '6xl': '72rem', '7xl': '80rem', 
                // nxl
                full: '100%', min: 'min-content', max: 'max-content', prose: '65ch', screen: '100vh' }), breakpoints((_c = theme('screens')) !== null && _c !== void 0 ? _c : {})));
        },
        inset: function (theme, _a) {
            var _b;
            var negative = _a.negative;
            return (__assign(__assign(__assign({ auto: 'auto' }, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), negative(theme('spacing'))), { '1/2': '50%', '1/3': '33.333333%', '2/3': '66.666667%', '1/4': '25%', '2/4': '50%', '3/4': '75%', full: '100%', '-1/2': '-50%', '-1/3': '-33.333333%', '-2/3': '-66.666667%', '-1/4': '-25%', '-2/4': '-50%', '-3/4': '-75%', '-full': '-100%' }));
        },
        keyframes: {
            spin: {
                from: {
                    transform: 'rotate(0deg)',
                },
                to: {
                    transform: 'rotate(360deg)',
                },
            },
            ping: {
                '0%': {
                    transform: 'scale(1)',
                    opacity: '1',
                },
                '75%, 100%': {
                    transform: 'scale(2)',
                    opacity: '0',
                },
            },
            pulse: {
                '0%, 100%': {
                    opacity: '1',
                },
                '50%': {
                    opacity: '.5',
                },
            },
            bounce: {
                '0%, 100%': {
                    transform: 'translateY(-25%)',
                    animationTimingFunction: 'cubic-bezier(0.8,0,1,1)',
                },
                '50%': {
                    transform: 'translateY(0)',
                    animationTimingFunction: 'cubic-bezier(0,0,0.2,1)',
                },
            },
        },
        letterSpacing: {
            tighter: '-0.05em',
            tight: '-0.025em',
            normal: '0em',
            wide: '0.025em',
            wider: '0.05em',
            widest: '0.1em',
        },
        lineHeight: {
            none: '1',
            tight: '1.25',
            snug: '1.375',
            normal: '1.5',
            relaxed: '1.625',
            loose: '2',
            3: '.75rem',
            4: '1rem',
            5: '1.25rem',
            6: '1.5rem',
            7: '1.75rem',
            8: '2rem',
            9: '2.25rem',
            10: '2.5rem',
            // int>=0 -> int/4 rem
        },
        listStyleType: {
            none: 'none',
            disc: 'disc',
            decimal: 'decimal',
            square: 'square',
            roman: 'upper-roman',
        },
        margin: function (theme, _a) {
            var _b;
            var negative = _a.negative;
            return (__assign(__assign({ auto: 'auto' }, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), negative(theme('spacing'))));
        },
        maxHeight: function (theme, _a) {
            var _b, _c;
            var breakpoints = _a.breakpoints;
            return (__assign(__assign(__assign({ none: 'none' }, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), { xs: '20rem', sm: '24rem', md: '28rem', lg: '32rem', xl: '36rem', '2xl': '42rem', '3xl': '48rem', '4xl': '56rem', '5xl': '64rem', '6xl': '72rem', '7xl': '80rem', 
                // nxl
                full: '100%', min: 'min-content', max: 'max-content', prose: '65ch', screen: '100vh' }), breakpoints((_c = theme('screens')) !== null && _c !== void 0 ? _c : {})));
        },
        maxWidth: function (theme, _a) {
            var _b, _c;
            var breakpoints = _a.breakpoints;
            return (__assign(__assign(__assign({ none: 'none' }, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), { xs: '20rem', sm: '24rem', md: '28rem', lg: '32rem', xl: '36rem', '2xl': '42rem', '3xl': '48rem', '4xl': '56rem', '5xl': '64rem', '6xl': '72rem', '7xl': '80rem', 
                // nxl
                full: '100%', min: 'min-content', max: 'max-content', prose: '65ch', screen: '100vw' }), breakpoints((_c = theme('screens')) !== null && _c !== void 0 ? _c : {})));
        },
        minHeight: function (theme) { return theme('maxHeight'); },
        minWidth: function (theme) { return theme('maxWidth'); },
        objectPosition: {
            bottom: 'bottom',
            center: 'center',
            left: 'left',
            'left-bottom': 'left bottom',
            'left-top': 'left top',
            right: 'right',
            'right-bottom': 'right bottom',
            'right-top': 'right top',
            top: 'top',
        },
        opacity: {
            0: '0',
            5: '0.05',
            10: '0.1',
            20: '0.2',
            25: '0.25',
            30: '0.3',
            40: '0.4',
            50: '0.5',
            60: '0.6',
            70: '0.7',
            75: '0.75',
            80: '0.8',
            90: '0.9',
            95: '0.95',
            100: '1',
            // float -> float/100
        },
        order: {
            first: '-9999',
            last: '9999',
            none: '0',
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            10: '10',
            11: '11',
            12: '12',
            // int[1, 9999]
        },
        outline: {
            none: ['2px solid transparent', '2px'],
            // white: ['2px dotted white', '2px'],
            // black: ['2px dotted black', '2px'],
        },
        outlineColor: function (theme) { return theme('colors'); },
        padding: function (theme) { return theme('spacing'); },
        placeholderColor: function (theme) { return theme('colors'); },
        placeholderOpacity: function (theme) { return theme('opacity'); },
        ringColor: function (theme) {
            var _a;
            return (__assign({ DEFAULT: theme('colors.blue.500', '#3b82f6') }, ((_a = theme('colors')) !== null && _a !== void 0 ? _a : {})));
        },
        ringOffsetColor: function (theme) { return theme('colors'); },
        ringOffsetWidth: {
            0: '0px',
            1: '1px',
            2: '2px',
            4: '4px',
            8: '8px',
            // float -> float px
        },
        ringOpacity: function (theme) {
            var _a;
            return (__assign({ DEFAULT: '0.5' }, ((_a = theme('opacity')) !== null && _a !== void 0 ? _a : {})));
        },
        ringWidth: {
            DEFAULT: '3px',
            0: '0px',
            1: '1px',
            2: '2px',
            4: '4px',
            8: '8px',
            // float -> float px
        },
        rotate: {
            '-180': '-180deg',
            '-90': '-90deg',
            '-45': '-45deg',
            '-12': '-12deg',
            '-6': '-6deg',
            '-3': '-3deg',
            '-2': '-2deg',
            '-1': '-1deg',
            0: '0deg',
            1: '1deg',
            2: '2deg',
            3: '3deg',
            6: '6deg',
            12: '12deg',
            45: '45deg',
            90: '90deg',
            180: '180deg',
            // float[0, 360] -> float[0deg, 360deg]
            // ...negative
        },
        scale: {
            0: '0',
            50: '.5',
            75: '.75',
            90: '.9',
            95: '.95',
            100: '1',
            105: '1.05',
            110: '1.1',
            125: '1.25',
            150: '1.5',
            // int >=0 -> int/100
        },
        skew: {
            '-12': '-12deg',
            '-6': '-6deg',
            '-3': '-3deg',
            '-2': '-2deg',
            '-1': '-1deg',
            0: '0deg',
            1: '1deg',
            2: '2deg',
            3: '3deg',
            6: '6deg',
            12: '12deg',
            // float[0, 360] -> float[0deg, 360deg]
            // ...negative
        },
        space: function (theme, _a) {
            var negative = _a.negative;
            return (__assign(__assign({}, theme('spacing')), negative(theme('spacing'))));
        },
        stroke: function (theme) { return theme('colors'); },
        strokeWidth: {
            0: '0',
            1: '1',
            2: '2',
            // >=0 int -> int
        },
        textColor: function (theme) { return theme('colors'); },
        textOpacity: function (theme) { return theme('opacity'); },
        transitionDuration: {
            DEFAULT: '150ms',
            75: '75ms',
            100: '100ms',
            150: '150ms',
            200: '200ms',
            300: '300ms',
            500: '500ms',
            700: '700ms',
            1000: '1000ms',
            // int >=0 -> int ms
        },
        transitionDelay: {
            75: '75ms',
            100: '100ms',
            150: '150ms',
            200: '200ms',
            300: '300ms',
            500: '500ms',
            700: '700ms',
            1000: '1000ms',
            // int >=0 -> int ms
        },
        transitionProperty: {
            none: 'none',
            all: 'all',
            DEFAULT: 'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform',
            colors: 'background-color, border-color, color, fill, stroke',
            opacity: 'opacity',
            shadow: 'box-shadow',
            transform: 'transform',
        },
        transitionTimingFunction: {
            DEFAULT: 'cubic-bezier(0.4, 0, 0.2, 1)',
            linear: 'linear',
            in: 'cubic-bezier(0.4, 0, 1, 1)',
            out: 'cubic-bezier(0, 0, 0.2, 1)',
            'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
        },
        translate: function (theme, _a) {
            var _b;
            var negative = _a.negative;
            return (__assign(__assign(__assign({}, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), negative(theme('spacing'))), { '1/2': '50%', '1/3': '33.333333%', '2/3': '66.666667%', '1/4': '25%', '2/4': '50%', '3/4': '75%', full: '100%', '-1/2': '-50%', '-1/3': '-33.333333%', '-2/3': '-66.666667%', '-1/4': '-25%', '-2/4': '-50%', '-3/4': '-75%', '-full': '-100%' }));
        },
        width: function (theme, _a) {
            var _b, _c;
            var breakpoints = _a.breakpoints;
            return (__assign(__assign(__assign({ auto: 'auto' }, ((_b = theme('spacing')) !== null && _b !== void 0 ? _b : {})), { 
                // fraction -> percent
                '1/2': '50%', '1/3': '33.333333%', '2/3': '66.666667%', '1/4': '25%', '2/4': '50%', '3/4': '75%', '1/5': '20%', '2/5': '40%', '3/5': '60%', '4/5': '80%', '1/6': '16.666667%', '2/6': '33.333333%', '3/6': '50%', '4/6': '66.666667%', '5/6': '83.333333%', '1/12': '8.333333%', '2/12': '16.666667%', '3/12': '25%', '4/12': '33.333333%', '5/12': '41.666667%', '6/12': '50%', '7/12': '58.333333%', '8/12': '66.666667%', '9/12': '75%', '10/12': '83.333333%', '11/12': '91.666667%', xs: '20rem', sm: '24rem', md: '28rem', lg: '32rem', xl: '36rem', '2xl': '42rem', '3xl': '48rem', '4xl': '56rem', '5xl': '64rem', '6xl': '72rem', '7xl': '80rem', 
                // nxl
                full: '100%', min: 'min-content', max: 'max-content', prose: '65ch', screen: '100vw' }), breakpoints((_c = theme('screens')) !== null && _c !== void 0 ? _c : {})));
        },
        zIndex: {
            auto: 'auto',
            0: '0',
            10: '10',
            20: '20',
            30: '30',
            40: '40',
            50: '50',
            // int[0, 99999] ->  int[0, 99999]
            // ...negative
        },
    },
    variantOrder: [
        'hover',
        'focus',
        'active',
        'visited',
        'link',
        'target',
        'focus-visible',
        'focus-within',
        'checked',
        'not-checked',
        'default',
        'disabled',
        'enabled',
        'indeterminate',
        'invalid',
        'valid',
        'optional',
        'required',
        'placeholder-shown',
        'read-only',
        'read-write',
        'not-disabled',
        'first-of-type',
        'not-first-of-type',
        'last-of-type',
        'not-last-of-type',
        'first',
        'last',
        'not-first',
        'not-last',
        'only-child',
        'not-only-child',
        'only-of-type',
        'not-only-of-type',
        'even',
        'odd',
        'even-of-type',
        'odd-of-type',
        'root',
        'empty',
        'before',
        'after',
        'first-letter',
        'first-line',
        'selection',
        'svg',
        'all',
        'all-child',
        'sibling',
        'ltr',
        'rtl',
        'group-hover',
        'group-focus',
        'group-active',
        'group-visited',
        'motion-safe',
        'motion-reduce',
    ],
    // variants: {
    //   accessibility: ['responsive', 'focus-within', 'focus'],
    //   alignContent: ['responsive'],
    //   alignItems: ['responsive'],
    //   alignSelf: ['responsive'],
    //   animation: ['responsive'],
    //   appearance: ['responsive'],
    //   backgroundAttachment: ['responsive'],
    //   backgroundClip: ['responsive'],
    //   backgroundColor: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   backgroundImage: ['responsive'],
    //   backgroundOpacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   backgroundPosition: ['responsive'],
    //   backgroundRepeat: ['responsive'],
    //   backgroundSize: ['responsive'],
    //   borderCollapse: ['responsive'],
    //   borderColor: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   borderOpacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   borderRadius: ['responsive'],
    //   borderStyle: ['responsive'],
    //   borderWidth: ['responsive'],
    //   boxShadow: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   boxSizing: ['responsive'],
    //   clear: ['responsive'],
    //   container: ['responsive'],
    //   cursor: ['responsive'],
    //   display: ['responsive'],
    //   divideColor: ['responsive', 'dark'],
    //   divideOpacity: ['responsive'],
    //   divideStyle: ['responsive'],
    //   divideWidth: ['responsive'],
    //   fill: ['responsive'],
    //   flex: ['responsive'],
    //   flexDirection: ['responsive'],
    //   flexGrow: ['responsive'],
    //   flexShrink: ['responsive'],
    //   flexWrap: ['responsive'],
    //   float: ['responsive'],
    //   fontFamily: ['responsive'],
    //   fontSize: ['responsive'],
    //   fontSmoothing: ['responsive'],
    //   fontStyle: ['responsive'],
    //   fontVariantNumeric: ['responsive'],
    //   fontWeight: ['responsive'],
    //   gap: ['responsive'],
    //   gradientColorStops: ['responsive', 'dark', 'hover', 'focus'],
    //   gridAutoColumns: ['responsive'],
    //   gridAutoFlow: ['responsive'],
    //   gridAutoRows: ['responsive'],
    //   gridColumn: ['responsive'],
    //   gridColumnEnd: ['responsive'],
    //   gridColumnStart: ['responsive'],
    //   gridRow: ['responsive'],
    //   gridRowEnd: ['responsive'],
    //   gridRowStart: ['responsive'],
    //   gridTemplateColumns: ['responsive'],
    //   gridTemplateRows: ['responsive'],
    //   height: ['responsive'],
    //   inset: ['responsive'],
    //   justifyContent: ['responsive'],
    //   justifyItems: ['responsive'],
    //   justifySelf: ['responsive'],
    //   letterSpacing: ['responsive'],
    //   lineHeight: ['responsive'],
    //   listStylePosition: ['responsive'],
    //   listStyleType: ['responsive'],
    //   margin: ['responsive'],
    //   maxHeight: ['responsive'],
    //   maxWidth: ['responsive'],
    //   minHeight: ['responsive'],
    //   minWidth: ['responsive'],
    //   objectFit: ['responsive'],
    //   objectPosition: ['responsive'],
    //   opacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   order: ['responsive'],
    //   outline: ['responsive', 'focus-within', 'focus'],
    //   overflow: ['responsive'],
    //   overscrollBehavior: ['responsive'],
    //   padding: ['responsive'],
    //   placeContent: ['responsive'],
    //   placeItems: ['responsive'],
    //   placeSelf: ['responsive'],
    //   placeholderColor: ['responsive', 'dark', 'focus'],
    //   placeholderOpacity: ['responsive', 'focus'],
    //   pointerEvents: ['responsive'],
    //   position: ['responsive'],
    //   resize: ['responsive'],
    //   ringColor: ['responsive', 'dark', 'focus-within', 'focus'],
    //   ringOffsetColor: ['responsive', 'dark', 'focus-within', 'focus'],
    //   ringOffsetWidth: ['responsive', 'focus-within', 'focus'],
    //   ringOpacity: ['responsive', 'focus-within', 'focus'],
    //   ringWidth: ['responsive', 'focus-within', 'focus'],
    //   rotate: ['responsive', 'hover', 'focus'],
    //   scale: ['responsive', 'hover', 'focus'],
    //   skew: ['responsive', 'hover', 'focus'],
    //   space: ['responsive'],
    //   stroke: ['responsive'],
    //   strokeWidth: ['responsive'],
    //   tableLayout: ['responsive'],
    //   textAlign: ['responsive'],
    //   textColor: ['responsive', 'dark', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   textDecoration: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   textOpacity: ['responsive', 'group-hover', 'focus-within', 'hover', 'focus'],
    //   textOverflow: ['responsive'],
    //   textTransform: ['responsive'],
    //   transform: ['responsive'],
    //   transformOrigin: ['responsive'],
    //   transitionDelay: ['responsive'],
    //   transitionDuration: ['responsive'],
    //   transitionProperty: ['responsive'],
    //   transitionTimingFunction: ['responsive'],
    //   translate: ['responsive', 'hover', 'focus'],
    //   userSelect: ['responsive'],
    //   verticalAlign: ['responsive'],
    //   visibility: ['responsive'],
    //   whitespace: ['responsive'],
    //   width: ['responsive'],
    //   wordBreak: ['responsive'],
    //   zIndex: ['responsive', 'focus-within', 'focus'],
    // },
    plugins: [],
};

// https://drafts.csswg.org/cssom/#serialize-an-identifier
function cssEscape(str) {
    var length = str.length;
    var index = -1;
    var codeUnit;
    var result = '';
    var firstCodeUnit = str.charCodeAt(0);
    while (++index < length) {
        codeUnit = str.charCodeAt(index);
        // Note: there’s no need to special-case astral symbols, surrogate
        // pairs, or lone surrogates.
        // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
        // (U+FFFD).
        if (codeUnit === 0x0000) {
            result += '\uFFFD';
            continue;
        }
        // Comma
        if (codeUnit === 44) {
            result += '\\2c ';
            continue;
        }
        if (
        // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
        // U+007F, […]
        (codeUnit >= 0x0001 && codeUnit <= 0x001f) ||
            codeUnit === 0x007f ||
            // If the character is the first character and is in the range [0-9]
            // (U+0030 to U+0039), […]
            (index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
            // If the character is the second character and is in the range [0-9]
            // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
            (index === 1 &&
                codeUnit >= 0x0030 &&
                codeUnit <= 0x0039 &&
                firstCodeUnit === 0x002d)) {
            // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
            result += '\\' + codeUnit.toString(16) + ' ';
            continue;
        }
        if (
        // If the character is the first character and is a `-` (U+002D), and
        // there is no second character, […]
        index === 0 &&
            length === 1 &&
            codeUnit === 0x002d) {
            result += '\\' + str.charAt(index);
            continue;
        }
        // If the character is not handled by one of the above rules and is
        // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
        // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
        // U+005A), or [a-z] (U+0061 to U+007A), […]
        if (codeUnit >= 0x0080 ||
            codeUnit === 0x002d ||
            codeUnit === 0x005f ||
            (codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
            (codeUnit >= 0x0041 && codeUnit <= 0x005a) ||
            (codeUnit >= 0x0061 && codeUnit <= 0x007a)) {
            // the character itself
            result += str.charAt(index);
            continue;
        }
        // Otherwise, the escaped character.
        // https://drafts.csswg.org/cssom/#escape-a-character
        result += '\\' + str.charAt(index);
    }
    return result;
}

function combineConfig(a, b) {
    var output = __assign({}, a);
    for (var _i = 0, _a = Object.entries(b); _i < _a.length; _i++) {
        var _b = _a[_i], key_of_b = _b[0], value_of_b = _b[1];
        if (key_of_b in a) {
            var value_of_a = a[key_of_b];
            if (value_of_a !== value_of_b) {
                if (value_of_b !== null && value_of_b.constructor !== Object) {
                    if (Array.isArray(value_of_a) && Array.isArray(value_of_b)) {
                        output[key_of_b] = __spreadArray(__spreadArray([], value_of_a), value_of_b);
                    }
                    else {
                        output[key_of_b] = value_of_b;
                    }
                }
                else if (value_of_a !== null && value_of_a.constructor === Object) {
                    output[key_of_b] = combineConfig(value_of_a, value_of_b);
                }
                else if (Array.isArray(value_of_a)) {
                    output[key_of_b] = __spreadArray(__spreadArray([], value_of_a), Array.isArray(value_of_b) ? value_of_b : [value_of_b]);
                }
                else {
                    output[key_of_b] = __assign({ DEFAULT: value_of_a }, value_of_b);
                }
            }
        }
        else {
            output[key_of_b] = value_of_b;
        }
    }
    return output;
}

function diffConfig(a, b) {
    if (typeof a !== typeof b)
        return b;
    if (Array.isArray(a) && Array.isArray(b)) {
        if (JSON.stringify(a) !== JSON.stringify(b))
            return b;
        return;
    }
    if (a && b && typeof a === 'object' && typeof b === 'object') {
        var output = {};
        for (var _i = 0, _a = Object.entries(b); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (key in a) {
                var diff = diffConfig(a[key], b[key]);
                if (diff)
                    output[key] = diff;
            }
            else {
                output[key] = value;
            }
        }
        if (Object.keys(output).length === 0)
            return;
        return output;
    }
    if (a !== b)
        return b;
}

var Handler = /** @class */ (function () {
    function Handler(utility) {
        this.meta = {};
        this.utility = utility;
        this.value = undefined;
        // speed up
        this._amount = utility.amount;
        this._center = utility.center;
    }
    Handler.prototype.handleStatic = function (map, callback) {
        if (this.value)
            return this;
        if (map && typeof map === 'object') {
            var knownMap = map;
            if (knownMap.DEFAULT)
                knownMap[this.utility.raw] = knownMap.DEFAULT;
            if (this._amount in knownMap)
                this.value = callback
                    ? callback(this._amount)
                    : "" + knownMap[this._amount];
        }
        return this;
    };
    Handler.prototype.handleBody = function (map, callback) {
        if (this.value)
            return this;
        if (map && typeof map === 'object') {
            var knownMap = map;
            if (knownMap.DEFAULT)
                knownMap[this.utility.raw] = knownMap.DEFAULT;
            var body = this.utility.body;
            if (body in knownMap)
                this.value = callback ? callback(body) : "" + knownMap[body];
        }
        return this;
    };
    Handler.prototype.handleSquareBrackets = function (callback) {
        if (this.value)
            return this;
        if (this._amount[0] === '[' && this._amount[this._amount.length - 1] === ']') {
            var value = this._amount.slice(1, -1);
            this.value = callback
                ? callback(value)
                : value;
        }
        return this;
    };
    Handler.prototype.handleNumber = function (start, end, type, callback) {
        if (start === void 0) { start = -Infinity; }
        if (end === void 0) { end = Infinity; }
        if (type === void 0) { type = 'int'; }
        if (this.value)
            return this;
        if (isNumber(this._amount, start, end, type))
            this.value = callback ? callback(+this._amount) : this._amount;
        return this;
    };
    Handler.prototype.handleSpacing = function () {
        // just a short-hand for handle spacing.
        return this.handleNumber(0, undefined, 'float', function (number) {
            return number === 0 ? '0px' : roundUp(number / 4, 6) + "rem";
        });
    };
    Handler.prototype.handleNxl = function (callback) {
        if (this.value)
            return this;
        if (/^\d*xl$/.test(this._amount))
            this.value = callback
                ? callback(this._amount === 'xl' ? 1 : parseInt(this._amount))
                : parseInt(this._amount).toString();
        return this;
    };
    Handler.prototype.handleFraction = function (callback) {
        if (this.value)
            return this;
        if (isFraction(this._amount))
            this.value = callback
                ? callback(this._amount)
                : fracToPercent(this._amount);
        return this;
    };
    Handler.prototype.handleSize = function (callback) {
        if (this.value)
            return this;
        if (isSize(this._amount))
            this.value = callback ? callback(this._amount) : this._amount;
        return this;
    };
    Handler.prototype.handleVariable = function (callback) {
        if (this.value)
            return this;
        var matchVariable = this.utility.raw.match(/-\$[\w-]+/);
        if (matchVariable) {
            var variableName = matchVariable[0].substring(2);
            this.value = callback ? callback(variableName) : "var(--" + variableName + ")";
        }
        return this;
    };
    Handler.prototype.handleColor = function (map) {
        if (map === void 0) { map = defaultColors; }
        if (this.value)
            return this;
        var color;
        if (map && typeof map === 'object') {
            var colors = flatColors(map);
            var body = this.utility.raw.replace(/^ring-offset|outline-solid|outline-dotted/, 'head').replace(/^\w+-/, '');
            if (body in colors) {
                color = colors[body];
            }
            else if (body.startsWith('hex-')) {
                var hex = body.slice(4);
                if (hex2RGB(hex))
                    color = '#' + hex;
            }
            if (color) {
                if (Array.isArray(color)) {
                    this.value = color.slice(-2, -1)[0];
                    this.meta.darkColor = color.slice(-1)[0];
                }
                else {
                    this.value = color;
                }
            }
        }
        return this;
    };
    Handler.prototype.handleNegative = function (callback) {
        if (callback === void 0) { callback = negateValue; }
        if (!this.value)
            return this;
        this.value = this.utility.isNegative ? callback(this.value) : this.value;
        return this;
    };
    Handler.prototype.handleValue = function (callback) {
        if (!this.value)
            return this;
        if (callback)
            this.value = callback(this.value);
        return this;
    };
    Handler.prototype.createProperty = function (name, callback) {
        if (!this.value)
            return;
        var value = callback ? callback(this.value) : this.value;
        return new Property(name, value);
    };
    return Handler;
}());
var Utility = /** @class */ (function () {
    function Utility(raw) {
        this.raw = raw; // -placeholder-real-gray-300
    }
    Utility.prototype.match = function (expression) {
        var match = this.absolute.match(expression);
        return match ? match[0] : '';
    };
    Object.defineProperty(Utility.prototype, "class", {
        get: function () {
            return '.' + cssEscape(this.raw); // .-placeholder-real-gray-300
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "isNegative", {
        get: function () {
            return this.raw[0] === '-'; // true
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "absolute", {
        get: function () {
            return this.isNegative ? this.raw.substring(1) : this.raw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "identifier", {
        get: function () {
            return this.match(/[^-]+/); // placeholder
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "key", {
        get: function () {
            return this.match(/^\w[-\w]+(?=-)/); // placeholder-real-gray
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "center", {
        get: function () {
            return this.match(/-.+(?=-)/).substring(1); // real-gray
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "amount", {
        get: function () {
            return this.match(/(?:[^-]+|\[.*?\])$/); // 300
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "body", {
        get: function () {
            return this.match(/-.+/).substring(1); // real-gray-300
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Utility.prototype, "handler", {
        get: function () {
            return new Handler(this);
        },
        enumerable: false,
        configurable: true
    });
    return Utility;
}());

function isNumberLead(i) {
    return /^\d/.test(i) ? i : undefined;
}
function notNumberLead(i) {
    return /^\d/.test(i) ? undefined : i;
}
// https://tailwindcss.com/docs/container
function container(utility, _a) {
    var theme = _a.theme;
    if (utility.raw === 'container') {
        var className = utility.class;
        var baseStyle = new Container(utility.class, new Property('width', '100%'));
        var paddingDefault = toType(theme('container.padding.DEFAULT'), 'string');
        if (paddingDefault) {
            baseStyle.add(new Property('padding-left', paddingDefault));
            baseStyle.add(new Property('padding-right', paddingDefault));
        }
        if (theme('container.center'))
            baseStyle.add(new Property(['margin-left', 'margin-right'], 'auto'));
        var output = [baseStyle];
        var screens = toType(theme('container.screens', theme('screens')), 'object');
        for (var _i = 0, _b = Object.entries(screens); _i < _b.length; _i++) {
            var _c = _b[_i], screen_1 = _c[0], size_1 = _c[1];
            var props = [new Property('max-width', "" + size_1)];
            var padding_1 = theme("container.padding." + screen_1);
            if (padding_1 && typeof padding_1 === 'string') {
                props.push(new Property('padding-left', padding_1));
                props.push(new Property('padding-right', padding_1));
            }
            output.push(new Container(className, props).atRule("@media (min-width: " + size_1 + ")"));
        }
        output.forEach(function (style, index) { return style.meta = { type: 'utilities', corePlugin: true, group: 'container', order: pluginOrder['container'] + index + 1 }; });
        return output;
    }
}
// https://tailwindcss.com/docs/object-position
function objectPosition(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleBody(theme('objectPosition'))
        .createProperty(['-o-object-position', 'object-position'])) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'objectPosition', order: pluginOrder['objectPosition'] });
}
// https://tailwindcss.com/docs/top-right-bottom-left
function inset(utility, _a) {
    var theme = _a.theme;
    var value = utility.handler
        .handleStatic(theme('inset'))
        .handleSquareBrackets()
        .handleSpacing()
        .handleFraction()
        .handleSize()
        .handleNegative()
        .handleVariable().value;
    if (!value)
        return;
    switch (utility.identifier) {
        case 'top':
        case 'right':
        case 'bottom':
        case 'left':
            return new Property(utility.identifier, value).updateMeta({ type: 'utilities', corePlugin: true, group: 'inset', order: pluginOrder['inset'] + 4 });
        case 'inset':
            if (utility.raw.match(/^-?inset-x/)) {
                return new Property(['right', 'left'], value).updateMeta({ type: 'utilities', corePlugin: true, group: 'inset', order: pluginOrder['inset'] + 3 });
            }
            else if (utility.raw.match(/^-?inset-y/)) {
                return new Property(['top', 'bottom'], value).updateMeta({ type: 'utilities', corePlugin: true, group: 'inset', order: pluginOrder['inset'] + 2 });
            }
            else {
                return new Property(['top', 'right', 'bottom', 'left'], value).updateMeta({ type: 'utilities', corePlugin: true, group: 'inset', order: pluginOrder['inset'] + 1 });
            }
    }
}
// https://tailwindcss.com/docs/z-index
function zIndex(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('zIndex'))
        .handleNumber(0, 99999, 'int')
        .handleNegative()
        .handleVariable()
        .createProperty('z-index')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'zIndex', order: pluginOrder['zIndex'] + 1 });
}
// https://tailwindcss.com/docs/flex
// https://tailwindcss.com/docs/flex-grow
// https://tailwindcss.com/docs/flex-shrink
function flex(utility, _a) {
    var _b;
    var theme = _a.theme;
    var className = utility.raw;
    if (className.startsWith('flex-grow')) {
        var map = toType(theme('flexGrow'), 'object');
        var amount = className.replace(/flex-grow-?/, '');
        if (amount === '')
            amount = 'DEFAULT';
        if (Object.keys(map).includes(amount))
            return new Property(['-webkit-box-flex', '-ms-flex-positive', '-webkit-flex-grow', 'flex-grow'], map[amount]).toStyle(utility.class).updateMeta({ type: 'utilities', corePlugin: true, group: 'flexGrow', order: pluginOrder['flexGrow'] + 1 });
    }
    else if (className.startsWith('flex-shrink')) {
        var map = toType(theme('flexShrink'), 'object');
        var amount = className.replace(/flex-shrink-?/, '');
        if (amount === '')
            amount = 'DEFAULT';
        if (Object.keys(map).includes(amount))
            return new Property(['-ms-flex-negative', '-webkit-flex-shrink', 'flex-shrink'], map[amount]).toStyle(utility.class).updateMeta({ type: 'utilities', corePlugin: true, group: 'flexShrink', order: pluginOrder['flexShrink'] + 1 });
    }
    else {
        var value = (_b = utility.handler.handleStatic(theme('flex')).value) === null || _b === void 0 ? void 0 : _b.trim();
        if (value) {
            return new Style(utility.class, [
                new Property('-webkit-box-flex', value.startsWith('0') || value === 'none' ? '0' : '1'),
                new Property(['-ms-flex', '-webkit-flex', 'flex'], value),
            ]).updateMeta({ type: 'utilities', corePlugin: true, group: 'flex', order: pluginOrder['flex'] + 1 });
        }
    }
}
// https://tailwindcss.com/docs/order
function order(utility, _a) {
    var theme = _a.theme;
    var value = utility.handler
        .handleStatic(theme('order'))
        .handleNumber(1, 9999, 'int')
        .handleNegative()
        .handleVariable().value;
    if (value) {
        return new Style(utility.class, [
            new Property('-webkit-box-ordinal-group', value.includes('var') ? "calc(" + value + "+1)" : (parseInt(value) + 1).toString()),
            new Property(['-webkit-order', '-ms-flex-order', 'order'], value),
        ]).updateMeta({ type: 'utilities', corePlugin: true, group: 'order', order: pluginOrder['order'] + (utility.raw.charAt(0) === '-' ? 2 : 1) });
    }
}
// https://tailwindcss.com/docs/grid-template-columns
// https://tailwindcss.com/docs/grid-template-rows
function gridTemplate(utility, _a) {
    var _b;
    var theme = _a.theme;
    var type = utility.raw.match(/^grid-rows-/) ? 'rows' : utility.raw.match(/^grid-cols-/) ? 'columns' : undefined;
    if (!type)
        return;
    var group = type === 'rows' ? 'gridTemplateRows' : 'gridTemplateColumns';
    var value = utility.handler
        .handleStatic(theme(group))
        .handleSquareBrackets(function (i) { return i.replace(/\(.*?\)|,/g, function (r) { return r === ',' ? ' ' : r; } /* ignore content inside nested-brackets */); })
        .createProperty("grid-template-" + type, function (value) { return value === 'none' ? 'none' : value; });
    if (value)
        return value.updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 1 });
    return (_b = utility.handler
        .handleNumber(1, undefined, 'int')
        .handleVariable()
        .createProperty("grid-template-" + type, function (value) { return "repeat(" + value + ", minmax(0, 1fr))"; })) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 2 });
}
// https://tailwindcss.com/docs/grid-column
function gridColumn(utility, _a) {
    var _b, _c, _d;
    var theme = _a.theme;
    var body = utility.body;
    // col span
    var spans = toType(theme('gridColumn'), 'object');
    if (Object.keys(spans).includes(body))
        return new Property(['-ms-grid-column-span', 'grid-column'], spans[body]).updateMeta({ type: 'utilities', corePlugin: true, group: 'gridColumn', order: pluginOrder['gridColumn'] + 1 });
    if (utility.raw.startsWith('col-span')) {
        return (_b = utility.handler
            .handleNumber(1, undefined, 'int')
            .handleVariable()
            .createProperty(['-ms-grid-column-span', 'grid-column'], function (value) { return "span " + value + " / span " + value; })) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'gridColumn', order: pluginOrder['gridColumn'] + 1 });
    }
    // col end
    if (utility.raw.startsWith('col-end')) {
        return (_c = utility.handler
            .handleStatic(theme('gridColumnEnd'))
            .handleNumber(1, undefined, 'int')
            .handleVariable()
            .createProperty('grid-column-end')) === null || _c === void 0 ? void 0 : _c.updateMeta({ type: 'utilities', corePlugin: true, group: 'gridColumnEnd', order: pluginOrder['gridColumnEnd'] + 1 });
    }
    // col start
    if (utility.raw.startsWith('col-start')) {
        return (_d = utility.handler
            .handleStatic(theme('gridColumnStart'))
            .handleNumber(1, undefined, 'int')
            .handleVariable()
            .createProperty('grid-column-start')) === null || _d === void 0 ? void 0 : _d.updateMeta({ type: 'utilities', corePlugin: true, group: 'gridColumnStart', order: pluginOrder['gridColumnStart'] + 1 });
    }
}
// https://tailwindcss.com/docs/grid-row
function gridRow(utility, _a) {
    var _b, _c, _d;
    var theme = _a.theme;
    var body = utility.body;
    // row span
    var spans = toType(theme('gridRow'), 'object');
    if (Object.keys(spans).includes(body))
        return new Property(['-ms-grid-row-span', 'grid-row'], spans[body]).updateMeta({ type: 'utilities', corePlugin: true, group: 'gridRow', order: pluginOrder['gridRow'] + 1 });
    if (utility.raw.startsWith('row-span')) {
        return (_b = utility.handler
            .handleNumber(1, undefined, 'int')
            .handleVariable()
            .createProperty(['-ms-grid-row-span', 'grid-row'], function (value) { return "span " + value + " / span " + value; })) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'gridRow', order: pluginOrder['gridRow'] + 2 });
    }
    // row end
    if (utility.raw.startsWith('row-end')) {
        return (_c = utility.handler
            .handleStatic(theme('gridRowEnd'))
            .handleNumber(1, undefined, 'int')
            .handleVariable()
            .createProperty('grid-row-end')) === null || _c === void 0 ? void 0 : _c.updateMeta({ type: 'utilities', corePlugin: true, group: 'gridRowEnd', order: pluginOrder['gridRowEnd'] + 1 });
    }
    // row start
    if (utility.raw.startsWith('row-start')) {
        return (_d = utility.handler
            .handleStatic(theme('gridRowStart'))
            .handleNumber(1, undefined, 'int')
            .handleVariable()
            .createProperty('grid-row-start')) === null || _d === void 0 ? void 0 : _d.updateMeta({ type: 'utilities', corePlugin: true, group: 'gridRowStart', order: pluginOrder['gridRowStart'] + 1 });
    }
}
// https://tailwindcss.com/docs/grid-auto-columns
// https://tailwindcss.com/docs/grid-auto-rows
function gridAuto(utility, _a) {
    var theme = _a.theme;
    var type = utility.raw.startsWith('auto-cols') ? 'columns' : utility.raw.startsWith('auto-rows') ? 'rows' : undefined;
    if (!type)
        return;
    var group = type === 'columns' ? 'gridAutoColumns' : 'gridAutoRows';
    var value = utility.handler.handleStatic(theme(group)).value;
    if (value) {
        var prefixer = minMaxContent(value);
        if (typeof prefixer === 'string')
            return new Property("grid-auto-" + type, prefixer).updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 1 });
        return new Style(utility.class, prefixer.map(function (i) { return new Property("grid-auto-" + type, i); })).updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 2 });
    }
}
// https://tailwindcss.com/docs/gap
function gap(utility, _a) {
    var theme = _a.theme, config = _a.config;
    var value = utility.handler
        .handleStatic(theme('gap'))
        .handleSquareBrackets()
        .handleSpacing()
        .handleSize()
        .handleVariable().value;
    if (!value)
        return;
    if (utility.raw.match(/^gap-x-/))
        return new Property(config('prefixer') ? ['-webkit-column-gap', '-moz-column-gap', 'grid-column-gap', 'column-gap'] : 'column-gap', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'gap', order: pluginOrder['gap'] + 2 });
    if (utility.raw.match(/^gap-y-/))
        return new Property(config('prefixer') ? ['-webkit-row-gap', '-moz-row-gap', 'grid-row-gap', 'row-gap'] : 'row-gap', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'gap', order: pluginOrder['gap'] + 3 });
    return new Property(config('prefixer') ? ['grid-gap', 'gap'] : 'gap', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'gap', order: pluginOrder['gap'] + 1 });
}
// https://tailwindcss.com/docs/padding
function padding(utility, _a) {
    var theme = _a.theme;
    var value = utility.handler
        .handleStatic(theme('padding'))
        .handleSquareBrackets()
        .handleSpacing()
        .handleSize()
        .handleVariable().value;
    if (!value)
        return;
    var directions = expandDirection(utility.identifier.substring(1), false);
    if (directions) {
        if (directions[0] === '*')
            return new Property('padding', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'padding', order: pluginOrder['padding'] - 4 });
        return new Property(directions.map(function (i) { return "padding-" + i; }), value).updateMeta({ type: 'utilities', corePlugin: true, group: 'padding', order: pluginOrder['padding'] - directions.length });
    }
}
// https://tailwindcss.com/docs/margin
function margin(utility, _a) {
    var theme = _a.theme;
    var value = utility.handler
        .handleStatic(theme('margin'))
        .handleSquareBrackets()
        .handleSpacing()
        .handleSize()
        .handleNegative()
        .handleVariable().value;
    if (!value)
        return;
    var directions = expandDirection(utility.identifier.substring(1), false);
    if (directions) {
        if (directions[0] === '*')
            return new Property('margin', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'margin', order: pluginOrder['margin'] - 4 });
        return new Property(directions.map(function (i) { return "margin-" + i; }), value).updateMeta({ type: 'utilities', corePlugin: true, group: 'margin', order: pluginOrder['margin'] - directions.length });
    }
}
// https://tailwindcss.com/docs/space
function space(utility, _a) {
    var theme = _a.theme;
    if (utility.raw === 'space-x-reverse') {
        return new Style(utility.class, [
            new Property('--tw-space-x-reverse', '1'),
        ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'space', order: pluginOrder['space'] + 6 });
    }
    if (utility.raw === 'space-y-reverse') {
        return new Style(utility.class, [
            new Property('--tw-space-y-reverse', '1'),
        ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'space', order: pluginOrder['space'] + 5 });
    }
    var value = utility.handler
        .handleStatic(theme('space'))
        .handleSquareBrackets()
        .handleSpacing()
        .handleSize()
        .handleNegative()
        .handleVariable().value;
    if (!value)
        return;
    if (utility.raw.match(/^-?space-x-/)) {
        return new Style(utility.class, [
            new Property('--tw-space-x-reverse', '0'),
            new Property('margin-right', "calc(" + value + " * var(--tw-space-x-reverse))"),
            new Property('margin-left', "calc(" + value + " * calc(1 - var(--tw-space-x-reverse)))"),
        ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'space', order: pluginOrder['space'] + (utility.raw.charAt(0) === '-' ? 4 : 2) });
    }
    if (utility.raw.match(/^-?space-y-/)) {
        return new Style(utility.class, [
            new Property('--tw-space-y-reverse', '0'),
            new Property('margin-top', "calc(" + value + " * calc(1 - var(--tw-space-y-reverse)))"),
            new Property('margin-bottom', "calc(" + value + " * var(--tw-space-y-reverse))"),
        ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'space', order: pluginOrder['space'] + (utility.raw.charAt(0) === '-' ? 3 : 1) });
    }
}
// https://tailwindcss.com/docs/width
// https://tailwindcss.com/docs/height
function size(utility, _a) {
    var _b;
    var theme = _a.theme;
    var name = utility.identifier === 'w' ? 'width' : 'height';
    var body = utility.body;
    var sizes = toType(theme(name), 'object');
    // handle static
    if (Object.keys(sizes).includes(body)) {
        var value = sizes[body];
        if (value === 'min-content') {
            return new Style(utility.class, [
                new Property(name, '-webkit-min-content'),
                new Property(name, '-moz-min-content'),
                new Property(name, 'min-content'),
            ]).updateMeta({ type: 'utilities', corePlugin: true, group: name, order: pluginOrder[name] + 2 });
        }
        if (value === 'max-content') {
            return new Style(utility.class, [
                new Property(name, '-webkit-max-content'),
                new Property(name, '-moz-max-content'),
                new Property(name, 'max-content'),
            ]).updateMeta({ type: 'utilities', corePlugin: true, group: name, order: pluginOrder[name] + 3 });
        }
        return new Style(utility.class, new Property(name, value)).updateMeta({ type: 'utilities', corePlugin: true, group: name, order: pluginOrder[name] + 1 });
    }
    return (_b = utility.handler
        .handleSquareBrackets()
        .handleSpacing()
        .handleFraction()
        .handleSize()
        .handleNxl(function (number) { return (number - 3) * 8 + 48 + "rem"; })
        .handleVariable()
        .createProperty(name)) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: name, order: pluginOrder[name] + 4 });
}
// https://tailwindcss.com/docs/min-width
// https://tailwindcss.com/docs/min-height
// https://tailwindcss.com/docs/max-width
// https://tailwindcss.com/docs/max-height
function minMaxSize(utility, _a) {
    var _b;
    var theme = _a.theme;
    var body = utility.raw.replace(/^(min|max)-[w|h]-/, '');
    var prop = utility.raw.substring(0, 5).replace('h', 'height').replace('w', 'width');
    var group = dashToCamel(prop);
    var sizes = toType(theme(group), 'object');
    // handle static
    if (Object.keys(sizes).includes(body)) {
        var value = sizes[body];
        if (value === 'min-content') {
            return new Style(utility.class, [
                new Property(prop, '-webkit-min-content'),
                new Property(prop, '-moz-min-content'),
                new Property(prop, 'min-content'),
            ]).updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 2 });
        }
        if (value === 'max-content') {
            return new Style(utility.class, [
                new Property(prop, '-webkit-max-content'),
                new Property(prop, '-moz-max-content'),
                new Property(prop, 'max-content'),
            ]).updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 3 });
        }
        return new Style(utility.class, new Property(prop, value)).updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 1 });
    }
    return (_b = utility.handler
        .handleSquareBrackets()
        .handleSpacing()
        .handleFraction()
        .handleSize()
        .handleNxl(function (number) { return (number - 3) * 8 + 48 + "rem"; })
        .handleVariable()
        .createProperty(prop)) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: group, order: pluginOrder[group] + 4 });
}
// https://tailwindcss.com/docs/font-size
// https://tailwindcss.com/docs/text-opacity
// https://tailwindcss.com/docs/text-color
function text(utility, _a, variants) {
    var _b;
    var theme = _a.theme, config = _a.config;
    // handle font opacity
    if (utility.raw.startsWith('text-opacity')) {
        return (_b = utility.handler
            .handleStatic(theme('textOpacity'))
            .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
            .handleVariable()
            .createProperty('--tw-text-opacity')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'textOpacity', order: pluginOrder['textOpacity'] + 1 });
    }
    // handle font sizes
    var amount = utility.amount;
    var fontSizes = toType(theme('fontSize'), 'object');
    if (Object.keys(fontSizes).includes(amount))
        return new Style(utility.class, generateFontSize(fontSizes[amount])).updateMeta({ type: 'utilities', corePlugin: true, group: 'fontSize', order: pluginOrder['fontSize'] + 1 });
    var value = utility.handler
        .handleSquareBrackets(isNumberLead)
        .handleNxl(function (number) { return number + "rem"; })
        .handleSize()
        .value;
    if (utility.raw.startsWith('text-size-$'))
        value = utility.handler.handleVariable().value;
    if (value)
        return new Style(utility.class, [new Property('font-size', value), new Property('line-height', '1')]).updateMeta({ type: 'utilities', corePlugin: true, group: 'fontSize', order: pluginOrder['fontSize'] + 2 });
    // handle colors
    var handler = utility.handler
        .handleSquareBrackets()
        .handleColor(theme('textColor'))
        .handleVariable();
    if (handler.value) {
        if (['transparent', 'currentColor'].includes(handler.value) || handler.value.includes('var')) {
            return new Property('color', handler.value).updateMeta({ type: 'utilities', corePlugin: true, group: 'textColor', order: pluginOrder['textColor'] + 1 });
        }
        var _c = toColor(handler.value), color = _c.color, opacity_1 = _c.opacity;
        var output = [new Style(utility.class, [
                new Property('--tw-text-opacity', opacity_1),
                new Property('color', "rgba(" + (handler.value.includes('var') ? handler.value : color) + ", var(--tw-text-opacity))"),
            ])];
        // handle dark color
        if (variants.includes('~dark') && handler.meta.darkColor) {
            var _d = toColor(handler.meta.darkColor), color_1 = _d.color, opacity_2 = _d.opacity;
            output.push(toDarkStyle(new Style(utility.class, [
                new Property('--tw-text-opacity', opacity_2),
                new Property('color', "rgba(" + color_1 + ", var(--tw-text-opacity))"),
            ]), config('darkMode')));
        }
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'textColor', order: pluginOrder['textColor'] + 2 }); });
    }
}
// https://tailwindcss.com/docs/font-family
// https://tailwindcss.com/docs/font-weight
function font(utility, _a) {
    var _b, _c;
    var theme = _a.theme;
    var fonts = theme('fontFamily');
    var map = {};
    for (var _i = 0, _d = Object.entries(fonts); _i < _d.length; _i++) {
        var _e = _d[_i], key = _e[0], value = _e[1];
        map[key] = Array.isArray(value) ? value.join(',') : value;
    }
    return (((_b = utility.handler
        .handleStatic(map)
        .createProperty('font-family')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'fontFamily', order: pluginOrder['fontFamily'] + 1 })) ||
        ((_c = utility.handler
            .handleStatic(theme('fontWeight'))
            .handleNumber(0, 900, 'int')
            .handleVariable()
            .createProperty('font-weight')) === null || _c === void 0 ? void 0 : _c.updateMeta({ type: 'utilities', corePlugin: true, group: 'fontWeight', order: pluginOrder['fontWeight'] + 1 })));
}
// https://tailwindcss.com/docs/letter-spacing
function letterSpacing(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('letterSpacing'))
        .handleSquareBrackets()
        .handleSize()
        .handleNegative()
        .handleVariable()
        .createProperty('letter-spacing')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'letterSpacing', order: pluginOrder['letterSpacing'] + 1 });
}
// https://tailwindcss.com/docs/line-height
function lineHeight(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('lineHeight'))
        .handleNumber(0, undefined, 'int', function (number) { return number * 0.25 + "rem"; })
        .handleSquareBrackets()
        .handleSize()
        .handleVariable()
        .createProperty('line-height')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'lineHeight', order: pluginOrder['lineHeight'] + 1 });
}
// https://tailwindcss.com/docs/list-style-type
function listStyleType(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('listStyleType'))
        .createProperty('list-style-type')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'listStyleType', order: pluginOrder['listStyleType'] + 1 });
}
// https://tailwindcss.com/docs/placeholder-color
// https://tailwindcss.com/docs/placeholder-opacity
function placeholder(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    // handle placeholder opacity
    if (utility.raw.startsWith('placeholder-opacity')) {
        var opacity_3 = utility.handler
            .handleStatic(theme('placeholderOpacity'))
            .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
            .handleVariable()
            .value;
        return generatePlaceholder(utility.class, new Property('--tw-placeholder-opacity', opacity_3), config('prefixer')).map(function (style) { return style.updateMeta({ type: 'utilities', corePlugin: true, group: 'placeholderOpacity', order: pluginOrder['placeholderOpacity'] + 1 }); });
    }
    var handler = utility.handler
        .handleColor(theme('placeholderColor'))
        .handleVariable();
    if (!handler.value)
        return;
    if (handler.value.includes('var'))
        return generatePlaceholder(utility.class, new Property('color', handler.value), config('prefixer')).map(function (style) { return style.updateMeta({ type: 'utilities', corePlugin: true, group: 'placeholderColor', order: pluginOrder['placeholderColor'] + 3 }); });
    if (['transparent', 'currentColor'].includes(handler.value))
        return generatePlaceholder(utility.class, new Property('color', handler.value), config('prefixer')).map(function (style) { return style.updateMeta({ type: 'utilities', corePlugin: true, group: 'placeholderColor', order: pluginOrder['placeholderColor'] + 1 }); });
    var _b = toColor(handler.value), color = _b.color, opacity = _b.opacity;
    var output = generatePlaceholder(utility.class, [new Property('--tw-placeholder-opacity', opacity), new Property('color', "rgba(" + color + ", var(--tw-placeholder-opacity))")], config('prefixer'));
    // handle dark color
    if (variants.includes('~dark') && handler.meta.darkColor) {
        var _c = toColor(handler.meta.darkColor), color_2 = _c.color, opacity_4 = _c.opacity;
        output = output.concat(toDarkStyle(generatePlaceholder(utility.class, [new Property('--tw-placeholder-opacity', opacity_4), new Property('color', "rgba(" + color_2 + ", var(--tw-placeholder-opacity))")], config('prefixer')), config('darkMode')));
    }
    return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'placeholderColor', order: pluginOrder['placeholderColor'] + 2 }); });
}
// https://tailwindcss.com/docs/background-color
// https://tailwindcss.com/docs/background-opacity
// https://tailwindcss.com/docs/background-position
// https://tailwindcss.com/docs/background-size
// https://tailwindcss.com/docs/background-image
function background(utility, _a, variants) {
    var _b;
    var theme = _a.theme, config = _a.config;
    var body = utility.body;
    // handle background positions
    var positions = toType(theme('backgroundPosition'), 'object');
    if (Object.keys(positions).includes(body))
        return new Property('background-position', positions[body]).updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundPosition', order: pluginOrder['backgroundPosition'] + 1 });
    // handle background sizes
    var sizes = toType(theme('backgroundSize'), 'object');
    if (Object.keys(sizes).includes(body))
        return new Property('background-size', sizes[body]).updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundSize', order: pluginOrder['backgroundSize'] + 1 });
    // handle background image
    var images = toType(theme('backgroundImage'), 'object');
    if (Object.keys(images).includes(body)) {
        var prefixer = linearGradient(images[body]);
        if (Array.isArray(prefixer))
            return new Style(utility.class, prefixer.map(function (i) { return new Property('background-image', i); })).updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundImage', order: pluginOrder['backgroundImage'] + 2 });
        return new Property('background-image', prefixer).updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundImage', order: pluginOrder['backgroundImage'] + 1 });
    }
    // handle background opacity
    if (utility.raw.startsWith('bg-opacity'))
        return (_b = utility.handler
            .handleStatic(theme('backgroundOpacity'))
            .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
            .handleVariable()
            .createProperty('--tw-bg-opacity')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundOpacity', order: pluginOrder['backgroundOpacity'] + 1 });
    // handle background color
    var handler = utility.handler
        .handleSquareBrackets(notNumberLead)
        .handleColor(theme('backgroundColor'))
        .handleVariable();
    if (handler.value) {
        if (['transparent', 'currentColor'].includes(handler.value) || handler.value.includes('var'))
            return new Property('background-color', handler.value).updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundColor', order: pluginOrder['backgroundColor'] + 1 });
        var _c = toColor(handler.value), color = _c.color, opacity_5 = _c.opacity;
        // handle dark color
        var output = [new Style(utility.class, [new Property('--tw-bg-opacity', opacity_5), new Property('background-color', "rgba(" + color + ", var(--tw-bg-opacity))")])];
        if (variants.includes('~dark') && handler.meta.darkColor) {
            var _d = toColor(handler.meta.darkColor), color_3 = _d.color, opacity_6 = _d.opacity;
            output.push(toDarkStyle(new Style(utility.class, [
                new Property('--tw-bg-opacity', opacity_6),
                new Property('background-color', "rgba(" + color_3 + ", var(--tw-bg-opacity))"),
            ]), config('darkMode')));
        }
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'backgroundColor', order: pluginOrder['backgroundColor'] + 2 }); });
    }
}
// https://tailwindcss.com/docs/gradient-color-stops from
function gradientColorFrom(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    var handler = utility.handler.handleColor(theme('gradientColorStops')).handleVariable();
    if (handler.value) {
        var rgb = handler.value === 'transparent' ? '0, 0, 0' : handler.value === 'current' ? '255, 255, 255' : handler.value.includes('var') ? '255, 255, 255' : toColor(handler.value).color;
        var output = [new Style(utility.class, [new Property('--tw-gradient-from', handler.value), new Property('--tw-gradient-stops', "var(--tw-gradient-from), var(--tw-gradient-to, rgba(" + rgb + ", 0))")])];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Style(utility.class, [new Property('--tw-gradient-from', handler.meta.darkColor), new Property('--tw-gradient-stops', "var(--tw-gradient-from), var(--tw-gradient-to, rgba(" + toColor(handler.meta.darkColor).color + ", 0))")]), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'gradientColorStops', order: pluginOrder['gradientColorStops'] + 1 }); });
    }
}
// https://tailwindcss.com/docs/gradient-color-stops via
function gradientColorVia(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    var handler = utility.handler.handleColor(theme('gradientColorStops')).handleVariable();
    if (handler.value) {
        var rgb = handler.value === 'transparent' ? '0, 0, 0' : handler.value === 'current' ? '255, 255, 255' : handler.value.includes('var') ? '255, 255, 255' : toColor(handler.value).color;
        var output = [new Style(utility.class, new Property('--tw-gradient-stops', "var(--tw-gradient-from), " + handler.value + ", var(--tw-gradient-to, rgba(" + rgb + ", 0))"))];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Style(utility.class, new Property('--tw-gradient-stops', "var(--tw-gradient-from), " + handler.meta.darkColor + ", var(--tw-gradient-to, rgba(" + toColor(handler.meta.darkColor).color + ", 0))")), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'gradientColorStops', order: pluginOrder['gradientColorStops'] + 2 }); });
    }
}
// https://tailwindcss.com/docs/gradient-color-stops to
function gradientColorTo(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    var handler = utility.handler.handleColor(theme('gradientColorStops')).handleVariable();
    if (handler.value) {
        var output = [new Style(utility.class, new Property('--tw-gradient-to', handler.value))];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Style(utility.class, new Property('--tw-gradient-to', handler.meta.darkColor)), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'gradientColorStops', order: pluginOrder['gradientColorStops'] + 3 }); });
    }
}
// https://tailwindcss.com/docs/border-radius
function borderRadius(utility, _a) {
    var _b;
    var theme = _a.theme;
    var raw = ['rounded', 'rounded-t', 'rounded-l', 'rounded-r', 'rounded-b', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'].includes(utility.raw) ? utility.raw + '-DEFAULT' : utility.raw;
    utility = new Utility(raw);
    var directions = expandDirection(utility.center.replace(/-?\$[\w-]+/, ''), true);
    if (!directions)
        return;
    return (_b = utility.handler
        .handleStatic(theme('borderRadius'))
        .handleSquareBrackets()
        .handleFraction()
        .handleNxl(function (number) { return number * 0.5 + "rem"; })
        .handleSize()
        .handleVariable()
        .createProperty(directions[0] === '*' ? 'border-radius' : directions.map(function (i) { return "border-" + i + "-radius"; }))) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'borderRadius', order: pluginOrder['borderRadius'] - (directions[0] === '*' ? 3 : directions.length) });
}
// https://tailwindcss.com/docs/border-width
// https://tailwindcss.com/docs/border-color
// https://tailwindcss.com/docs/border-opacity
function border(utility, _a, variants) {
    var _b, _c, _d, _e;
    var theme = _a.theme, config = _a.config;
    // handle border opacity
    if (utility.raw.startsWith('border-opacity')) {
        return (_b = utility.handler
            .handleStatic(theme('borderOpacity'))
            .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
            .handleVariable()
            .createProperty('--tw-border-opacity')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'borderOpacity', order: pluginOrder['borderOpacity'] + 1 });
    }
    // handle border color
    var handler = utility.handler
        .handleSquareBrackets(notNumberLead)
        .handleColor(theme('borderColor'))
        .handleVariable(function (variable) { return utility.raw.startsWith('border-$') ? "var(--" + variable + ")" : undefined; });
    if (handler.value) {
        if (['transparent', 'currentColor'].includes(handler.value))
            return new Property('border-color', handler.value).updateMeta({ type: 'utilities', corePlugin: true, group: 'borderColor', order: pluginOrder['borderColor'] + 1 });
        var _f = toColor(handler.value), color = _f.color, opacity_7 = _f.opacity;
        var output = [new Style(utility.class, [new Property('--tw-border-opacity', opacity_7), new Property('border-color', handler.value.includes('var') ? handler.value : "rgba(" + color + ", var(--tw-border-opacity))")])];
        if (variants.includes('~dark') && handler.meta.darkColor) {
            var _g = toColor(handler.meta.darkColor), color_4 = _g.color, opacity_8 = _g.opacity;
            output.push(toDarkStyle(new Style(utility.class, [new Property('--tw-border-opacity', opacity_8), new Property('border-color', "rgba(" + color_4 + ", var(--tw-border-opacity))")]), config('darkMode')));
        }
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'borderColor', order: pluginOrder['borderColor'] + 2 }); });
    }
    // handle border width
    var directions = (_c = expandDirection(utility.raw.substring(7, 8), false)) !== null && _c !== void 0 ? _c : ['*'];
    var borders = toType(theme('borderWidth'), 'object');
    var raw = ['border', 'border-t', 'border-r', 'border-b', 'border-l'].includes(utility.raw) ? utility.raw + "-" + ((_d = borders.DEFAULT) !== null && _d !== void 0 ? _d : '1px') : utility.raw;
    utility = new Utility(raw);
    return (_e = utility.handler
        .handleStatic(borders)
        .handleSquareBrackets()
        .handleNumber(0, undefined, 'int', function (number) { return /^border(-[tlbr])?$/.test(utility.key) ? number + "px" : undefined; })
        .handleSize()
        .handleVariable()
        .createProperty(directions[0] === '*' ? 'border-width' : directions.map(function (i) { return "border-" + i + "-width"; }))) === null || _e === void 0 ? void 0 : _e.updateMeta({ type: 'utilities', corePlugin: true, group: 'borderWidth', order: pluginOrder['borderWidth'] + (directions[0] === '*' ? 1 : (directions.length + 1)) });
}
// https://tailwindcss.com/docs/divide-width
// https://tailwindcss.com/docs/divide-color
// https://tailwindcss.com/docs/divide-opacity
// https://tailwindcss.com/docs/divide-style
function divide(utility, _a, variants) {
    var _b;
    var theme = _a.theme, config = _a.config;
    // handle divide style
    if (['solid', 'dashed', 'dotted', 'double', 'none'].includes(utility.amount))
        return new Property('border-style', utility.amount).toStyle(utility.class).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideStyle', order: pluginOrder['divideStyle'] + 1 });
    // handle divide opacity
    if (utility.raw.startsWith('divide-opacity'))
        return (_b = utility.handler
            .handleStatic(theme('divideOpacity'))
            .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
            .handleVariable()
            .createProperty('--tw-divide-opacity')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'divideOpacity', order: pluginOrder['divideOpacity'] + 1 });
    // handle divide color
    var handler = utility.handler.handleColor(theme('divideColor')).handleVariable(function (variable) { return utility.raw.startsWith('divide-$') ? "var(--" + variable + ")" : undefined; });
    if (handler.value) {
        if (['transparent', 'currentColor'].includes(handler.value))
            return new Property('border-color', handler.value).updateMeta({ type: 'utilities', corePlugin: true, group: 'divideColor', order: pluginOrder['divideColor'] + 1 });
        var _c = toColor(handler.value), color = _c.color, opacity_9 = _c.opacity;
        var output = [new Style(utility.class, [new Property('--tw-divide-opacity', opacity_9), new Property('border-color', handler.value.includes('var') ? handler.value : "rgba(" + color + ", var(--tw-divide-opacity))")])];
        if (variants.includes('~dark') && handler.meta.darkColor) {
            var _d = toColor(handler.meta.darkColor), color_5 = _d.color, opacity_10 = _d.opacity;
            output.push(toDarkStyle(new Style(utility.class, [new Property('--tw-divide-opacity', opacity_10), new Property('border-color', "rgba(" + color_5 + ", var(--tw-divide-opacity))")]), config('darkMode')));
        }
        return output.map(function (i) { return i.child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideColor', order: pluginOrder['divideColor'] + 2 }); });
    }
    // handle divide width
    switch (utility.raw) {
        case 'divide-x-reverse':
            return new Style(utility.class, new Property('--tw-divide-x-reverse', '1')).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideWidth', order: pluginOrder['divideWidth'] + 6 });
        case 'divide-y-reverse':
            return new Style(utility.class, new Property('--tw-divide-y-reverse', '1')).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideWidth', order: pluginOrder['divideWidth'] + 5 });
        case 'divide-y':
            return new Style(utility.class, [
                new Property('--tw-divide-y-reverse', '0'),
                new Property('border-top-width', 'calc(1px * calc(1 - var(--tw-divide-y-reverse)))'),
                new Property('border-bottom-width', 'calc(1px * var(--tw-divide-y-reverse))'),
            ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideWidth', order: pluginOrder['divideWidth'] + 3 });
        case 'divide-x':
            return new Style(utility.class, [
                new Property('--tw-divide-x-reverse', '0'),
                new Property('border-right-width', 'calc(1px * var(--tw-divide-x-reverse))'),
                new Property('border-left-width', 'calc(1px * calc(1 - var(--tw-divide-x-reverse)))'),
            ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideWidth', order: pluginOrder['divideWidth'] + 4 });
    }
    var value = utility.handler
        .handleSquareBrackets()
        .handleNumber(0, undefined, 'float', function (number) { return number + "px"; })
        .handleSize()
        .handleVariable().value;
    if (value) {
        var centerMatch = utility.raw.match(/^-?divide-[x|y]/);
        if (centerMatch) {
            var center = centerMatch[0].replace(/^-?divide-/, '');
            switch (center) {
                case 'x':
                    return new Style(utility.class, [
                        new Property('--tw-divide-x-reverse', '0'),
                        new Property('border-right-width', "calc(" + value + " * var(--tw-divide-x-reverse))"),
                        new Property('border-left-width', "calc(" + value + " * calc(1 - var(--tw-divide-x-reverse)))"),
                    ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideWidth', order: pluginOrder['divideWidth'] + 2 });
                case 'y':
                    return new Style(utility.class, [
                        new Property('--tw-divide-y-reverse', '0'),
                        new Property('border-top-width', "calc(" + value + " * calc(1 - var(--tw-divide-y-reverse)))"),
                        new Property('border-bottom-width', "calc(" + value + " * var(--tw-divide-y-reverse))"),
                    ]).child('> :not([hidden]) ~ :not([hidden])').updateMeta({ type: 'utilities', corePlugin: true, group: 'divideWidth', order: pluginOrder['divideWidth'] + 1 });
            }
        }
    }
}
// https://tailwindcss.com/docs/ring-offset-width
// https://tailwindcss.com/docs/ring-offset-color
function ringOffset(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    var value;
    // handle ring offset width variable
    if (utility.raw.startsWith('ringOffset-width-$')) {
        value = utility.handler.handleVariable().value;
        if (value)
            return new Property('--tw-ring-offset-width', value).toStyle(utility.class.replace('ringOffset', 'ring-offset')).updateMeta({ type: 'utilities', corePlugin: true, group: 'ringOffsetWidth', order: pluginOrder['ringOffsetWidth'] + 2 });
    }
    // handle ring offset width
    if (utility.center === '') {
        value = utility.handler
            .handleStatic(theme('ringOffsetWidth'))
            .handleSquareBrackets(isNumberLead)
            .handleNumber(0, undefined, 'float', function (number) { return number + "px"; })
            .handleSize()
            .value;
        if (value)
            return new Property('--tw-ring-offset-width', value).toStyle(utility.class.replace('ringOffset', 'ring-offset')).updateMeta({ type: 'utilities', corePlugin: true, group: 'ringOffsetWidth', order: pluginOrder['ringOffsetWidth'] + 1 });
    }
    // handle ring offset color
    var handler = utility.handler.handleColor(theme('ringOffsetColor')).handleVariable();
    if (handler.value) {
        var output = [new Property('--tw-ring-offset-color', handler.value).toStyle(utility.class.replace('ringOffset', 'ring-offset'))];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Property('--tw-ring-offset-color', handler.value).toStyle(utility.class.replace('ringOffset', 'ring-offset')), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'ringOffsetColor', order: pluginOrder['ringOffsetColor'] + 1 }); });
    }
}
// https://tailwindcss.com/docs/ring-width
// https://tailwindcss.com/docs/ring-color
// https://tailwindcss.com/docs/ring-opacity
function ring(utility, utils, variants) {
    var _a, _b;
    // handle ring offset
    if (utility.raw.startsWith('ring-offset'))
        return ringOffset(new Utility(utility.raw.replace('ring-offset', 'ringOffset')), utils, variants);
    // handle ring opacity
    if (utility.raw.startsWith('ring-opacity'))
        return (_a = utility.handler
            .handleStatic(utils.theme('ringOpacity'))
            .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
            .handleVariable()
            .createProperty('--tw-ring-opacity')) === null || _a === void 0 ? void 0 : _a.updateMeta({ type: 'utilities', corePlugin: true, group: 'ringOpacity', order: pluginOrder['ringOpacity'] + 1 });
    // handle ring color
    var handler = utility.handler
        .handleSquareBrackets(notNumberLead)
        .handleColor(utils.theme('ringColor'))
        .handleVariable(function (variable) { return utility.raw.startsWith('ring-$') ? "var(--" + variable + ")" : undefined; });
    if (handler.value) {
        if (['transparent', 'currentColor'].includes(handler.value) || handler.value.includes('var'))
            return new Style(utility.class, [new Property('--tw-ring-color', handler.value)]).updateMeta({ type: 'utilities', corePlugin: true, group: 'ringColor', order: pluginOrder['ringColor'] + 1 });
        var _c = toColor(handler.value), color = _c.color, opacity_11 = _c.opacity;
        var output = [new Style(utility.class, [new Property('--tw-ring-opacity', opacity_11), new Property('--tw-ring-color', "rgba(" + color + ", var(--tw-ring-opacity))")])];
        if (variants.includes('~dark') && handler.meta.darkColor) {
            var _d = toColor(handler.meta.darkColor), color_6 = _d.color, opacity_12 = _d.opacity;
            output.push(toDarkStyle(new Style(utility.class, [new Property('--tw-ring-opacity', opacity_12), new Property('--tw-ring-color', "rgba(" + color_6 + ", var(--tw-ring-opacity))")]), utils.config('darkMode')));
        }
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'ringColor', order: pluginOrder['ringColor'] + 2 }); });
    }
    // handle ring width
    var value;
    if (utility.raw === 'ring-inset')
        return new Property('--tw-ring-inset', 'inset').updateMeta({ type: 'utilities', corePlugin: true, group: 'ringWidth', order: pluginOrder['ringWidth'] + 3 });
    if (utility.raw === 'ring')
        value = (_b = toType(utils.theme('ringWidth.DEFAULT'), 'string')) !== null && _b !== void 0 ? _b : '3px';
    value = utility.handler
        .handleStatic(utils.theme('ringWidth'))
        .handleSquareBrackets()
        .handleNumber(0, undefined, 'float', function (number) { return number + "px"; })
        .handleSize()
        .handleVariable()
        .value;
    if (value) {
        return new Style(utility.class, [
            new Property('--tw-ring-offset-shadow', 'var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)'),
            new Property('--tw-ring-shadow', "var(--tw-ring-inset) 0 0 0 calc(" + value + " + var(--tw-ring-offset-width)) var(--tw-ring-color)"),
            new Property(['-webkit-box-shadow', 'box-shadow'], 'var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)'),
        ]).updateMeta({ type: 'utilities', corePlugin: true, group: 'ringWidth', order: pluginOrder['ringWidth'] + (utility.raw === 'ring' ? 1 : 2) });
    }
}
// https://tailwindcss.com/docs/box-shadow/
function boxShadow(utility, _a) {
    var theme = _a.theme;
    var body = utility.body;
    if (body === '')
        body = 'DEFAULT';
    var shadows = toType(theme('boxShadow'), 'object');
    if (Object.keys(shadows).includes(body)) {
        return new Style(utility.class, [
            new Property('--tw-shadow', shadows[body]),
            new Property(['-webkit-box-shadow', 'box-shadow'], 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)'),
        ]).updateMeta({ type: 'utilities', corePlugin: true, group: 'boxShadow', order: pluginOrder['boxShadow'] + 1 });
    }
}
// https://tailwindcss.com/docs/opacity
function opacity(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('opacity'))
        .handleNumber(0, 100, 'int', function (number) { return (number / 100).toString(); })
        .handleVariable()
        .createProperty('opacity')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'opacity', order: pluginOrder['opacity'] + 1 });
}
// https://tailwindcss.com/docs/transition-property
function transition(utility, _a) {
    var _b, _c;
    var theme = _a.theme;
    var body = utility.body;
    var props = toType(theme('transitionProperty'), 'object');
    for (var _i = 0, _d = Object.entries(props); _i < _d.length; _i++) {
        var _e = _d[_i], key = _e[0], value = _e[1];
        if (body === key || (body === '' && key === 'DEFAULT')) {
            if (value === 'none')
                return new Property(['-webkit-transition-property', '-o-transition-property', 'transition-property'], 'none').updateMeta({ type: 'utilities', corePlugin: true, group: 'transitionProperty', order: pluginOrder['transitionProperty'] + 1 });
            return new Style(utility.class, [
                new Property('-webkit-transition-property', value.replace(/(?=(transform|box-shadow))/g, '-webkit-')),
                new Property('-o-transition-property', value),
                new Property('transition-property', value.replace(/transform/g, 'transform, -webkit-transform').replace(/box-shadow/g, 'box-shadow, -webkit-box-shadow')),
                new Property(['-webkit-transition-timing-function', '-o-transition-timing-function', 'transition-timing-function'], (_b = toType(theme('transitionTimingFunction.DEFAULT'), 'string')) !== null && _b !== void 0 ? _b : 'cubic-bezier(0.4, 0, 0.2, 1)'),
                new Property(['-webkit-transition-duration', '-o-transition-duration', 'transition-duration'], (_c = toType(theme('transitionDuration.DEFAULT'), 'string')) !== null && _c !== void 0 ? _c : '150ms'),
            ]).updateMeta({ type: 'utilities', corePlugin: true, group: 'transitionProperty', order: pluginOrder['transitionProperty'] + 2 });
        }
    }
}
// https://tailwindcss.com/docs/transition-duration
function duration(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('transitionDuration'))
        .handleNumber(0, undefined, 'int', function (number) { return number + "ms"; })
        .handleVariable()
        .createProperty(['-webkit-transition-duration', '-o-transition-duration', 'transition-duration'])) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'transitionDuration', order: pluginOrder['transitionDuration'] + 1 });
}
// https://tailwindcss.com/docs/transition-timing-function
function transitionTimingFunction(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleBody(theme('transitionTimingFunction'))
        .createProperty(['-webkit-transition-timing-function', '-o-transition-timing-function', 'transition-timing-function'])) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'transitionTimingFunction', order: pluginOrder['transitionTimingFunction'] + 1 });
}
// https://tailwindcss.com/docs/transition-delay
function delay(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('transitionDelay'))
        .handleNumber(0, undefined, 'int', function (number) { return number + "ms"; })
        .handleVariable()
        .createProperty(['-webkit-transition-delay', '-o-transition-delay', 'transition-delay'])) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'transitionDelay', order: pluginOrder['transitionDelay'] + 1 });
}
// https://tailwindcss.com/docs/animation
function animation(utility, _a) {
    var _b, _c;
    var theme = _a.theme, config = _a.config;
    var animations = toType(theme('animation'), 'object');
    if (Object.keys(animations).includes(utility.body)) {
        var value = animations[utility.body];
        var keyframe = (_b = value.match(/^\w+/)) === null || _b === void 0 ? void 0 : _b[0];
        var prop = config('prefixer') ? ['-webkit-animation', 'animation'] : 'animation';
        if (value === 'none')
            return new Property(prop, 'none').updateMeta({ type: 'utilities', corePlugin: true, group: 'animation', order: pluginOrder['animation'] + 1 });
        return __spreadArray([
            new Style(utility.class, new Property(prop, value)).updateMeta({ type: 'utilities', corePlugin: true, group: 'animation', order: pluginOrder['animation'] + 2 })
        ], keyframe ? Keyframes.generate(keyframe, ((_c = theme("keyframes." + keyframe)) !== null && _c !== void 0 ? _c : {}), undefined, config('prefixer', false)).map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'keyframes', order: pluginOrder['keyframes'] + 1 }); }) : []);
    }
}
// https://tailwindcss.com/docs/transform-origin
function transformOrigin(utility, _a) {
    var theme = _a.theme;
    var body = utility.body;
    var origins = toType(theme('transformOrigin'), 'object');
    if (Object.keys(origins).includes(body))
        return new Property(['-webkit-transform-origin', '-ms-transform-origin', 'transform-origin'], origins[body]).updateMeta({ type: 'utilities', corePlugin: true, group: 'transformOrigin', order: pluginOrder['transformOrigin'] + 1 });
}
// https://tailwindcss.com/docs/scale
function scale(utility, _a) {
    var theme = _a.theme;
    var value = utility.handler
        .handleStatic(theme('scale'))
        .handleNumber(0, undefined, 'int', function (number) { return (number / 100).toString(); })
        .handleVariable()
        .value;
    if (!value)
        return;
    if (utility.raw.startsWith('scale-x'))
        return new Property('--tw-scale-x', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'scale', order: pluginOrder['scale'] + 2 });
    if (utility.raw.startsWith('scale-y'))
        return new Property('--tw-scale-y', value).updateMeta({ type: 'utilities', corePlugin: true, group: 'scale', order: pluginOrder['scale'] + 3 });
    return new Property(['--tw-scale-x', '--tw-scale-y'], value).updateMeta({ type: 'utilities', corePlugin: true, group: 'scale', order: pluginOrder['scale'] + 1 });
}
// https://tailwindcss.com/docs/rotate
function rotate(utility, _a) {
    var _b;
    var theme = _a.theme;
    return (_b = utility.handler
        .handleStatic(theme('rotate'))
        .handleNumber(0, undefined, 'float', function (number) { return number + "deg"; })
        .handleNegative()
        .handleVariable()
        .createProperty('--tw-rotate')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'rotate', order: pluginOrder['rotate'] + (utility.raw.charAt(0) === '-' ? 2 : 1) });
}
// https://tailwindcss.com/docs/translate
function translate(utility, _a) {
    var _b;
    var theme = _a.theme;
    var centerMatch = utility.raw.match(/^-?translate-[x|y]/);
    if (centerMatch) {
        var center = centerMatch[0].replace(/^-?translate-/, '');
        return (_b = utility.handler
            .handleStatic(theme('translate'))
            .handleSquareBrackets()
            .handleSpacing()
            .handleFraction()
            .handleSize()
            .handleNegative()
            .handleVariable()
            .createProperty("--tw-translate-" + center)) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'translate', order: pluginOrder['translate'] + (utility.raw.charAt(0) === '-' ? 2 : 1) });
    }
}
// https://tailwindcss.com/docs/skew
function skew(utility, _a) {
    var _b;
    var theme = _a.theme;
    var centerMatch = utility.raw.match(/^-?skew-[x|y]/);
    if (centerMatch) {
        var center = centerMatch[0].replace(/^-?skew-/, '');
        return (_b = utility.handler
            .handleStatic(theme('skew'))
            .handleNumber(0, undefined, 'float', function (number) { return number + "deg"; })
            .handleNegative()
            .handleVariable()
            .createProperty("--tw-skew-" + center)) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'skew', order: pluginOrder['skew'] + (utility.raw.charAt(0) === '-' ? 2 : 1) });
    }
}
// https://tailwindcss.com/docs/cursor
function cursor(utility, _a) {
    var theme = _a.theme;
    var body = utility.body;
    var cursors = toType(theme('cursor'), 'object');
    if (Object.keys(cursors).includes(body))
        return new Property('cursor', cursors[body]).updateMeta({ type: 'utilities', corePlugin: true, group: 'cursor', order: pluginOrder['cursor'] + 1 });
}
// https://tailwindcss.com/docs/outline
function outline(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    var amount = utility.amount;
    var staticMap = toType(theme('outline'), 'object');
    if (Object.keys(staticMap).includes(amount))
        return new Style(utility.class, [new Property('outline', staticMap[amount][0]), new Property('outline-offset', staticMap[amount][1])]).updateMeta({ type: 'utilities', corePlugin: true, group: 'outline', order: pluginOrder['outline'] + 1 });
    if (utility.raw.match(/^outline-(solid|dotted)/)) {
        var newUtility = new Utility(utility.raw.replace('outline-', ''));
        var handler_1 = newUtility.handler
            .handleStatic({ none: 'transparent', white: 'white', black: 'black' })
            .handleColor()
            .handleVariable();
        if (handler_1.value) {
            var output = [new Style(utility.class, [new Property('outline', "2px " + newUtility.identifier + " " + handler_1.value), new Property('outline-offset', '2px')])];
            if (variants.includes('~dark') && handler_1.meta.darkColor)
                output.push(toDarkStyle(new Style(utility.class, new Property('outline', "2px " + newUtility.identifier + " " + handler_1.meta.darkColor)), config('darkMode')));
            return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'outline', order: pluginOrder['outline'] + 3 }); });
        }
    }
    var handler = utility.handler
        .handleColor()
        .handleVariable(function (variable) { return utility.raw.startsWith('outline-$') ? "var(--" + variable + ")" : undefined; });
    if (handler.value) {
        var output = [new Style(utility.class, [new Property('outline', "2px " + (handler.value === 'transparent' ? 'solid' : 'dotted') + " " + handler.value), new Property('outline-offset', '2px')])];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Style(utility.class, new Property('outline', "2px " + (handler.value === 'transparent' ? 'solid' : 'dotted') + " " + handler.meta.darkColor)), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'outline', order: pluginOrder['outline'] + 2 }); });
    }
}
// https://tailwindcss.com/docs/fill
function fill(utility, _a, variants) {
    var theme = _a.theme, config = _a.config;
    var handler = utility.handler.handleColor(theme('fill')).handleVariable();
    if (handler.value) {
        var output = [new Style(utility.class, new Property('fill', handler.value))];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Style(utility.class, new Property('stroke', handler.meta.darkColor)), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'fill', order: pluginOrder['fill'] + 1 }); });
    }
}
// https://tailwindcss.com/docs/stroke
// https://tailwindcss.com/docs/stroke-width
function stroke(utility, _a, variants) {
    var _b, _c;
    var theme = _a.theme, config = _a.config;
    var value = utility.raw.startsWith('stroke-$')
        ? (_b = utility.handler.handleVariable().createProperty('stroke-width')) === null || _b === void 0 ? void 0 : _b.updateMeta({ type: 'utilities', corePlugin: true, group: 'strokeWidth', order: pluginOrder['strokeWidth'] + 2 })
        : (_c = utility.handler.handleStatic(theme('strokeWidth')).handleNumber(0, undefined, 'int').createProperty('stroke-width')) === null || _c === void 0 ? void 0 : _c.updateMeta({ type: 'utilities', corePlugin: true, group: 'strokeWidth', order: pluginOrder['strokeWidth'] + 1 });
    if (value)
        return value;
    var handler = utility.handler.handleColor(theme('stroke')).handleVariable();
    if (handler.value) {
        var output = [new Style(utility.class, new Property('stroke', handler.value))];
        if (variants.includes('~dark') && handler.meta.darkColor)
            output.push(toDarkStyle(new Style(utility.class, new Property('stroke', handler.meta.darkColor)), config('darkMode')));
        return output.map(function (i) { return i.updateMeta({ type: 'utilities', corePlugin: true, group: 'stroke', order: pluginOrder['stroke'] + 1 }); });
    }
}
var dynamicUtilities = {
    container: container,
    space: space,
    divide: divide,
    bg: background,
    from: gradientColorFrom,
    via: gradientColorVia,
    to: gradientColorTo,
    border: border,
    rounded: borderRadius,
    cursor: cursor,
    flex: flex,
    order: order,
    font: font,
    h: size,
    leading: lineHeight,
    list: listStyleType,
    m: margin,
    my: margin,
    mx: margin,
    mt: margin,
    mr: margin,
    mb: margin,
    ml: margin,
    min: minMaxSize,
    max: minMaxSize,
    object: objectPosition,
    opacity: opacity,
    outline: outline,
    p: padding,
    py: padding,
    px: padding,
    pt: padding,
    pr: padding,
    pb: padding,
    pl: padding,
    placeholder: placeholder,
    inset: inset,
    top: inset,
    right: inset,
    bottom: inset,
    left: inset,
    shadow: boxShadow,
    ring: ring,
    fill: fill,
    stroke: stroke,
    text: text,
    tracking: letterSpacing,
    w: size,
    z: zIndex,
    gap: gap,
    auto: gridAuto,
    grid: gridTemplate,
    col: gridColumn,
    row: gridRow,
    origin: transformOrigin,
    scale: scale,
    rotate: rotate,
    translate: translate,
    skew: skew,
    transition: transition,
    ease: transitionTimingFunction,
    duration: duration,
    delay: delay,
    animate: animation,
};

function generateStaticStyle(processor, className, addComment) {
    if (addComment === void 0) { addComment = false; }
    // eslint-disable-next-line no-prototype-builtins
    if (!staticUtilities.hasOwnProperty(className))
        return;
    var style = new Style('.' + className);
    var comment = addComment ? className : undefined;
    var _a = staticUtilities[className], utility = _a.utility, meta = _a.meta;
    var _loop_1 = function (key, value) {
        style.add(Array.isArray(value)
            ? value.map(function (i) { return new Property(key, i, comment); })
            : new Property(key, value, comment));
    };
    for (var _i = 0, _b = Object.entries(utility); _i < _b.length; _i++) {
        var _c = _b[_i], key = _c[0], value = _c[1];
        _loop_1(key, value);
    }
    if (processor._plugin.core && !processor._plugin.core[meta.group])
        return;
    return style.updateMeta({
        type: 'utilities',
        corePlugin: true,
        group: meta.group,
        order: pluginOrder[meta.group] + meta.order,
    });
}
function extract(processor, className, addComment, variants, prefix) {
    if (addComment === void 0) { addComment = false; }
    // handle static base utilities
    if (!prefix && className in staticUtilities)
        return generateStaticStyle(processor, className, addComment);
    if (prefix && className.startsWith(prefix)) {
        className = className.replace(new RegExp("^" + prefix), '');
        if (className in staticUtilities)
            return generateStaticStyle(processor, className, addComment);
    }
    // handle static plugin utilities & components
    var staticPlugins = __assign(__assign(__assign({}, processor._plugin.utilities), processor._plugin.components), processor._plugin.shortcuts);
    if (className in staticPlugins)
        return deepCopy(staticPlugins[className]);
    var utility = new Utility(className);
    // handle dynamic plugin utilities
    for (var _i = 0, _a = Object.entries(processor._plugin.dynamic); _i < _a.length; _i++) {
        var _b = _a[_i], key_1 = _b[0], generator = _b[1];
        if (className.match(new RegExp("^-?" + key_1))) {
            var style = generator(utility);
            if (style instanceof Property)
                style = style.toStyle(utility.class);
            if (style && addComment)
                Array.isArray(style)
                    ? style.map(function (i) { return i.property.forEach(function (p) { return (p.comment = className); }); })
                    : style.property.forEach(function (p) { return (p.comment = className); });
            if (style)
                return style;
        }
    }
    // handle dynamic base utilities
    var matches = className.match(/\w+/);
    var key = matches ? matches[0] : undefined;
    // eslint-disable-next-line no-prototype-builtins
    if (key && dynamicUtilities.hasOwnProperty(key)) {
        var style = dynamicUtilities[key](utility, processor.pluginUtils, variants !== null && variants !== void 0 ? variants : []);
        if (!style)
            return;
        if (processor._plugin.core && !processor._plugin.core[Array.isArray(style) ? style[0].meta.group : style.meta.group])
            return;
        if (style instanceof Property)
            style = style.toStyle(utility.class);
        if (addComment)
            Array.isArray(style) ? style.map(function (i) { return i.property.forEach(function (p) { return (p.comment = className); }); }) : style.property.forEach(function (p) { return (p.comment = className); });
        return style;
    }
}

function preflight(processor, html, includeBase, includeGlobal, includePlugins) {
    if (includeBase === void 0) { includeBase = true; }
    if (includeGlobal === void 0) { includeGlobal = true; }
    if (includePlugins === void 0) { includePlugins = true; }
    // Generate preflight style based on html tags.
    var globalSheet = new StyleSheet();
    var styleSheet = new StyleSheet();
    var createStyle = function (selector, properties, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        var style = new Style(selector, undefined, false);
        var _loop_1 = function (key, value) {
            style.add(Array.isArray(value)
                ? value.map(function (v) { return new Property(key, v); })
                : new Property(key, typeof value === 'function' ? value(function (path, defaultValue) { return processor.theme(path, defaultValue); }) : value));
        };
        for (var _i = 0, _a = Object.entries(properties); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        style.updateMeta({ type: 'base', corePlugin: true, group: 'preflight', order: isGlobal ? 1 : 2 });
        return style;
    };
    var tags = html ? Array.from(new Set(html.match(/<\w+/g))).map(function (i) { return i.substring(1); }) : undefined;
    // handle base style
    includeBase && (processor.config('prefixer') ? preflights : preflights.filter(function (i) { return !i.selector || !/::?(webkit-input|-moz|-ms-input)-placeholder$/.test(i.selector); })).forEach(function (p) {
        if (includeGlobal && p.global) {
            // global style, such as * or html, body
            globalSheet.add(createStyle(p.selector, p.properties, true));
        }
        else if (tags !== undefined) {
            // only generate matched styles
            var includeTags = tags.filter(function (i) { return p.keys.includes(i); });
            if (includeTags.length > 0)
                styleSheet.add(createStyle(p.selector ? p.selector : includeTags.join(', '), p.properties));
        }
        else {
            // if no tags input, generate all styles
            styleSheet.add(createStyle(p.selector ? p.selector : p.keys.join(', '), p.properties));
        }
    });
    // handle plugin style
    if (includePlugins) {
        // base Styles
        var preflightList_1 = [];
        Object.values(processor._plugin.preflights).forEach(function (styles) {
            preflightList_1 = preflightList_1.concat(styles);
        });
        styleSheet.add(preflightList_1);
        // always generated styles
        var staticList_1 = [];
        Object.values(processor._plugin.static).forEach(function (styles) {
            staticList_1 = staticList_1.concat(styles);
        });
        styleSheet.add(staticList_1);
    }
    var result = styleSheet.combine().sort();
    return includeGlobal ? result.extend(globalSheet.combine().sort(), false) : result;
}

var createPlugin = function (plugin, config) {
    return {
        handler: plugin,
        config: config,
    };
};
createPlugin.withOptions = function (pluginFunction, configFunction) {
    if (configFunction === void 0) { configFunction = function () { return ({}); }; }
    var optionsFunction = function (options) {
        if (options === void 0) { options = {}; }
        return {
            __options: options,
            handler: pluginFunction(options),
            config: configFunction(options),
        };
    };
    optionsFunction.__isOptionsFunction = true;
    // Expose plugin dependencies so that `object-hash` returns a different
    // value if anything here changes, to ensure a rebuild is triggered.
    optionsFunction.__pluginFunction = pluginFunction;
    optionsFunction.__configFunction = configFunction;
    return optionsFunction;
};

var ClassParser = /** @class */ (function () {
    function ClassParser(classNames, separator) {
        if (separator === void 0) { separator = ':'; }
        this.classNames = classNames;
        this.separator = separator;
        this.index = 0;
    }
    ClassParser.prototype._handle_group = function (removeDuplicated) {
        if (removeDuplicated === void 0) { removeDuplicated = true; }
        if (!this.classNames)
            return [];
        var char;
        var group;
        var func;
        var variant;
        var variants = [];
        var variantStart = this.index + 1;
        var classStart = this.index + 1;
        var groupStart = this.index + 1;
        var important = false;
        var ignoreSpace = false;
        var ignoreBracket = false;
        var insideSquareBracket = false;
        var parts = [];
        var length = this.classNames.length;
        while (this.index < length) {
            this.index++;
            char = this.classNames.charAt(this.index);
            // ignore parsing and leave content inside square brackets as-is
            if (insideSquareBracket) {
                if (' \n\t\r'.includes(char)) {
                    insideSquareBracket = false;
                }
                else {
                    if (char === ']')
                        insideSquareBracket = false;
                    continue;
                }
            }
            // handle chars
            switch (char) {
                case '!':
                    important = true;
                    break;
                case this.separator:
                    variant = this.classNames.slice(variantStart, this.index);
                    variants.push(variant.charAt(0) === '!' ? variant.slice(1) : variant);
                    variantStart = this.index + 1;
                    ignoreSpace = true;
                    break;
                case '[':
                    insideSquareBracket = true;
                    break;
                case '(':
                    if (this.classNames.charAt(this.index - 1) === '-') {
                        ignoreBracket = true;
                    }
                    else if (ignoreSpace) {
                        group = this._handle_group();
                    }
                    else {
                        func = this.classNames.slice(groupStart, this.index);
                        group = this._handle_function();
                    }
                    ignoreSpace = false;
                    break;
                case ')':
                case ' ':
                case '\n':
                case '\t':
                case '\r':
                    if (!ignoreSpace) {
                        if (groupStart !== this.index) {
                            var raw = this.classNames.slice(classStart, this.index);
                            var start = classStart - 1;
                            var end = this.index - 1;
                            if (Array.isArray(group)) {
                                parts.push({ raw: raw, start: start, end: end, variants: variants, content: group, type: 'group', important: important });
                                group = undefined;
                            }
                            else if (func) {
                                parts.push({ raw: raw, start: start, end: end, variants: variants, func: func, content: group, type: 'func', important: important });
                                func = undefined;
                            }
                            else if (ignoreBracket) {
                                // utility with bracket
                                var utility = this.classNames.slice(variantStart, this.index + 1);
                                parts.push({ raw: raw + ')', start: start, end: this.index, variants: variants, content: utility.charAt(0) === '!' ? utility.slice(1) : utility, type: 'utility', important: important });
                            }
                            else {
                                var utility = this.classNames.slice(variantStart, this.index);
                                parts.push({ raw: raw, start: start, end: end, variants: variants, content: utility.charAt(0) === '!' ? utility.slice(1) : utility, type: 'utility', important: important });
                            }
                            variants = [];
                            important = false;
                        }
                        groupStart = this.index + 1;
                        classStart = this.index + 1;
                    }
                    variantStart = this.index + 1;
                    break;
                default:
                    ignoreSpace = false;
            }
            if (char === ')') {
                if (!ignoreBracket)
                    break; // end group
                ignoreBracket = false;
            }
        }
        if (removeDuplicated) {
            var newParts_1 = [];
            var cache_1 = [];
            parts.forEach(function (item) {
                if (!cache_1.includes(item.raw)) {
                    cache_1.push(item.raw);
                    newParts_1.push(item);
                }
            });
            return newParts_1;
        }
        return parts;
    };
    ClassParser.prototype._handle_function = function () {
        if (!this.classNames)
            return;
        var groupStart = this.index + 1;
        while (this.classNames.charAt(this.index) !== ')') {
            this.index++;
        }
        return this.classNames.slice(groupStart, this.index);
    };
    ClassParser.prototype.parse = function (removeDuplicated) {
        if (removeDuplicated === void 0) { removeDuplicated = true; }
        if (!this.classNames)
            return [];
        // Turn classes into group;
        this.classNames = '(' + this.classNames + ')';
        var elements = this._handle_group(removeDuplicated);
        // Initialization, convenient for next call
        this.index = 0;
        this.classNames = this.classNames.slice(1, -1);
        return elements;
    };
    return ClassParser;
}());

/* toSource by Marcello Bastea-Forte - zlib license */
function toSource(object, replacer, indent = '  ', startingIndent = '') {
    const seen = [];
    return walk(object, replacer, indent === false ? '' : indent, startingIndent, seen);
    function walk(object, replacer, indent, currentIndent, seen) {
        const nextIndent = currentIndent + indent;
        object = replacer ? replacer(object) : object;
        switch (typeof object) {
            case 'string':
                return JSON.stringify(object);
            case 'number':
                if (object === -0) {
                    return '-0';
                }
                return String(object);
            case 'boolean':
            case 'undefined':
                return String(object);
            case 'function':
                return object.toString();
        }
        if (object === null) {
            return 'null';
        }
        if (object instanceof RegExp) {
            return object.toString();
        }
        if (object instanceof Date) {
            return `new Date(${object.getTime()})`;
        }
        if (object instanceof Set) {
            return `new Set(${walk(Array.from(object.values()), replacer, indent, nextIndent, seen)})`;
        }
        if (object instanceof Map) {
            return `new Map(${walk(Array.from(object.entries()), replacer, indent, nextIndent, seen)})`;
        }
        if (seen.indexOf(object) >= 0) {
            return '{$circularReference:1}';
        }
        seen.push(object);
        function join(elements) {
            return (indent.slice(1) +
                elements.join(',' + (indent && '\n') + nextIndent) +
                (indent ? ' ' : ''));
        }
        if (Array.isArray(object)) {
            return `[${join(object.map((element) => walk(element, replacer, indent, nextIndent, seen.slice())))}]`;
        }
        const keys = Object.keys(object);
        if (keys.length) {
            return `{${join(keys.map((key) => (legalKey(key) ? key : JSON.stringify(key)) +
                ':' +
                walk(object[key], replacer, indent, nextIndent, seen.slice())))}}`;
        }
        return '{}';
    }
}
const KEYWORD_REGEXP = /^(abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|undefined|var|void|volatile|while|with)$/;
function legalKey(key) {
    return (/^([a-z_$][0-9a-z_$]*|[0-9]+)$/gi.test(key) && !KEYWORD_REGEXP.test(key));
}

var dist = toSource;

var Processor = /** @class */ (function () {
    function Processor(config) {
        var _this = this;
        this._variants = {};
        this._cache = {
            html: [],
            classes: [],
            utilities: [],
        };
        this._plugin = {
            static: {},
            dynamic: {},
            utilities: {},
            components: {},
            preflights: {},
            variants: {},
            shortcuts: {},
        };
        this.pluginUtils = {
            addDynamic: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.addDynamic.apply(_this, args);
            },
            addUtilities: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.addUtilities.apply(_this, args);
            },
            addComponents: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.addComponents.apply(_this, args);
            },
            addBase: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.addBase.apply(_this, args);
            },
            addVariant: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.addVariant.apply(_this, args);
            },
            e: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.e.apply(_this, args);
            },
            prefix: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.prefix.apply(_this, args);
            },
            config: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.config.apply(_this, args);
            },
            theme: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.theme.apply(_this, args);
            },
            variants: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.variants.apply(_this, args);
            },
        };
        this.variantUtils = {
            modifySelectors: function (modifier) {
                return new Style().wrapSelector(function (selector) {
                    return modifier({
                        className: /^[.#]/.test(selector) ? selector.substring(1) : selector,
                    });
                });
            },
            atRule: function (name) { return new Style().atRule(name); },
            pseudoClass: function (name) { return new Style().pseudoClass(name); },
            pseudoElement: function (name) { return new Style().pseudoElement(name); },
            parent: function (name) { return new Style().parent(name); },
            child: function (name) { return new Style().child(name); },
        };
        this._config = this.resolveConfig(config, baseConfig);
        this._theme = this._config.theme;
        this._config.shortcuts && this.loadShortcuts(this._config.shortcuts);
    }
    Processor.prototype._resolveConfig = function (userConfig, presets, handleExtend) {
        var _a;
        if (presets === void 0) { presets = {}; }
        if (handleExtend === void 0) { handleExtend = true; }
        if (userConfig.presets) {
            presets = this.resolveConfig(this._resolvePresets(userConfig.presets), presets);
            delete userConfig.presets;
        }
        var userTheme = userConfig.theme;
        if (userTheme)
            delete userConfig.theme;
        var extendTheme = userTheme && 'extend' in userTheme ? (_a = userTheme.extend) !== null && _a !== void 0 ? _a : {} : {};
        var theme = (presets.theme || {});
        if (userTheme) {
            if ('extend' in userTheme && handleExtend)
                delete userTheme.extend;
            for (var _i = 0, _b = Object.entries(userTheme); _i < _b.length; _i++) {
                var _c = _b[_i], key = _c[0], value = _c[1];
                theme[key] = typeof value === 'function' ? value : __assign({}, value);
            }
        }
        if (extendTheme && typeof extendTheme === 'object' && handleExtend) {
            var _loop_1 = function (key, value) {
                var themeValue = theme[key];
                if (typeof themeValue === 'function') {
                    theme[key] = function (theme, _a) {
                        var negative = _a.negative, breakpoints = _a.breakpoints;
                        return combineConfig(themeValue(theme, { negative: negative, breakpoints: breakpoints }), (typeof value === 'function' ? value(theme, { negative: negative, breakpoints: breakpoints }) : value !== null && value !== void 0 ? value : {}));
                    };
                }
                else if (typeof themeValue === 'object') {
                    theme[key] = function (theme, _a) {
                        var negative = _a.negative, breakpoints = _a.breakpoints;
                        return combineConfig(themeValue, (typeof value === 'function' ? value(theme, { negative: negative, breakpoints: breakpoints }) : value !== null && value !== void 0 ? value : {}));
                    };
                }
                else {
                    theme[key] = value;
                }
            };
            for (var _d = 0, _e = Object.entries(extendTheme); _d < _e.length; _d++) {
                var _f = _e[_d], key = _f[0], value = _f[1];
                _loop_1(key, value);
            }
        }
        return __assign(__assign(__assign({}, presets), userConfig), { theme: theme });
    };
    Processor.prototype._resolvePresets = function (presets) {
        var _this = this;
        var config = {};
        presets.forEach(function (p) {
            config = _this._resolveConfig(config, p, false);
        });
        return config;
    };
    Processor.prototype._resolveFunction = function (config) {
        var _this = this;
        var _a;
        if (!config.theme)
            return config;
        var theme = function (path, defaultValue) { return _this.theme(path, defaultValue); };
        for (var _i = 0, _b = [config.theme, 'extend' in config.theme ? (_a = config.theme.extend) !== null && _a !== void 0 ? _a : {} : {}]; _i < _b.length; _i++) {
            var dict = _b[_i];
            for (var _c = 0, _d = Object.entries(dict); _c < _d.length; _c++) {
                var _e = _d[_c], key = _e[0], value = _e[1];
                if (typeof value === 'function') {
                    dict[key] = value(theme, {
                        negative: negative,
                        breakpoints: breakpoints,
                    });
                }
            }
        }
        return config;
    };
    Processor.prototype._replaceStyleVariants = function (styles) {
        var _this = this;
        // @screen sm -> @screen (min-width: 640px)
        styles.forEach(function (style) {
            var _a;
            style.atRules = (_a = style.atRules) === null || _a === void 0 ? void 0 : _a.map(function (i) {
                var _a;
                if (i.match(/@screen/)) {
                    var variant = i.replace(/\s*@screen\s*/, '');
                    var atRule = (_a = _this._variants[variant]().atRules) === null || _a === void 0 ? void 0 : _a[0];
                    return atRule !== null && atRule !== void 0 ? atRule : i;
                }
                return i;
            });
        });
    };
    Processor.prototype._addPluginCache = function (type, key, styles) {
        styles = toArray(styles);
        this._plugin[type][key] = key in this._plugin[type]
            ? __spreadArray(__spreadArray([], this._plugin[type][key]), styles) : styles;
    };
    Processor.prototype._loadVariables = function () {
        var config = this.theme('vars');
        if (!config)
            return;
        this.addBase({ ':root': Object.assign.apply(Object, __spreadArray([{}], Object.keys(config).map(function (i) {
                var _a;
                return (_a = {}, _a["--" + i] = config[i], _a);
            }))) });
    };
    Processor.prototype.resolveConfig = function (config, presets) {
        var _this = this;
        var _a;
        this._config = this._resolveConfig(__assign(__assign({}, deepCopy(config ? config : {})), { exclude: config === null || config === void 0 ? void 0 : config.exclude }), deepCopy(presets)); // deep copy
        this._theme = this._config.theme; // update theme to make sure theme() function works.
        (_a = this._config.plugins) === null || _a === void 0 ? void 0 : _a.map(function (i) { return typeof i === 'function' ? ('__isOptionsFunction' in i ? _this.loadPluginWithOptions(i) : _this.loadPlugin(createPlugin(i))) : _this.loadPlugin(i); });
        this._config = this._resolveFunction(this._config);
        this._variants = this.resolveVariants();
        this._loadVariables();
        if (this._config.corePlugins)
            this._plugin.core = Array.isArray(this._config.corePlugins) ? Object.assign.apply(Object, __spreadArray([{}], this._config.corePlugins.map(function (i) {
                var _a;
                return (_a = {}, _a[i] = true, _a);
            }))) : __assign(__assign({}, Object.assign.apply(Object, __spreadArray([{}], Object.keys(pluginOrder).map(function (i) {
                var _a;
                return (_a = {}, _a[i] = true, _a);
            })))), this._config.corePlugins);
        return this._config;
    };
    Processor.prototype.resolveVariants = function (type) {
        var variants = resolveVariants(this._config);
        if (type) {
            return variants[type];
        }
        return __assign(__assign(__assign({}, variants.screen), variants.theme), variants.state);
    };
    Processor.prototype.resolveStaticUtilities = function (includePlugins) {
        if (includePlugins === void 0) { includePlugins = false; }
        var staticStyles = {};
        for (var key in staticUtilities) {
            var style = generateStaticStyle(this, key, true);
            if (style)
                staticStyles[key] = [style];
        }
        if (!includePlugins)
            return staticStyles;
        return __assign(__assign(__assign({}, staticStyles), this._plugin.utilities), this._plugin.components);
    };
    Processor.prototype.resolveDynamicUtilities = function (includePlugins) {
        if (includePlugins === void 0) { includePlugins = false; }
        if (!includePlugins)
            return dynamicUtilities;
        return __assign(__assign({}, dynamicUtilities), this._plugin.dynamic);
    };
    Object.defineProperty(Processor.prototype, "allConfig", {
        get: function () {
            return this._config;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Processor.prototype, "allTheme", {
        get: function () {
            var _a;
            return ((_a = this._theme) !== null && _a !== void 0 ? _a : {});
        },
        enumerable: false,
        configurable: true
    });
    Processor.prototype.wrapWithVariants = function (variants, styles) {
        // apply variant to style
        if (!Array.isArray(styles))
            styles = [styles];
        if (variants.length === 0)
            return styles;
        var allVariants = __assign(__assign({}, this._variants), this._plugin.variants);
        var filteredVariants = variants.filter(function (i) { return i in allVariants; });
        if (filteredVariants.length !== variants.length)
            return;
        return styles.map(function (style) {
            if (style instanceof Keyframes)
                return style;
            var wrapped = filteredVariants
                .map(function (i) { return allVariants[i](); })
                .reduce(function (previousValue, currentValue) {
                return previousValue.extend(currentValue);
            }, new Style())
                .extend(style);
            return (style instanceof Container) ? new Container().extend(wrapped) : wrapped;
        });
    };
    Processor.prototype.removePrefix = function (className) {
        var prefix = this.config('prefix');
        return prefix ? className.replace(new RegExp("^" + prefix), '') : className;
    };
    Processor.prototype.markAsImportant = function (style, force) {
        if (force === void 0) { force = false; }
        var _important = force ? force : this.config('important', false);
        var important = typeof _important === 'string' ? _important : _important;
        if (important) {
            if (typeof important === 'string') {
                style.parent(important);
            }
            else {
                style.important = true;
                style.property.forEach(function (i) { return i.important = true; });
            }
        }
        return style;
    };
    Processor.prototype.extract = function (className, addComment, variants, prefix) {
        if (addComment === void 0) { addComment = false; }
        return extract(this, className, addComment, variants, prefix);
    };
    Processor.prototype.preflight = function (html, includeBase, includeGlobal, includePlugins, ignoreProcessed) {
        if (includeBase === void 0) { includeBase = true; }
        if (includeGlobal === void 0) { includeGlobal = true; }
        if (includePlugins === void 0) { includePlugins = true; }
        if (ignoreProcessed === void 0) { ignoreProcessed = false; }
        var id;
        if (html) {
            id = hash(html);
            if (ignoreProcessed && this._cache.html.includes(id))
                return new StyleSheet();
        }
        id && ignoreProcessed && this._cache.html.push(id);
        return preflight(this, html, includeBase, includeGlobal, includePlugins);
    };
    Processor.prototype.interpret = function (classNames, ignoreProcessed, handleIgnored) {
        var _this = this;
        if (ignoreProcessed === void 0) { ignoreProcessed = false; }
        // Interpret tailwind class then generate raw tailwind css.
        var ast = new ClassParser(classNames, this.config('separator', ':')).parse();
        var success = [];
        var ignored = [];
        var styleSheet = new StyleSheet();
        var _hIgnored = function (className) {
            if (handleIgnored) {
                var style = handleIgnored(className);
                if (style) {
                    styleSheet.add(style);
                    success.push(className);
                }
                else {
                    ignored.push(className);
                }
            }
            ignored.push(className);
        };
        var _gStyle = function (baseClass, variants, selector, important, prefix) {
            if (important === void 0) { important = false; }
            if (_this._config.exclude && testRegexr(selector, _this._config.exclude)) {
                // filter exclude className
                ignored.push(selector);
                return;
            }
            if (variants[0] && selector in __assign(__assign({}, _this._plugin.utilities), _this._plugin.components)) {
                // handle special selector that conflict with class parser, such as 'hover:abc'
                success.push(selector);
                styleSheet.add(deepCopy(_this._plugin.utilities[selector]));
                return;
            }
            var result = _this.extract(baseClass, false, variants, prefix);
            if (result) {
                var escapedSelector_1 = '.' + cssEscape(selector);
                if (result instanceof Style) {
                    result.selector = escapedSelector_1;
                    _this.markAsImportant(result, important);
                }
                else if (Array.isArray(result)) {
                    result = result.map(function (i) {
                        if (i instanceof Keyframes)
                            return i;
                        i.selector = escapedSelector_1;
                        _this.markAsImportant(i, important);
                        return i;
                    });
                }
                var wrapped = _this.wrapWithVariants(variants, result);
                if (wrapped) {
                    success.push(selector);
                    styleSheet.add(wrapped);
                }
                else {
                    _hIgnored(selector);
                }
            }
            else {
                _hIgnored(selector);
            }
        };
        var _hGroup = function (obj, parentVariants) {
            if (parentVariants === void 0) { parentVariants = []; }
            Array.isArray(obj.content) &&
                obj.content.forEach(function (u) {
                    if (u.type === 'group') {
                        _hGroup(u, obj.variants);
                    }
                    else {
                        // utility
                        var variants = __spreadArray(__spreadArray(__spreadArray([], parentVariants), obj.variants), u.variants);
                        var important = obj.important || u.important;
                        var selector = (important ? '!' : '') + __spreadArray(__spreadArray([], variants), [u.content]).join(':');
                        typeof u.content === 'string' &&
                            _gStyle(u.content, variants, selector, important, _this.config('prefix'));
                    }
                });
        };
        ast.forEach(function (obj) {
            if (!(ignoreProcessed && _this._cache.utilities.includes(obj.raw))) {
                if (ignoreProcessed)
                    _this._cache.utilities.push(obj.raw);
                if (obj.type === 'utility') {
                    if (Array.isArray(obj.content)) ;
                    else if (obj.content) {
                        _gStyle(obj.content, obj.variants, obj.raw, obj.important, _this.config('prefix'));
                    }
                }
                else if (obj.type === 'group') {
                    _hGroup(obj);
                }
                else {
                    _hIgnored(obj.raw);
                }
            }
        });
        if (!this.config('prefixer'))
            styleSheet.prefixer = false;
        return {
            success: success,
            ignored: ignored,
            styleSheet: styleSheet,
        };
    };
    Processor.prototype.compile = function (classNames, prefix, showComment, ignoreGenerated, handleIgnored, outputClassName) {
        var _this = this;
        if (prefix === void 0) { prefix = 'windi-'; }
        if (showComment === void 0) { showComment = false; }
        if (ignoreGenerated === void 0) { ignoreGenerated = false; }
        // Compile tailwind css classes to one combined class.
        var ast = new ClassParser(classNames, this.config('separator', ':')).parse();
        var success = [];
        var ignored = [];
        var styleSheet = new StyleSheet();
        var className = outputClassName !== null && outputClassName !== void 0 ? outputClassName : prefix + hash(classNames.trim().split(/\s+/g).join(' '));
        if (ignoreGenerated && this._cache.classes.includes(className))
            return { success: success, ignored: ignored, styleSheet: styleSheet, className: className };
        var buildSelector = '.' + className;
        var _hIgnored = function (className) {
            if (handleIgnored) {
                var style = handleIgnored(className);
                if (style) {
                    styleSheet.add(style);
                    success.push(className);
                }
                else {
                    ignored.push(className);
                }
            }
            ignored.push(className);
        };
        var _gStyle = function (baseClass, variants, selector, important) {
            if (important === void 0) { important = false; }
            if (_this._config.exclude && testRegexr(selector, _this._config.exclude)) {
                // filter exclude className
                ignored.push(selector);
                return;
            }
            if (variants[0] && selector in __assign(__assign({}, _this._plugin.utilities), _this._plugin.components)) {
                // handle special selector that conflict with class parser, such as 'hover:abc'
                success.push(selector);
                styleSheet.add(deepCopy(_this._plugin.utilities[selector]));
                return;
            }
            var result = _this.extract(baseClass, showComment, variants);
            if (result) {
                if (Array.isArray(result)) {
                    result.forEach(function (i) {
                        if (i instanceof Keyframes)
                            return i;
                        i.selector = buildSelector;
                        _this.markAsImportant(i, important);
                    });
                }
                else {
                    result.selector = buildSelector;
                    _this.markAsImportant(result, important);
                }
                var wrapped = _this.wrapWithVariants(variants, result);
                if (wrapped) {
                    success.push(selector);
                    styleSheet.add(wrapped);
                }
                else {
                    _hIgnored(selector);
                }
            }
            else {
                _hIgnored(selector);
            }
        };
        var _hGroup = function (obj, parentVariants) {
            if (parentVariants === void 0) { parentVariants = []; }
            Array.isArray(obj.content) &&
                obj.content.forEach(function (u) {
                    if (u.type === 'group') {
                        _hGroup(u, obj.variants);
                    }
                    else {
                        // utility
                        var variants = __spreadArray(__spreadArray(__spreadArray([], parentVariants), obj.variants), u.variants);
                        var selector = __spreadArray(__spreadArray([], variants), [u.content]).join(':');
                        typeof u.content === 'string' &&
                            _gStyle(_this.removePrefix(u.content), variants, selector, obj.important || u.important);
                    }
                });
        };
        ast.forEach(function (obj) {
            if (obj.type === 'utility') {
                if (Array.isArray(obj.content)) ;
                else if (obj.content) {
                    _gStyle(_this.removePrefix(obj.content), obj.variants, obj.raw, obj.important);
                }
            }
            else if (obj.type === 'group') {
                _hGroup(obj);
            }
            else {
                _hIgnored(obj.raw);
            }
        });
        className = success.length > 0 ? className : undefined;
        if (ignoreGenerated && className)
            this._cache.classes.push(className);
        if (!this.config('prefixer'))
            styleSheet.prefixer = false;
        return {
            success: success,
            ignored: ignored,
            className: className,
            styleSheet: styleSheet,
        };
    };
    Processor.prototype.loadPlugin = function (_a) {
        var handler = _a.handler, config = _a.config;
        if (config) {
            config = this._resolveFunction(config);
            config = combineConfig(config, this._config);
            var pluginTheme = config.theme;
            var extendTheme = pluginTheme === null || pluginTheme === void 0 ? void 0 : pluginTheme.extend;
            if (pluginTheme && extendTheme && typeof extendTheme === 'object') {
                for (var _i = 0, _b = Object.entries(extendTheme); _i < _b.length; _i++) {
                    var _c = _b[_i], key = _c[0], value = _c[1];
                    var themeValue = pluginTheme[key];
                    if (themeValue && typeof themeValue === 'object') {
                        pluginTheme[key] = __assign(__assign({}, (themeValue !== null && themeValue !== void 0 ? themeValue : {})), value);
                    }
                    else if (value && typeof value === 'object') {
                        pluginTheme[key] = value;
                    }
                }
            }
            this._config = __assign(__assign({}, config), { theme: pluginTheme });
            this._theme = pluginTheme;
        }
        this._config = this._resolveFunction(this._config);
        this._theme = this._config.theme;
        this._variants = this.resolveVariants();
        handler(this.pluginUtils);
    };
    Processor.prototype.loadPluginWithOptions = function (optionsFunction, userOptions) {
        var plugin = optionsFunction(userOptions !== null && userOptions !== void 0 ? userOptions : {});
        this.loadPlugin(plugin);
    };
    Processor.prototype.loadShortcuts = function (shortcuts) {
        var _this = this;
        var _loop_2 = function (key, value) {
            var prefix = this_1.config('prefix', '');
            if (typeof value === 'string') {
                this_1._plugin.shortcuts[key] = this_1.compile(value, undefined, undefined, false, undefined, cssEscape(prefix + key)).styleSheet.children.map(function (i) { return i.updateMeta({ type: 'components', group: 'shortcuts', order: layerOrder['shortcuts'] }); });
            }
            else {
                var styles_1 = [];
                Style.generate('.' + cssEscape(key), value).forEach(function (style) {
                    for (var _i = 0, _a = style.property; _i < _a.length; _i++) {
                        var prop = _a[_i];
                        if (!prop.value)
                            continue;
                        if (prop.name === '@apply') {
                            styles_1 = styles_1.concat(_this.compile(Array.isArray(prop.value) ? prop.value.join(' ') : prop.value).styleSheet.children.map(function (i) {
                                var newStyle = deepCopy(style);
                                newStyle.property = [];
                                return newStyle.extend(i);
                            }));
                        }
                        else {
                            var newStyle = deepCopy(style);
                            newStyle.property = [prop];
                            styles_1.push(newStyle);
                        }
                    }
                });
                this_1._plugin.shortcuts[key] = styles_1.map(function (i) { return i.updateMeta({ type: 'components', group: 'shortcuts', order: layerOrder['shortcuts'] }); });
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.entries(shortcuts); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_2(key, value);
        }
    };
    // tailwind interfaces
    Processor.prototype.config = function (path, defaultValue) {
        var _this = this;
        var _a;
        if (path === 'corePlugins')
            return this._plugin.core ? Object.keys(this._plugin.core).filter(function (i) { var _a; return (_a = _this._plugin.core) === null || _a === void 0 ? void 0 : _a[i]; }) : Object.keys(pluginOrder);
        var value = (_a = getNestedValue(this._config, path)) !== null && _a !== void 0 ? _a : defaultValue;
        return (Array.isArray(value) && /[cC]olors/.test(path)) ? value.slice(-2, -1)[0] : value;
    };
    Processor.prototype.theme = function (path, defaultValue) {
        var _a;
        var value = this._theme ? (_a = getNestedValue(this._theme, path)) !== null && _a !== void 0 ? _a : defaultValue : undefined;
        return (Array.isArray(value) && /[cC]olors/.test(path)) ? value.slice(-2, -1)[0] : value;
    };
    Processor.prototype.corePlugins = function (path) {
        var _a;
        if (Array.isArray(this._config.corePlugins)) {
            return this._config.corePlugins.includes(path);
        }
        return (_a = this.config("corePlugins." + path, true)) !== null && _a !== void 0 ? _a : false;
    };
    Processor.prototype.variants = function (path, defaultValue) {
        if (defaultValue === void 0) { defaultValue = []; }
        if (Array.isArray(this._config.variants)) {
            return this._config.variants;
        }
        return this.config("variants." + path, defaultValue);
    };
    Processor.prototype.e = function (selector) {
        return cssEscape(selector);
    };
    Processor.prototype.prefix = function (selector) {
        var _a;
        return selector.replace(/(?=[\w])/, (_a = this._config.prefix) !== null && _a !== void 0 ? _a : '');
    };
    Processor.prototype.addUtilities = function (utilities, options) {
        var _this = this;
        var _a;
        if (options === void 0) { options = {
            layer: 'utilities',
            variants: [],
            respectPrefix: true,
            respectImportant: true,
        }; }
        if (Array.isArray(options))
            options = { variants: options };
        if (Array.isArray(utilities))
            utilities = utilities.reduce(function (previous, current) { return combineConfig(previous, current); }, {});
        var output = [];
        var layer = (_a = options.layer) !== null && _a !== void 0 ? _a : 'utilities';
        var order = layerOrder[layer];
        var _loop_3 = function (key, value) {
            var styles = Style.generate(key.startsWith('.') && options.respectPrefix ? this_2.prefix(key) : key, value);
            if (options.layer)
                styles.forEach(function (style) { return style.updateMeta({ type: layer, group: 'plugin', order: order }); });
            if (options.respectImportant && this_2._config.important)
                styles.forEach(function (style) { return style.important = true; });
            var className = guessClassName(key);
            if (key.charAt(0) === '@') {
                styles.forEach(function (style) {
                    if (style.selector)
                        className = guessClassName(style.selector);
                    if (Array.isArray(className)) {
                        className.filter(function (i) { return i.isClass; }).forEach(function (_a) {
                            var selector = _a.selector, pseudo = _a.pseudo;
                            return _this._addPluginCache('utilities', selector, pseudo ? style.clone('.' + cssEscape(selector)).wrapSelector(function (selector) { return selector + pseudo; }) : style.clone());
                        });
                        var base = className.filter(function (i) { return !i.isClass; }).map(function (i) { return i.selector; }).join(', ');
                        if (base)
                            _this._addPluginCache('static', base, style.clone(base));
                    }
                    else {
                        _this._addPluginCache(className.isClass ? 'utilities' : 'static', className.selector, className.pseudo ? style.clone('.' + cssEscape(className.selector)).wrapSelector(function (selector) { return selector + className.pseudo; }) : style.clone());
                    }
                });
            }
            else if (Array.isArray(className)) {
                className.filter(function (i) { return i.isClass; }).forEach(function (_a) {
                    var selector = _a.selector, pseudo = _a.pseudo;
                    return _this._addPluginCache('utilities', selector, pseudo ? styles.map(function (i) { return i.clone('.' + cssEscape(selector)).wrapSelector(function (selector) { return selector + pseudo; }); }) : deepCopy(styles));
                });
                var base_1 = className.filter(function (i) { return !i.isClass; }).map(function (i) { return i.selector; }).join(', ');
                if (base_1)
                    this_2._addPluginCache('static', base_1, styles.map(function (i) { return i.clone(base_1); }));
            }
            else {
                this_2._addPluginCache(className.isClass ? 'utilities' : 'static', className.selector, className.pseudo ? styles.map(function (style) { return style.clone('.' + cssEscape(className.selector)).wrapSelector(function (selector) { return selector + className.pseudo; }); }) : styles);
            }
            output = __spreadArray(__spreadArray([], output), styles);
        };
        var this_2 = this;
        for (var _i = 0, _b = Object.entries(utilities); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            _loop_3(key, value);
        }
        return output;
    };
    Processor.prototype.addDynamic = function (key, generator, options) {
        var _this = this;
        var _a;
        if (options === void 0) { options = {
            layer: 'utilities',
            variants: [],
            respectPrefix: true,
            respectImportant: true,
        }; }
        var uOptions = Array.isArray(options) ? { variants: options } : options;
        var layer = (_a = uOptions.layer) !== null && _a !== void 0 ? _a : 'utilities';
        var order = layerOrder[layer];
        var style = function (selector, property, important) {
            if (important === void 0) { important = uOptions.respectImportant && _this._config.important ? true : false; }
            return new Style(selector, property, important);
        };
        var prop = function (name, value, comment, important) {
            if (important === void 0) { important = uOptions.respectImportant && _this._config.important ? true : false; }
            return new Property(name, value, comment, important);
        };
        var keyframes = function (selector, property, important) {
            if (important === void 0) { important = uOptions.respectImportant && _this._config.important ? true : false; }
            return new Keyframes(selector, property, important);
        };
        keyframes.generate = Keyframes.generate;
        style.generate = Style.generate;
        prop.parse = Property.parse;
        this._plugin.dynamic[key] = (key in this._plugin.dynamic)
            ? function (Utility) { return deepCopy(_this._plugin.dynamic[key])(Utility) || generator({ Utility: Utility, Style: style, Property: prop, Keyframes: keyframes }); }
            : function (Utility) {
                var output = generator({ Utility: Utility, Style: style, Property: prop, Keyframes: keyframes });
                if (!output)
                    return;
                if (Array.isArray(output))
                    return output.map(function (i) { return i.updateMeta({ type: layer, group: 'plugin', order: order }); });
                return output.updateMeta({ type: layer, group: 'plugin', order: order });
            };
        return generator;
    };
    Processor.prototype.addComponents = function (components, options) {
        var _this = this;
        var _a;
        if (options === void 0) { options = { layer: 'components', variants: [], respectPrefix: false }; }
        if (Array.isArray(options))
            options = { variants: options };
        if (Array.isArray(components))
            components = components.reduce(function (previous, current) { return combineConfig(previous, current); }, {});
        var output = [];
        var layer = (_a = options.layer) !== null && _a !== void 0 ? _a : 'components';
        var order = layerOrder[layer];
        var _loop_4 = function (key, value) {
            var styles = Style.generate(key.startsWith('.') && options.respectPrefix ? this_3.prefix(key) : key, value);
            styles.forEach(function (style) { return style.updateMeta({ type: layer, group: 'plugin', order: order }); });
            if (options.respectImportant && this_3._config.important)
                styles.forEach(function (style) { return style.important = true; });
            var className = guessClassName(key);
            if (key.charAt(0) === '@') {
                styles.forEach(function (style) {
                    if (style.selector)
                        className = guessClassName(style.selector);
                    if (Array.isArray(className)) {
                        className.filter(function (i) { return i.isClass; }).forEach(function (_a) {
                            var selector = _a.selector, pseudo = _a.pseudo;
                            return _this._addPluginCache('components', selector, pseudo ? style.clone('.' + cssEscape(selector)).wrapSelector(function (selector) { return selector + pseudo; }) : style.clone());
                        });
                        var base = className.filter(function (i) { return !i.isClass; }).map(function (i) { return i.selector; }).join(', ');
                        if (base)
                            _this._addPluginCache('static', base, style.clone(base));
                    }
                    else {
                        _this._addPluginCache(className.isClass ? 'components' : 'static', className.selector, className.pseudo ? style.clone('.' + cssEscape(className.selector)).wrapSelector(function (selector) { return selector + className.pseudo; }) : style.clone());
                    }
                });
            }
            else if (Array.isArray(className)) {
                // one of the selector are not class, treat the entire as static to avoid duplication
                if (className.some(function (i) { return !i.isClass; })) {
                    var base_2 = className.map(function (i) { return i.selector; }).join(', ');
                    if (base_2)
                        this_3._addPluginCache('static', base_2, styles.map(function (i) { return i.clone(base_2); }));
                }
                // class
                else {
                    className.forEach(function (_a) {
                        var selector = _a.selector, pseudo = _a.pseudo;
                        return _this._addPluginCache('components', selector, pseudo ? styles.map(function (i) { return i.clone('.' + cssEscape(selector)).wrapSelector(function (selector) { return selector + pseudo; }); }) : deepCopy(styles));
                    });
                }
            }
            else {
                this_3._addPluginCache(className.isClass ? 'components' : 'static', className.selector, className.pseudo ? styles.map(function (style) { return style.clone('.' + cssEscape(className.selector)).wrapSelector(function (selector) { return selector + className.pseudo; }); }) : styles);
            }
            output = __spreadArray(__spreadArray([], output), styles);
        };
        var this_3 = this;
        for (var _i = 0, _b = Object.entries(components); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            _loop_4(key, value);
        }
        return output;
    };
    Processor.prototype.addBase = function (baseStyles) {
        var output = [];
        for (var _i = 0, _a = Object.entries(baseStyles); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            var styles = Style.generate(key, value).map(function (i) { return i.updateMeta({ type: 'base', group: 'plugin', order: 10 }); });
            this._replaceStyleVariants(styles);
            this._addPluginCache('preflights', key, styles);
            output = __spreadArray(__spreadArray([], output), styles);
        }
        return output;
    };
    Processor.prototype.addVariant = function (name, generator) {
        // name && generator && options;
        var style = generator(__assign(__assign({}, this.variantUtils), { separator: this.config('separator', ':'), style: new Style() }));
        this._plugin.variants[name] = function () { return style; };
        return style;
    };
    Processor.prototype.dumpConfig = function () {
        var processor = new Processor();
        var diff = diffConfig(processor._config, this._config);
        var output = { theme: { extend: {} }, plugins: [] };
        if (diff.theme) {
            for (var _i = 0, _a = Object.entries(diff.theme); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (key !== 'extend') {
                    output.theme.extend[key] = value;
                }
            }
            delete diff.theme;
        }
        if (diff.plugins) {
            for (var _c = 0, _d = diff.plugins; _c < _d.length; _c++) {
                var plugin_1 = _d[_c];
                if ('config' in plugin_1) {
                    delete plugin_1.config;
                }
                output.plugins.push(plugin_1);
            }
            delete diff.plugins;
        }
        output = __assign(__assign({}, diff), output);
        return "module.exports = " + dist(output);
    };
    return Processor;
}());

exports.Processor = Processor;
