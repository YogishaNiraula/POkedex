import { Property } from '../../utils/style';
declare class Handler {
    private _center;
    private _amount;
    utility: Utility;
    value: string | undefined;
    meta: {
        [key: string]: any;
    };
    constructor(utility: Utility);
    handleStatic(map?: {
        [key: string]: string | string[];
    } | unknown, callback?: (str: string) => string | undefined): this;
    handleBody(map?: {
        [key: string]: string | string[];
    } | unknown, callback?: (str: string) => string | undefined): this;
    handleSquareBrackets(callback?: (number: string) => string | undefined): this;
    handleNumber(start?: number, end?: number, type?: 'int' | 'float', callback?: (number: number) => string | undefined): this;
    handleSpacing(): this;
    handleNxl(callback?: (number: number) => string | undefined): this;
    handleFraction(callback?: (fraction: string) => string | undefined): this;
    handleSize(callback?: (size: string) => string | undefined): this;
    handleVariable(callback?: (variable: string) => string | undefined): this;
    handleColor(map?: {
        [key: string]: string | string[] | {
            [key: string]: string | string[];
        };
    } | unknown): this;
    handleNegative(callback?: (value: string) => string | undefined): this;
    handleValue(callback?: (value: string) => string | undefined): this;
    createProperty(name: string | string[], callback?: (value: string) => string): Property | undefined;
}
export declare class Utility {
    raw: string;
    constructor(raw: string);
    match(expression: RegExp): string;
    get class(): string;
    get isNegative(): boolean;
    get absolute(): string;
    get identifier(): string;
    get key(): string;
    get center(): string;
    get amount(): string;
    get body(): string;
    get handler(): Handler;
}
export {};
