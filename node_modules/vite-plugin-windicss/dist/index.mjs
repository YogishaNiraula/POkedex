var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/index.ts
import {resolve as resolve2} from "path";
import _debug2, {log} from "debug";
import {createUtils} from "@windicss/plugin-utils";

// ../shared/virtual-module.ts
var MODULE_IDS = [/^virtual:windi(.*?)\.css/, /^windi(.*?)\.css/];
var MODULE_ID_VIRTUAL_PREFIX = "/@windicss/windi";
var MODULE_ID_VIRTUAL = /\/\@windicss\/windi-?(.*?)\.css/;
var MODULE_ID_VIRTUAL_MODULES = [
  `${MODULE_ID_VIRTUAL_PREFIX}.css`,
  `${MODULE_ID_VIRTUAL_PREFIX}-base.css`,
  `${MODULE_ID_VIRTUAL_PREFIX}-utilities.css`,
  `${MODULE_ID_VIRTUAL_PREFIX}-components.css`
];
function createVirtualModuleLoader(ctx) {
  return {
    resolveId(id) {
      for (const idRegex of MODULE_IDS) {
        const match = id.match(idRegex);
        if (match)
          return `${MODULE_ID_VIRTUAL_PREFIX}${match[1]}.css`;
      }
      return null;
    },
    async load(id) {
      const match = id.match(MODULE_ID_VIRTUAL);
      if (match) {
        const layer = match[1] || void 0;
        const css = await ctx.utils.generateCSS(layer);
        return css;
      }
    }
  };
}

// src/devtools.ts
import {promises as fs} from "fs";
import {resolve} from "path";
import _debug from "debug";

// src/constants.ts
var NAME = "vite-plugin-windicss";

// src/modules.ts
function getChangedModuleNames(utils) {
  if (utils.hasPending)
    utils.buildPendingStyles();
  const moduleNames = [
    `${MODULE_ID_VIRTUAL_PREFIX}.css`
  ];
  Object.entries(utils.layersMeta).forEach(([name, meta]) => {
    if (meta.cssCache == null)
      moduleNames.push(`${MODULE_ID_VIRTUAL_PREFIX}-${name}.css`);
  });
  return moduleNames;
}
function getCssModules(server, names = MODULE_ID_VIRTUAL_MODULES) {
  return names.map((name) => server.moduleGraph.getModuleById(name)).filter(Boolean);
}
function invalidateCssModules(server, modules = getCssModules(server)) {
  return modules.forEach((m) => server.moduleGraph.invalidateModule(m));
}
function sendHmrReload(server, modules = getCssModules(server)) {
  const timestamp = +Date.now();
  server.ws.send({
    type: "update",
    updates: modules.map((m) => ({
      acceptedPath: m.id || m.file,
      path: m.id || m.file,
      timestamp,
      type: "js-update"
    }))
  });
}
function reloadChangedCssModules(server, utils) {
  const cssModules = getCssModules(server, getChangedModuleNames(utils));
  invalidateCssModules(server, cssModules);
  sendHmrReload(server, cssModules);
  return cssModules;
}

// src/devtools.ts
var debug = {
  devtools: _debug(`${NAME}:devtools`)
};
var DEVTOOLS_MODULE_ID = "virtual:windi-devtools";
var MOCK_CLASSES_MODULE_ID = "virtual:windi-mock-classes";
var MOCK_CLASSES_PATH = "/@windicss/mock-classes";
var DEVTOOLS_PATH = "/@windicss/devtools";
var MODULES_MAP = {
  [DEVTOOLS_MODULE_ID]: DEVTOOLS_PATH,
  [MOCK_CLASSES_MODULE_ID]: MOCK_CLASSES_PATH
};
var POST_PATH = "/@windicss-devtools-update";
function getBodyJson(req) {
  return new Promise((resolve3, reject) => {
    let body = "";
    req.on("data", (chunk) => body += chunk);
    req.on("error", reject);
    req.on("end", () => {
      try {
        resolve3(JSON.parse(body) || {});
      } catch (e) {
        reject(e);
      }
    });
  });
}
function createDevtoolsPlugin(ctx) {
  let config;
  let server;
  let clientCode = "";
  function updateCSS() {
    if (!server)
      return;
    const names = getChangedModuleNames(ctx.utils);
    const modules = getCssModules(server, names);
    invalidateCssModules(server, modules);
    sendHmrReload(server, modules);
  }
  function toClass(name) {
    return `.${ctx.utils.processor.e(name)}{}`;
  }
  function getMockClassesInjector() {
    const completions = ctx.utils.getCompletions();
    const comment = "/* Windi CSS mock class names for devtools auto-completion */\n";
    const css = [
      ...completions.color,
      ...completions.static
    ].map(toClass).join("");
    return `
const style = document.createElement('style')
style.setAttribute('type', 'text/css')
style.innerHTML = ${JSON.stringify(comment + css)}
document.head.prepend(style)
`;
  }
  return [
    {
      name: `${NAME}:devtools`,
      configResolved(_config) {
        config = _config;
      },
      configureServer(_server) {
        server = _server;
        server.middlewares.use(async (req, res, next) => {
          if (req.url !== POST_PATH)
            return next();
          try {
            const data = await getBodyJson(req);
            const type = data == null ? void 0 : data.type;
            debug.devtools(data);
            let changed = false;
            switch (type) {
              case "add-classes":
                changed = ctx.utils.addClasses(data.data || []);
            }
            if (changed)
              updateCSS();
            res.statusCode = 200;
          } catch (e) {
            console.error(e);
            res.statusCode = 500;
          }
          res.end();
        });
      },
      resolveId(id) {
        return MODULES_MAP[id];
      },
      async load(id) {
        if (id === DEVTOOLS_PATH) {
          if (!clientCode) {
            clientCode = [
              await fs.readFile(resolve(__dirname, "client.mjs"), "utf-8"),
              `import('${MOCK_CLASSES_MODULE_ID}')`
            ].join("\n").replace("__POST_PATH__", POST_PATH);
          }
          return config.command === "build" ? "" : clientCode;
        } else if (id === MOCK_CLASSES_PATH) {
          return getMockClassesInjector();
        }
      }
    }
  ];
}

// src/index.ts
export * from "@windicss/plugin-utils";
var debug2 = {
  hmr: _debug2(`${NAME}:hmr`),
  css: _debug2(`${NAME}:transform:css`),
  group: _debug2(`${NAME}:transform:group`),
  memory: _debug2(`${NAME}:memory`)
};
function VitePluginWindicss(userOptions = {}, utilsOptions = {}) {
  let utils;
  let viteConfig;
  let server;
  const plugins = [];
  if (userOptions.transformGroups !== false) {
    plugins.push({
      name: `${NAME}:groups`,
      async transform(code, id) {
        await utils.ensureInit();
        if (!utils.isDetectTarget(id))
          return;
        debug2.group(id);
        if (viteConfig.build.sourcemap)
          return utils.transformGroupsWithSourcemap(code);
        else
          return utils.transformGroups(code);
      }
    });
  }
  plugins.push({
    name: NAME,
    get api() {
      return utils;
    }
  });
  plugins.push(__objSpread({
    name: `${NAME}:entry`,
    enforce: "post",
    configureServer(_server) {
      server = _server;
    },
    async configResolved(_config) {
      viteConfig = _config;
      utils = createUtils(userOptions, __objSpread({
        name: NAME,
        root: _config.root,
        onConfigurationError(e) {
          if (_config.command === "build") {
            throw e;
          } else {
            console.error(`[${NAME}] Error on loading configurations`);
            console.error(e);
          }
        }
      }, utilsOptions));
      await utils.init();
    }
  }, createVirtualModuleLoader({get utils() {
    return utils;
  }})));
  plugins.push({
    name: `${NAME}:hmr`,
    apply: "serve",
    enforce: "post",
    async configureServer(_server) {
      var _a;
      server = _server;
      await utils.ensureInit();
      if (utils.configFilePath)
        server.watcher.add(utils.configFilePath);
      const supportsGlobs = ((_a = server.config.server.watch) == null ? void 0 : _a.disableGlobbing) === false;
      server.watcher.add(supportsGlobs ? utils.globs : await utils.getFiles());
    },
    async handleHotUpdate({server: server2, file, read, modules}) {
      if (resolve2(file) === utils.configFilePath) {
        debug2.hmr(`config file changed: ${file}`);
        await utils.init();
        setTimeout(() => {
          log("configure file changed, reloading");
          server2.ws.send({type: "full-reload"});
        }, 0);
        return getCssModules(server2);
      }
      if (!utils.isDetectTarget(file))
        return;
      const changed = await utils.extractFile(await read(), file, true);
      if (!changed)
        return;
      const cssModules = getCssModules(server2, getChangedModuleNames(utils));
      debug2.hmr(`refreshed by ${file}`);
      invalidateCssModules(server2, cssModules);
      if (file.endsWith(".html"))
        return void 0;
      return [...cssModules, ...modules].filter(Boolean);
    }
  });
  const {transformCSS: transformCSSOptions = true} = userOptions;
  const transformCSS = (code, id) => utils.transformCSS(code, id, {
    onLayerUpdated() {
      if (server)
        reloadChangedCssModules(server, utils);
    }
  });
  if (transformCSSOptions === true) {
    plugins.push({
      name: `${NAME}:css`,
      async transform(code, id) {
        await utils.ensureInit();
        if (!utils.isCssTransformTarget(id) || id.startsWith(MODULE_ID_VIRTUAL_PREFIX))
          return;
        debug2.css(id);
        return {
          code: transformCSS(code, id),
          map: {mappings: ""}
        };
      }
    });
  } else if (typeof transformCSSOptions === "string") {
    plugins.push({
      name: `${NAME}:css`,
      enforce: transformCSSOptions,
      transform(code, id) {
        if (!utils.isCssTransformTarget(id) || id.startsWith(MODULE_ID_VIRTUAL_PREFIX))
          return;
        debug2.css(id, transformCSSOptions);
        return {
          code: transformCSS(code, id),
          map: {mappings: ""}
        };
      }
    });
  }
  plugins.push({
    name: `${NAME}:css:svelte`,
    sveltePreprocess: {
      style({content, id}) {
        return {
          code: transformCSS(content, id)
        };
      }
    }
  });
  plugins.push(...createDevtoolsPlugin({get utils() {
    return utils;
  }}));
  return plugins;
}
var src_default = VitePluginWindicss;
export {
  src_default as default
};
